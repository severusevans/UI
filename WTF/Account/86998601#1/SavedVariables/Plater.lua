
PlaterDB = {
["captured_spells"] = {
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[443111] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glooming Disciple",
["npcID"] = 216867,
},
[451811] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pious Disciple",
["npcID"] = 217464,
},
[423665] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "BUFF",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2848,
},
[8222] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[426736] = {
["encounterName"] = "Speaker Shadowcrown",
["type"] = "DEBUFF",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211087,
},
[453859] = {
["encounterName"] = "Speaker Shadowcrown",
["type"] = "BUFF",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211087,
},
[390915] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vile Lasher",
["npcID"] = 197219,
},
[434926] = {
["encounterName"] = "Orator Krix'vizk",
["type"] = "DEBUFF",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216619,
},
[449767] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[104318] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wild Imp",
["npcID"] = 143622,
},
[390918] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Vile Lasher",
["npcID"] = 197219,
},
[449770] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[457447] = {
["isChanneled"] = false,
["source"] = "Ixlorb the Spinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218426,
},
[431349] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[431350] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[460520] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Bytta",
["npcID"] = 222653,
},
[440562] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Maintenance Machine",
["npcID"] = 219587,
},
[451309] = {
["isChanneled"] = false,
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219983,
},
[455915] = {
["source"] = "Oozemodius",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220410,
},
[442611] = {
["encounterName"] = "Brewmaster Aldryr",
["type"] = "BUFF",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210271,
},
[118905] = {
["isChanneled"] = false,
["source"] = "Capacitor Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61245,
},
[427260] = {
["isChanneled"] = false,
["source"] = "Cursed Rooktender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207199,
},
[390926] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Candlelit Big-Boomer",
["npcID"] = 211546,
},
[234676] = {
["isChanneled"] = false,
["source"] = "Highlord Kruul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 117198,
},
[167381] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Boulderfist",
["npcID"] = 189617,
},
[60876] = {
["isChanneled"] = false,
["source"] = "Recalled Ghoul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221434,
},
[433403] = {
["isChanneled"] = false,
["source"] = "Skittering Swarmer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208245,
},
[415492] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2831,
},
[424704] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[443640] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[423682] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[377113] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Fire Goal Throw",
["npcID"] = 199496,
},
[457458] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[415495] = {
["encounterName"] = "Spinshroom",
["type"] = "DEBUFF",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2831,
},
[442618] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siege Dominator",
["npcID"] = 215601,
},
[448248] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodstained Webmage",
["npcID"] = 223253,
},
[457460] = {
["source"] = "Ixlorb the Spinner",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218426,
},
[421638] = {
["encounterName"] = "Blazikon",
["type"] = "DEBUFF",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208743,
},
[434432] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Stormrook Feather",
["npcID"] = 217339,
},
[456438] = {
["isChanneled"] = false,
["source"] = "Cursed Miner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213565,
},
[442621] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Kaheti Ambusher",
["npcID"] = 217448,
},
[167385] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Boulderfist",
["npcID"] = 189617,
},
[433410] = {
["isChanneled"] = false,
["source"] = "Chittering Fearmonger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216583,
},
[415499] = {
["encounterName"] = "Spinshroom",
["type"] = "BUFF",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2831,
},
[433411] = {
["isChanneled"] = false,
["source"] = "Nerubian Darkcaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208242,
},
[392983] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[377119] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wind Goal Throw",
["npcID"] = 199495,
},
[431365] = {
["source"] = "Nightfall Ritualist",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214761,
},
[456441] = {
["source"] = "Flickerflame Candlecrusher",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 219619,
},
[446718] = {
["source"] = "Elder Shadeweaver",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221102,
},
[459512] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Ruukk",
["npcID"] = 218214,
},
[390938] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aggravated Skitterfly",
["npcID"] = 197406,
},
[375587] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Master Tidesage",
["npcID"] = 216639,
},
[455932] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[282449] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Akaari's Soul",
["npcID"] = 144961,
},
[442627] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Slam Scavenger",
["npcID"] = 217997,
},
[423693] = {
["encounterName"] = "Ol' Waxbeard",
["type"] = "DEBUFF",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210153,
},
[442628] = {
["isChanneled"] = false,
["source"] = "Skitterling Chemist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219648,
},
[199373] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Army of the Dead",
["npcID"] = 24207,
},
[390942] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aggravated Skitterfly",
["npcID"] = 197406,
},
[434441] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[435465] = {
["isChanneled"] = false,
["source"] = "Machinist Protector",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219361,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218002,
},
[451843] = {
["isChanneled"] = false,
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207205,
},
[196816] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Divine Image",
["npcID"] = 198236,
},
[424721] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Candlelight Sanctuary",
["npcID"] = 211750,
},
[458497] = {
["isChanneled"] = false,
["source"] = "Parasidious",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206977,
},
[445193] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[424212] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208743,
},
[426771] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Bound Despoiler",
["npcID"] = 212765,
},
[464641] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Umbral Citizen",
["npcID"] = 221255,
},
[444683] = {
["isChanneled"] = false,
["source"] = "Persistent Forager",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217404,
},
[428819] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[426261] = {
["isChanneled"] = true,
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212412,
},
[449290] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rockgore",
["npcID"] = 220241,
},
[388392] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unruly Textbook",
["npcID"] = 196044,
},
[42648] = {
["isChanneled"] = false,
["source"] = "Candlelit Boomer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213683,
},
[421146] = {
["encounterName"] = "The Candle King",
["type"] = "DEBUFF",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208745,
},
[465] = {
["source"] = "Captain Garrick",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209057,
},
[398631] = {
["isChanneled"] = false,
["source"] = "Waxtail Trapper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212987,
},
[420125] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Roth the Earthwound",
["npcID"] = 226300,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2878,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215819,
},
[432920] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skitterling",
["npcID"] = 217991,
},
[458508] = {
["isChanneled"] = false,
["source"] = "Mesmerized Flyer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224663,
},
[375605] = {
["isChanneled"] = false,
["source"] = "Charged Spirecrystal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217736,
},
[388911] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spellbound Battleaxe",
["npcID"] = 196577,
},
[444692] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wild Ramolith",
["npcID"] = 221023,
},
[453392] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sureki Eradicator",
["npcID"] = 225408,
},
[46551] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Workmaster Nast",
["npcID"] = 213200,
},
[388912] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Spellbound Battleaxe",
["npcID"] = 196577,
},
[448787] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[445205] = {
["source"] = "Cinderbee Worker",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 215023,
},
[423200] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[421665] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210149,
},
[439577] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[458512] = {
["isChanneled"] = false,
["source"] = "Parasidious",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206977,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2861,
},
[424738] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Fungal Rotcaster",
["npcID"] = 207459,
},
[458514] = {
["isChanneled"] = false,
["source"] = "Parasidious",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206977,
},
[448791] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[424739] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2861,
},
[453909] = {
["isChanneled"] = false,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[456468] = {
["isChanneled"] = false,
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213566,
},
[426275] = {
["isChanneled"] = false,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[426787] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[125056] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Baldr",
["npcID"] = 165189,
},
[449817] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vilewing",
["npcID"] = 216037,
},
[426277] = {
["isChanneled"] = false,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[283499] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Qyrix the Hatchet",
["npcID"] = 150743,
},
[398643] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Opalooze Mollusc",
["npcID"] = 222040,
},
[462612] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Ermie",
["npcID"] = 229589,
},
[441119] = {
["isChanneled"] = false,
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210264,
},
[457497] = {
["source"] = "Ixlorb the Spinner",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218426,
},
[439586] = {
["encounterName"] = "Benk Buzzbee",
["type"] = "DEBUFF",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218002,
},
[388923] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[460057] = {
["isChanneled"] = false,
["source"] = "Queensguard An'Jak Shabtir",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219665,
},
[264057] = {
["isChanneled"] = false,
["source"] = "Rinnshokin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[461081] = {
["isChanneled"] = false,
["source"] = "Stormrook Tunnel Stalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228803,
},
[445217] = {
["isChanneled"] = false,
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215023,
},
[426283] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedheart Invader",
["npcID"] = 212389,
},
[445218] = {
["source"] = "Cinderbee Worker",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 215023,
},
[449824] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Springbubble",
["npcID"] = 219262,
},
[383298] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enraged Magma Fury",
["npcID"] = 214924,
},
[424750] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Rotcaster",
["npcID"] = 207459,
},
[440615] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Evoker",
["npcID"] = 220990,
},
[457503] = {
["isChanneled"] = false,
["source"] = "Cogchewer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212617,
},
[440104] = {
["encounterName"] = "I'pa",
["type"] = "DEBUFF",
["source"] = "Brew Drop",
["encounterID"] = 2929,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 219301,
},
[425264] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[449318] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[440107] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216649,
},
[450854] = {
["isChanneled"] = false,
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211263,
},
[447272] = {
["encounterName"] = "Captain Dailcry",
["type"] = "DEBUFF",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2847,
},
[431920] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Ascended Overseer",
["npcID"] = 215755,
},
[387910] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Algeth'ar Echoknight",
["npcID"] = 196200,
},
[427315] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Rift",
["npcID"] = 213125,
},
[449321] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[440622] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Evoker",
["npcID"] = 220990,
},
[455975] = {
["isChanneled"] = false,
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219245,
},
[235984] = {
["source"] = "Corrupted Risen Arbalest",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 118492,
},
[445741] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Clawsmasher",
["npcID"] = 220985,
},
[91797] = {
["source"] = "Unknown",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[388940] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[434998] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[423228] = {
["encounterName"] = "Skarmorak",
["type"] = "BUFF",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2880,
},
[368983] = {
["isChanneled"] = false,
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215077,
},
[445746] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Clawsmasher",
["npcID"] = 220985,
},
[388942] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[435000] = {
["source"] = "Chef Chewie",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214697,
},
[448818] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[445236] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sieve Spinedrifter",
["npcID"] = 229523,
},
[427325] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212786,
},
[455984] = {
["isChanneled"] = true,
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219245,
},
[446261] = {
["isChanneled"] = false,
["source"] = "Fog Wither",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213952,
},
[448820] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[435004] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[431934] = {
["isChanneled"] = false,
["source"] = "Royal Journalist Ist'iix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226234,
},
[444728] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[429376] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Remembered Hogger",
["npcID"] = 213570,
},
[431935] = {
["isChanneled"] = false,
["source"] = "Royal Journalist Ist'iix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226234,
},
[446776] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "War Lynx",
["npcID"] = 206699,
},
[432959] = {
["isChanneled"] = false,
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212793,
},
[91800] = {
["source"] = "Rootcatcher",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 26125,
},
[428866] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[460595] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Irritated Salvager",
["npcID"] = 220471,
},
[426308] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedheart Invader",
["npcID"] = 212389,
},
[424773] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[54680] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devilsaur",
["npcID"] = 165189,
},
[455480] = {
["isChanneled"] = false,
["source"] = "Take",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226272,
},
[259277] = {
["source"] = "N.U.T.Z.",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[399701] = {
["isChanneled"] = false,
["source"] = "Territorial Deepflayer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219902,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[451900] = {
["isChanneled"] = false,
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212876,
},
[399702] = {
["isChanneled"] = false,
["source"] = "Territorial Deepflayer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219902,
},
[387932] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Algeth'ar Echoknight",
["npcID"] = 196200,
},
[432967] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216648,
},
[388958] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[445251] = {
["isChanneled"] = false,
["source"] = "Brushmane Wolf",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217561,
},
[423246] = {
["encounterName"] = "Skarmorak",
["type"] = "BUFF",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2880,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218002,
},
[444740] = {
["isChanneled"] = false,
["source"] = "High Inquisitor Whitemane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221633,
},
[445252] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Heartfang",
["npcID"] = 216035,
},
[444741] = {
["source"] = "High Inquisitor Whitemane",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221633,
},
[427342] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[427854] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2883,
},
[461630] = {
["isChanneled"] = false,
["source"] = "Royal Venomshell",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220730,
},
[440137] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Feral Sharpclaw",
["npcID"] = 221470,
},
[444743] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Mage",
["npcID"] = 221760,
},
[428879] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rock Smasher",
["npcID"] = 213954,
},
[388963] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Leg Chewer",
["npcID"] = 217743,
},
[427346] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[191732] = {
["isChanneled"] = false,
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97022,
},
[440141] = {
["encounterName"] = "Benk Buzzbee",
["type"] = "DEBUFF",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218002,
},
[440653] = {
["source"] = "Wandering Candle",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208450,
},
[423766] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aspiring Forgehand",
["npcID"] = 212405,
},
[440143] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Arathi Warlynx",
["npcID"] = 217634,
},
[448843] = {
["isChanneled"] = false,
["source"] = "Candleclaw Underboss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213831,
},
[457543] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[445262] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[428887] = {
["encounterName"] = "Void Speaker Eirich",
["type"] = "DEBUFF",
["source"] = "Rock Smasher",
["npcID"] = 213954,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2883,
},
[384366] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Limestone Falcon",
["npcID"] = 214772,
},
[456523] = {
["isChanneled"] = false,
["source"] = "Clump O' Wax",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226809,
},
[160007] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kal'draxa",
["npcID"] = 165189,
},
[424795] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2854,
},
[460618] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overworked Cook",
["npcID"] = 220744,
},
[387950] = {
["isChanneled"] = false,
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219619,
},
[439637] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Echoing Shade",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219675,
},
[427356] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[442709] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Mechanized Enforcer",
["npcID"] = 220457,
},
[427357] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[388976] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[370042] = {
["isChanneled"] = false,
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214722,
},
[428894] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[427359] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[448341] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Thwacker",
["npcID"] = 203877,
},
[438618] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[387955] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ethereal Restorer",
["npcID"] = 196203,
},
[427360] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[446807] = {
["isChanneled"] = false,
["source"] = "Bomb",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222787,
},
[427361] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Aspiring Forgehand",
["npcID"] = 212405,
},
[438620] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216320,
},
[453461] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[425315] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2831,
},
[16827] = {
["isChanneled"] = false,
["source"] = "Sul'raka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[388982] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[438622] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[453463] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Suppressed Worker",
["npcID"] = 225436,
},
[450393] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Obstorn",
["npcID"] = 217082,
},
[387960] = {
["isChanneled"] = false,
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219619,
},
[370049] = {
["isChanneled"] = false,
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214722,
},
[388984] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Ravager",
["npcID"] = 196671,
},
[452442] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[418155] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[440162] = {
["isChanneled"] = false,
["source"] = "Scarlet Stinkcap",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212579,
},
[426345] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Touched Elemental",
["npcID"] = 212400,
},
[23768] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Sayge",
["npcID"] = 14822,
},
[446304] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Jellyfish",
["npcID"] = 227827,
},
[451423] = {
["isChanneled"] = false,
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219984,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[435560] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[436072] = {
["isChanneled"] = false,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212717,
},
[433002] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodstained Assistant",
["npcID"] = 216333,
},
[451426] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Xeph'itik",
["npcID"] = 219984,
},
[387970] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Algeth'ar Echoknight",
["npcID"] = 196200,
},
[429422] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[436075] = {
["isChanneled"] = false,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212717,
},
[451428] = {
["isChanneled"] = true,
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219984,
},
[3110] = {
["isChanneled"] = false,
["source"] = "Abajub",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 416,
},
[453989] = {
["isChanneled"] = false,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[449896] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Boroughbreaker Stik'kar",
["npcID"] = 226294,
},
[431985] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["npcID"] = 215826,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[429427] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[428916] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[429428] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Earth Burst Totem",
["npcID"] = 214287,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2883,
},
[440687] = {
["isChanneled"] = false,
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220141,
},
[427382] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engine Speaker",
["npcID"] = 212764,
},
[427894] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[89766] = {
["isChanneled"] = false,
["source"] = "Arix-garath",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[451435] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Voidwraith",
["npcID"] = 224466,
},
[445806] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Sunless Slurkdripper",
["npcID"] = 219627,
},
[442224] = {
["isChanneled"] = false,
["source"] = "Corridor Sleeper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220616,
},
[463206] = {
["isChanneled"] = false,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[115098] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[445808] = {
["isChanneled"] = false,
["source"] = "Heelripper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216555,
},
[427897] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[118297] = {
["isChanneled"] = false,
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61029,
},
[108446] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unknown",
["npcID"] = 17252,
},
[440181] = {
["isChanneled"] = false,
["source"] = "Agaric Spreader",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212578,
},
[445811] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Sunless Slurkdripper",
["npcID"] = 219627,
},
[427900] = {
["isChanneled"] = false,
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212831,
},
[445812] = {
["source"] = "Unstable Test Subject",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216328,
},
[445813] = {
["isChanneled"] = false,
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216328,
},
[440185] = {
["isChanneled"] = false,
["source"] = "Rustul Titancap",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213115,
},
[419204] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Crenna Earth-Daughter",
["npcID"] = 209072,
},
[424322] = {
["isChanneled"] = true,
["source"] = "Blazing Fiend",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220815,
},
[440187] = {
["source"] = "Rustul Titancap",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 213115,
},
[464240] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[448888] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2839,
},
[426883] = {
["isChanneled"] = false,
["source"] = "Kobold Taskworker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212383,
},
[450424] = {
["isChanneled"] = false,
["source"] = "Congealed Wax-hulk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223206,
},
[463218] = {
["isChanneled"] = false,
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210269,
},
[445819] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Waste Flayer",
["npcID"] = 221017,
},
[441214] = {
["isChanneled"] = false,
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220060,
},
[431491] = {
["isChanneled"] = false,
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214762,
},
[463220] = {
["source"] = "Hired Muscle",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210269,
},
[424328] = {
["isChanneled"] = false,
["source"] = "Waxtail Browbeater",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213000,
},
[431493] = {
["isChanneled"] = false,
["source"] = "Nightfall Curseblade",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213894,
},
[438658] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216320,
},
[431494] = {
["isChanneled"] = false,
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213934,
},
[236537] = {
["isChanneled"] = false,
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118065,
},
[362920] = {
["isChanneled"] = false,
["source"] = "Zealous Ironguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223904,
},
[440195] = {
["isChanneled"] = false,
["source"] = "Wanton Shadow",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225338,
},
[427402] = {
["isChanneled"] = false,
["source"] = "Cursed Rookguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207197,
},
[54049] = {
["isChanneled"] = false,
["source"] = "Gzaathun",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 417,
},
[432520] = {
["isChanneled"] = false,
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213893,
},
[397210] = {
["encounterName"] = "Crawth",
["type"] = "DEBUFF",
["source"] = "Crawth",
["npcID"] = 191736,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2564,
},
[264667] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 165189,
},
[426892] = {
["encounterName"] = "The Darkness",
["source"] = "Fleeing Candlebearer",
["encounterID"] = 2788,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212821,
},
[427404] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212786,
},
[463227] = {
["source"] = "Hired Muscle",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210269,
},
[426893] = {
["isChanneled"] = false,
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209801,
},
[450435] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[261616] = {
["isChanneled"] = false,
["source"] = "Katy Stampwhistle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 132969,
},
[426896] = {
["encounterName"] = "The Darkness",
["source"] = "Fleeing Candlebearer",
["encounterID"] = 2788,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212821,
},
[444296] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[107428] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[315336] = {
["isChanneled"] = false,
["source"] = "Tent",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 161974,
},
[51875] = {
["isChanneled"] = false,
["source"] = "Tundra Scavenger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 27294,
},
[439692] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216648,
},
[450439] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Congealed Wax-hulk",
["npcID"] = 223206,
},
[389541] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "White Tiger Statue",
["npcID"] = 196581,
},
[440205] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[434576] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[446859] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[450442] = {
["source"] = "Skittering Swarmer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208245,
},
[389033] = {
["encounterName"] = "Overgrown Ancient",
["type"] = "DEBUFF",
["source"] = "Hungry Lasher",
["npcID"] = 196642,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2563,
},
[434579] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[453514] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Decaying Shroom",
["npcID"] = 210729,
},
[185114] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Frozen Eye",
["npcID"] = 93564,
},
[438675] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[462216] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[448399] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[455052] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Supervisor Radlock",
["npcID"] = 220897,
},
[455564] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Roth the Earthwound",
["npcID"] = 226300,
},
[423324] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[185116] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Frozen Imp",
["npcID"] = 93565,
},
[423327] = {
["encounterName"] = "Skarmorak",
["type"] = "BUFF",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2880,
},
[423839] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[101546] = {
["isChanneled"] = false,
["source"] = "Fire Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69791,
},
[159786] = {
["source"] = "YourFace",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[433053] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[456594] = {
["source"] = "Lava Laden Crystal Construct",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226968,
},
[434589] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[441242] = {
["isChanneled"] = false,
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220060,
},
[442266] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[436637] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[452502] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[444826] = {
["isChanneled"] = false,
["source"] = "King Thoras Trollbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221635,
},
[438174] = {
["isChanneled"] = false,
["source"] = "Waterworks Dynamo",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223918,
},
[100780] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[440222] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[436640] = {
["encounterName"] = "Goldie Baronbottom",
["type"] = "DEBUFF",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214661,
},
[432035] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[428453] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Charhound",
["npcID"] = 226269,
},
[439200] = {
["encounterName"] = "Avanoxx",
["type"] = "DEBUFF",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2926,
},
[388537] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[434083] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ravenous Crawler",
["npcID"] = 216336,
},
[200218] = {
["isChanneled"] = false,
["source"] = "Reaves",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 101462,
},
[432037] = {
["isChanneled"] = false,
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212596,
},
[439202] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210267,
},
[201754] = {
["isChanneled"] = false,
["source"] = "Kisa",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[436644] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[389564] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dominant Salamanther",
["npcID"] = 225921,
},
[435622] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[440228] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Orweyna",
["npcID"] = 215944,
},
[441252] = {
["isChanneled"] = false,
["source"] = "Tentacular Slime",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220364,
},
[445858] = {
["isChanneled"] = false,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[48168] = {
["isChanneled"] = false,
["source"] = "Matron Ossela",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96955,
},
[389055] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Forager",
["npcID"] = 196694,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1050,
},
[388544] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[440231] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[452514] = {
["source"] = "Boulderbane",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 224756,
},
[441256] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Horrid Effusia",
["npcID"] = 211866,
},
[447909] = {
["isChanneled"] = false,
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217353,
},
[387523] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unruly Textbook",
["npcID"] = 196044,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[429999] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[425394] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208743,
},
[448935] = {
["isChanneled"] = false,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[447400] = {
["isChanneled"] = false,
["source"] = "Queen Rickiticka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215772,
},
[112042] = {
["isChanneled"] = false,
["source"] = "Jhazdok",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 1860,
},
[445866] = {
["isChanneled"] = true,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[427955] = {
["isChanneled"] = false,
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211121,
},
[183081] = {
["source"] = "Kirin Tor Guardian",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222476,
},
[440238] = {
["encounterName"] = "Fangs of the Queen",
["type"] = "DEBUFF",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216649,
},
[189990] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Forsaken Warlock",
["npcID"] = 217236,
},
[452009] = {
["isChanneled"] = false,
["source"] = "Hijacked Ironstrider",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219287,
},
[449451] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[429493] = {
["encounterName"] = "Skardyn Monstrosity",
["type"] = "DEBUFF",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207207,
},
[55078] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2854,
},
[447917] = {
["isChanneled"] = false,
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217353,
},
[448429] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Mystic",
["npcID"] = 203878,
},
[432565] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Manifested Shadow",
["npcID"] = 211341,
},
[424889] = {
["encounterName"] = "E.D.N.A.",
["type"] = "DEBUFF",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2854,
},
[449965] = {
["isChanneled"] = false,
["source"] = "Witherthorn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214790,
},
[19647] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wraanhym",
["npcID"] = 417,
},
[436661] = {
["isChanneled"] = false,
["source"] = "Armored Scuttler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216194,
},
[449455] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ghastly Voidsoul",
["npcID"] = 212453,
},
[431544] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stalwart Hauler",
["npcID"] = 214935,
},
[448432] = {
["isChanneled"] = false,
["source"] = "Generic - Empty Bunny",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223358,
},
[447921] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siltsliver",
["npcID"] = 220236,
},
[1126] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[441269] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Sparking Haulbot",
["npcID"] = 219497,
},
[432059] = {
["isChanneled"] = false,
["source"] = "Flickerflame Geomancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212528,
},
[447412] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Bloodmaw",
["npcID"] = 219264,
},
[430013] = {
["isChanneled"] = false,
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207186,
},
[426943] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[445878] = {
["source"] = "Swarm-Maven Donmiss",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216578,
},
[456626] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Awakened Flamecoil Serpent",
["npcID"] = 225895,
},
[397264] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Teleporter Stalker",
["npcID"] = 199677,
},
[431552] = {
["isChanneled"] = false,
["source"] = "Direweb Lasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221303,
},
[288774] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[452023] = {
["source"] = "Earthen-Ward Sentinel",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216221,
},
[452024] = {
["isChanneled"] = true,
["source"] = "Earthenwork Ironstrider",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213951,
},
[434113] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Spinnerette's Strands",
["npcID"] = 217188,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[279565] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lady Jaina Proudmoore",
["npcID"] = 214276,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221896,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2854,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221896,
},
[452539] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[437700] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216658,
},
[378850] = {
["isChanneled"] = false,
["source"] = "Babbling Book",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223852,
},
[54185] = {
["isChanneled"] = false,
["source"] = "Recalled Ghoul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221434,
},
[456125] = {
["isChanneled"] = false,
["source"] = "Shadowsting Scavenger",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222872,
},
[458685] = {
["isChanneled"] = false,
["source"] = "Moth'ethk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206203,
},
[134477] = {
["isChanneled"] = false,
["source"] = "Rinnshokin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[431563] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakener Kobyss",
["npcID"] = 215683,
},
[434122] = {
["isChanneled"] = false,
["source"] = "Ascended Neophyte",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216326,
},
[321538] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "DoubleDouble",
["npcID"] = 165189,
},
[161601] = {
["isChanneled"] = false,
["source"] = "Feral Skardyn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212591,
},
[435148] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Footman",
["npcID"] = 212835,
},
[440266] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[427473] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[160067] = {
["isChanneled"] = false,
["source"] = "Xishorr",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[446409] = {
["isChanneled"] = false,
["source"] = "Briney Kelpcore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220547,
},
[426964] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[456136] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Murkshades",
["npcID"] = 226682,
},
[31707] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[435156] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Risen Mage",
["npcID"] = 221760,
},
[450509] = {
["isChanneled"] = false,
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216584,
},
[228645] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[433622] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Brann Bronzebeard",
["npcID"] = 210759,
},
[446416] = {
["isChanneled"] = false,
["source"] = "Honey-fused Droplet",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213697,
},
[448975] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[386542] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Skurikzugul",
["npcID"] = 17252,
},
[448977] = {
["source"] = "Careless Hopgoblin",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223423,
},
[453583] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodworker",
["npcID"] = 216337,
},
[427484] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[434137] = {
["isChanneled"] = true,
["source"] = "Royal Venomshell",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220730,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[447443] = {
["encounterName"] = "Captain Dailcry",
["type"] = "DEBUFF",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2847,
},
[451026] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[437721] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[448468] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cavernous Shrieker",
["npcID"] = 204109,
},
[132951] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Cat",
["npcID"] = 165189,
},
[381430] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[228649] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[435165] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[444377] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enraged Kodiak",
["npcID"] = 229060,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[49966] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grong",
["npcID"] = 165189,
},
[424420] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[451543] = {
["isChanneled"] = false,
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219983,
},
[462802] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Machinist",
["npcID"] = 229695,
},
[424421] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[142421] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[36213] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Greater Earth Elemental",
["npcID"] = 95072,
},
[429028] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Awakened",
["npcID"] = 213741,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2836,
},
[424423] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
},
[429029] = {
["encounterName"] = "Skardyn Monstrosity",
["type"] = "BUFF",
["source"] = "Voidstone Awakened",
["npcID"] = 213741,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2836,
},
[440288] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[61353] = {
["isChanneled"] = false,
["source"] = "Dagna Flintlock",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96779,
},
[446430] = {
["isChanneled"] = false,
["source"] = "Briney Kelpcore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220547,
},
[377344] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Territorial Eagle",
["npcID"] = 192329,
},
[424426] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
},
[445409] = {
["encounterName"] = "Skarmorak",
["type"] = "BUFF",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2880,
},
[429545] = {
["isChanneled"] = false,
["source"] = "Voidtouched Speaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223469,
},
[385023] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Thieving Salamanther",
["npcID"] = 225919,
},
[443363] = {
["isChanneled"] = false,
["source"] = "Raging Dunecore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220544,
},
[385024] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thieving Salamanther",
["npcID"] = 225919,
},
[422382] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[447458] = {
["isChanneled"] = false,
["source"] = "Queen Rickiticka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215772,
},
[424430] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[461789] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[448485] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guard Captain Suleyman",
["npcID"] = 212826,
},
[176458] = {
["source"] = "Blacksmithing Follower - Alliance",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 88403,
},
[436205] = {
["isChanneled"] = true,
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216328,
},
[428019] = {
["isChanneled"] = false,
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210812,
},
[449001] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 103822,
},
[432114] = {
["isChanneled"] = false,
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212884,
},
[428532] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
},
[425974] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Infused Golem",
["npcID"] = 210109,
},
[444909] = {
["source"] = "Spreading Sporbit",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220304,
},
[448492] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guard Captain Suleyman",
["npcID"] = 212826,
},
[422393] = {
["isChanneled"] = false,
["source"] = "Skittering Darkness",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208457,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[428535] = {
["encounterName"] = "Master Machinists",
["source"] = "Scrap Block",
["npcID"] = 213694,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[445935] = {
["isChanneled"] = false,
["source"] = "Bomb",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222265,
},
[427001] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[432119] = {
["encounterName"] = "Ki'katal the Harvester",
["type"] = "DEBUFF",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2901,
},
[459242] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[432120] = {
["isChanneled"] = false,
["source"] = "Overlord",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228575,
},
[433656] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Reinforced Drone",
["npcID"] = 216363,
},
[462826] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Explosive Bomberbot",
["npcID"] = 229706,
},
[388623] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[440310] = {
["encounterName"] = "Orator Krix'vizk",
["type"] = "DEBUFF",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216619,
},
[444916] = {
["source"] = "Spreading Sporbit",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220304,
},
[449522] = {
["isChanneled"] = false,
["source"] = "Drone Abductor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219655,
},
[447987] = {
["source"] = "Waste Flayer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221017,
},
[450546] = {
["isChanneled"] = false,
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216584,
},
[459246] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "The Broken Queen",
["npcID"] = 214368,
},
[431612] = {
["isChanneled"] = true,
["source"] = "Nerubian Venomspitter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219661,
},
[432124] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Kaheti Ambusher",
["npcID"] = 217448,
},
[427007] = {
["encounterName"] = "Anub'ikkaj",
["type"] = "DEBUFF",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2838,
},
[432125] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittershaw Beetle",
["npcID"] = 225136,
},
[459248] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "The Broken Queen",
["npcID"] = 214368,
},
[450037] = {
["isChanneled"] = false,
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220068,
},
[432638] = {
["isChanneled"] = false,
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212793,
},
[293954] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Eclipsing Grasp",
["npcID"] = 218693,
},
[433662] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Black Blood",
["npcID"] = 216856,
},
[432127] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Boroughbreaker Stik'kar",
["npcID"] = 226294,
},
[428545] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[427011] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[458228] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anub'ata",
["npcID"] = 219855,
},
[428547] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Scrap Block",
["npcID"] = 213694,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[450041] = {
["source"] = "Malfunctioning Spire",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220068,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[373279] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thing From Beyond",
["npcID"] = 189988,
},
[424966] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207205,
},
[450042] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Ravenous Scarab",
["encounterID"] = 2909,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219198,
},
[241717] = {
["isChanneled"] = false,
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118065,
},
[444925] = {
["isChanneled"] = false,
["source"] = "Underground Spore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215235,
},
[17253] = {
["isChanneled"] = false,
["source"] = "Xylophone",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[450043] = {
["isChanneled"] = true,
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220068,
},
[432132] = {
["encounterName"] = "Ki'katal the Harvester",
["type"] = "DEBUFF",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2901,
},
[434691] = {
["isChanneled"] = false,
["source"] = "Orator Krix'vizk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216619,
},
[427015] = {
["encounterName"] = "The Darkness",
["type"] = "DEBUFF",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208747,
},
[432135] = {
["isChanneled"] = false,
["source"] = "Flickerflame Kobold",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212536,
},
[464888] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "E.D.N.A",
["npcID"] = 210108,
},
[422414] = {
["isChanneled"] = false,
["source"] = "Shuffling Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208456,
},
[415250] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[424462] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[127801] = {
["isChanneled"] = false,
["source"] = "Turnip Punching Bag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 65310,
},
[415251] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[462844] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Stone Bulwark Totem",
["npcID"] = 59712,
},
[441351] = {
["isChanneled"] = false,
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210264,
},
[24450] = {
["isChanneled"] = false,
["source"] = "fckuham",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[377383] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Alpha Eagle",
["npcID"] = 192333,
},
[192082] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Wind Rush Totem",
["npcID"] = 97285,
},
[415253] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[441353] = {
["source"] = "Bee Wrangler",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210264,
},
[205644] = {
["source"] = "Treant",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 103822,
},
[432142] = {
["isChanneled"] = false,
["source"] = "Nerubian War-Weaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222731,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[443914] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Murkfin Sciomancer",
["npcID"] = 213619,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[446474] = {
["isChanneled"] = false,
["source"] = "Congealed Wax-hulk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223206,
},
[428563] = {
["isChanneled"] = false,
["source"] = "Kobold Flametender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213913,
},
[456198] = {
["isChanneled"] = false,
["source"] = "Smaragthr",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220362,
},
[446475] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[377389] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Alpha Eagle",
["npcID"] = 192333,
},
[378413] = {
["isChanneled"] = false,
["source"] = "Frenzied Tidecore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213699,
},
[40505] = {
["isChanneled"] = false,
["source"] = "Recalled Forgotten Depths Ambusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224932,
},
[434706] = {
["isChanneled"] = false,
["source"] = "Tasting Room Attendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214920,
},
[446477] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[434707] = {
["source"] = "Tasting Room Attendant",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214920,
},
[431637] = {
["isChanneled"] = false,
["source"] = "Nightfall Shadowalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213895,
},
[444431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[388651] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[438803] = {
["isChanneled"] = false,
["source"] = "Skardyn Metamorphosis",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219148,
},
[431639] = {
["isChanneled"] = false,
["source"] = "Nerubian Saboteur",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212715,
},
[462856] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nullbot",
["npcID"] = 229729,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[464392] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Scrap Block",
["npcID"] = 213694,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[448528] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[444946] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stormtop Terralisk",
["npcID"] = 214581,
},
[452111] = {
["source"] = "Threadmaestro Fothis",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216541,
},
[419871] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[378420] = {
["isChanneled"] = false,
["source"] = "Urthgrafr Riftcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215233,
},
[446483] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[461836] = {
["isChanneled"] = false,
["source"] = "Flickerflame Candleflyer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219341,
},
[135029] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[443926] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[430109] = {
["isChanneled"] = false,
["source"] = "Cursed Thunderer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207198,
},
[445974] = {
["isChanneled"] = false,
["source"] = "Bomb",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222281,
},
[377912] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guardian Sentry",
["npcID"] = 192680,
},
[428064] = {
["source"] = "Rank Overseer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211121,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[456211] = {
["isChanneled"] = false,
["source"] = "Smaragthr",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220362,
},
[451606] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2848,
},
[456212] = {
["source"] = "Webbed Ore Deposit",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226716,
},
[428066] = {
["isChanneled"] = false,
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211121,
},
[439325] = {
["encounterName"] = "I'pa",
["type"] = "DEBUFF",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210267,
},
[429091] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[54644] = {
["isChanneled"] = false,
["source"] = "Enigma",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[451098] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Sureki Militant",
["npcID"] = 213932,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[451099] = {
["isChanneled"] = false,
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213932,
},
[449564] = {
["source"] = "Varric's Damaged Ironstrider",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223328,
},
[456729] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[448030] = {
["isChanneled"] = false,
["source"] = "Agile Pursuer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223181,
},
[456730] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[234826] = {
["source"] = "Burning Felcinder",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 118281,
},
[427049] = {
["isChanneled"] = false,
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212876,
},
[445984] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hilltop Jawcrawler",
["npcID"] = 227980,
},
[444449] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[17735] = {
["isChanneled"] = false,
["source"] = "Jhazdok",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 1860,
},
[449567] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dreadfang the Merciless",
["npcID"] = 220302,
},
[455197] = {
["source"] = "Mind Slurp",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226125,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221896,
},
[398394] = {
["isChanneled"] = false,
["source"] = "Shaleshell Clicker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220155,
},
[374343] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2565,
},
[443430] = {
["isChanneled"] = true,
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220195,
},
[458271] = {
["isChanneled"] = false,
["source"] = "Moth'ethk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206203,
},
[430125] = {
["source"] = "Quartermaster Koratite",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209801,
},
[451107] = {
["isChanneled"] = false,
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210966,
},
[441384] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216649,
},
[438826] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Atik",
["npcID"] = 217533,
},
[443432] = {
["source"] = "Sureki Silkbinder",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220195,
},
[207707] = {
["source"] = "Skulking Mongrel",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 225612,
},
[438827] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Atik",
["npcID"] = 217533,
},
[433198] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[452133] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[425011] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Eternal Flame",
["npcID"] = 210851,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[452134] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vitner Monk",
["npcID"] = 217452,
},
[440876] = {
["isChanneled"] = false,
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220141,
},
[443435] = {
["source"] = "Herald of Ansurek",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220196,
},
[12550] = {
["isChanneled"] = false,
["source"] = "Rampant Air Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215048,
},
[79962] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nelur Lightsown",
["npcID"] = 96954,
},
[451112] = {
["isChanneled"] = false,
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213934,
},
[443436] = {
["isChanneled"] = false,
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220196,
},
[445995] = {
["isChanneled"] = false,
["source"] = "Deeps Larva",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215733,
},
[436272] = {
["source"] = "Xesh Cavewalker",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218014,
},
[451113] = {
["isChanneled"] = false,
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210966,
},
[443437] = {
["source"] = "Herald of Ansurek",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220196,
},
[423479] = {
["isChanneled"] = false,
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210812,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210271,
},
[453161] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hulking Bloodguard",
["npcID"] = 228015,
},
[429109] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forgebound Mender",
["npcID"] = 213338,
},
[462373] = {
["encounterName"] = "Master Machinists",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[428086] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[451115] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Ixkreten the Unbreakable",
["npcID"] = 211262,
},
[429110] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forgebound Mender",
["npcID"] = 213338,
},
[456745] = {
["isChanneled"] = false,
["source"] = "Dark Proselityzer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224898,
},
[432182] = {
["encounterName"] = "Brewmaster Aldryr",
["type"] = "DEBUFF",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210271,
},
[451117] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ixkreten the Unbreakable",
["npcID"] = 211262,
},
[446000] = {
["isChanneled"] = false,
["source"] = "Deeps Larva",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215733,
},
[428089] = {
["isChanneled"] = false,
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210818,
},
[449071] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[443954] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[440372] = {
["isChanneled"] = false,
["source"] = "Scary Skitterer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216944,
},
[451119] = {
["isChanneled"] = false,
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211263,
},
[449584] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dreadfang the Merciless",
["npcID"] = 220302,
},
[449585] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Dreadfang the Merciless",
["npcID"] = 220302,
},
[431674] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittershaw Beetle",
["npcID"] = 225136,
},
[434745] = {
["source"] = "Chef Chewie",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214697,
},
[462892] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[378454] = {
["isChanneled"] = false,
["source"] = "Urthgrafr Riftcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215233,
},
[440376] = {
["isChanneled"] = false,
["source"] = "Scary Skitterer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216944,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2565,
},
[383061] = {
["isChanneled"] = false,
["source"] = "Liquid Magma Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97369,
},
[90328] = {
["isChanneled"] = false,
["source"] = "Sul'raka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[61684] = {
["isChanneled"] = false,
["source"] = "Meowy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[450613] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flamekeeper Graz",
["npcID"] = 219279,
},
[455219] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[403021] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Witherthorn",
["npcID"] = 214790,
},
[444985] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shacklefang Hornet",
["npcID"] = 223178,
},
[425027] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Infused Golem",
["npcID"] = 210109,
},
[444474] = {
["isChanneled"] = false,
["source"] = "Highlord Darion Mograine",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221632,
},
[452151] = {
["isChanneled"] = false,
["source"] = "Web Marauder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223182,
},
[462898] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[114893] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Stone Bulwark Totem",
["npcID"] = 59712,
},
[454199] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Mycotic Jawcrawler",
["npcID"] = 225488,
},
[444476] = {
["source"] = "Tij'allet",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 215600,
},
[452153] = {
["isChanneled"] = false,
["source"] = "Candlelit Ouchpatcher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214252,
},
[433731] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[432196] = {
["encounterName"] = "Brewmaster Aldryr",
["type"] = "DEBUFF",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210271,
},
[441408] = {
["source"] = "Venture Co. Pyromaniac",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218671,
},
[434756] = {
["isChanneled"] = false,
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210269,
},
[424223] = {
["encounterName"] = "Blazikon",
["type"] = "DEBUFF",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208743,
},
[59638] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mirror Image",
["npcID"] = 31216,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210271,
},
[381535] = {
["isChanneled"] = false,
["source"] = "Scornful Sandshoal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214662,
},
[445504] = {
["isChanneled"] = false,
["source"] = "Highlord Darion Mograine",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221632,
},
[451097] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Sureki Militant",
["encounterID"] = 2838,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213932,
},
[453345] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Manifested Shadow",
["npcID"] = 211341,
},
[440551] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[457787] = {
["isChanneled"] = false,
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215077,
},
[453072] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[426260] = {
["isChanneled"] = true,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212411,
},
[236572] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Highlord Kruul",
["npcID"] = 117198,
},
[457788] = {
["source"] = "Wickbreaker",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 215077,
},
[423501] = {
["isChanneled"] = false,
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211121,
},
[275563] = {
["isChanneled"] = false,
["source"] = "Shadowstarved Bullfrog",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214406,
},
[452320] = {
["source"] = "Kol Bruncrag",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 213658,
},
[445507] = {
["isChanneled"] = false,
["source"] = "King Thoras Trollbane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221635,
},
[427596] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[427329] = {
["encounterName"] = "Void Speaker Eirich",
["type"] = "DEBUFF",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2883,
},
[449090] = {
["isChanneled"] = false,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[445508] = {
["isChanneled"] = false,
["source"] = "Nazgrim",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221634,
},
[459229] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[450784] = {
["isChanneled"] = false,
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219984,
},
[185115] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Frozen Imp",
["npcID"] = 93565,
},
[234425] = {
["isChanneled"] = false,
["source"] = "Tormenting Eye",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118032,
},
[452162] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Covert Webmancer",
["npcID"] = 224732,
},
[446533] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enraged Shalehorn",
["npcID"] = 221024,
},
[371584] = {
["isChanneled"] = false,
["source"] = "Escaped Steam",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 227383,
},
[426295] = {
["encounterName"] = "The Candle King",
["source"] = "Sootsnout",
["encounterID"] = 2787,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212412,
},
[433740] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[434252] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Hauler",
["npcID"] = 217039,
},
[447046] = {
["source"] = "Flavor Scientist",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222964,
},
[234422] = {
["source"] = "Inquisitor Variss",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 117933,
},
[263840] = {
["isChanneled"] = false,
["source"] = "Xylophone",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[446535] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Enraged Shalehorn",
["npcID"] = 221024,
},
[388349] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[436180] = {
["isChanneled"] = false,
["source"] = "Rampant Air Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215048,
},
[376426] = {
["isChanneled"] = false,
["source"] = "Spring Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215811,
},
[434254] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nerubian Hauler",
["npcID"] = 217039,
},
[438860] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216658,
},
[445513] = {
["isChanneled"] = false,
["source"] = "High Inquisitor Whitemane",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221633,
},
[443978] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[456772] = {
["isChanneled"] = false,
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213200,
},
[419790] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Night Elf Starcaller",
["npcID"] = 219919,
},
[360969] = {
["isChanneled"] = false,
["source"] = "Ligrylak",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[431697] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sureki Eradicator",
["npcID"] = 225408,
},
[452679] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Possibility Projector",
["npcID"] = 224878,
},
[455447] = {
["isChanneled"] = false,
["source"] = "Wayne",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226271,
},
[457797] = {
["source"] = "Deployed Battle Supplies",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 227453,
},
[451812] = {
["isChanneled"] = false,
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212884,
},
[234423] = {
["isChanneled"] = true,
["source"] = "Inquisitor Variss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 117933,
},
[441770] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "ZZ-01-47",
["npcID"] = 220459,
},
[413488] = {
["isChanneled"] = false,
["source"] = "Invasive Lashroom",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206194,
},
[435793] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2839,
},
[113746] = {
["source"] = "Earth Spirit",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 69792,
},
[463428] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[455479] = {
["isChanneled"] = false,
["source"] = "Take",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226272,
},
[234461] = {
["isChanneled"] = false,
["source"] = "Nether Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118044,
},
[460135] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Deathscreamer Iken'tak",
["npcID"] = 211263,
},
[440912] = {
["isChanneled"] = false,
["source"] = "Vigorous Lashroom",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215793,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207205,
},
[452171] = {
["isChanneled"] = false,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[295034] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[387691] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[425561] = {
["isChanneled"] = false,
["source"] = "Pack Mole",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211977,
},
[431702] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rift Voidsinger",
["npcID"] = 216835,
},
[428120] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[434773] = {
["isChanneled"] = false,
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214668,
},
[463091] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[427609] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[440293] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Master Tidesage",
["npcID"] = 216639,
},
[423801] = {
["isChanneled"] = false,
["source"] = "Shadow-Blind Weaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206077,
},
[453709] = {
["isChanneled"] = false,
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220287,
},
[138130] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[458767] = {
["isChanneled"] = false,
["source"] = "Ravageant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207826,
},
[450330] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2894,
},
[423517] = {
["source"] = "Creaky Mine Cart",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212129,
},
[450128] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2894,
},
[449765] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[440917] = {
["isChanneled"] = false,
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214576,
},
[428519] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[453509] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Royal Quartermaster Ze'erik",
["npcID"] = 215988,
},
[456782] = {
["isChanneled"] = false,
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213200,
},
[449106] = {
["source"] = "Careless Hopgoblin",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223423,
},
[452985] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siege Marshal Tekhzok",
["npcID"] = 215987,
},
[452177] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Reserve",
["npcID"] = 214429,
},
[437842] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Maintenance Machine",
["npcID"] = 230643,
},
[447060] = {
["isChanneled"] = false,
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[24423] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "GloryRed",
["npcID"] = 165189,
},
[452178] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Reserve",
["npcID"] = 214429,
},
[446549] = {
["source"] = "Underlight Moth",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218331,
},
[445014] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tulumun",
["npcID"] = 217470,
},
[463093] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[153485] = {
["isChanneled"] = false,
["source"] = "Shadow-Chasm Worm",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217962,
},
[453507] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Royal Quartermaster Ze'erik",
["npcID"] = 215988,
},
[391793] = {
["isChanneled"] = false,
["source"] = "Frenzied Tidecore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213699,
},
[427616] = {
["isChanneled"] = false,
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207186,
},
[450133] = {
["encounterName"] = "Waxface",
["type"] = "DEBUFF",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2894,
},
[455207] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hunting Skyrazor",
["npcID"] = 226150,
},
[458771] = {
["source"] = "Ravageant",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207826,
},
[441434] = {
["isChanneled"] = false,
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214673,
},
[460587] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vindictive Technician",
["npcID"] = 220472,
},
[448599] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hevo'myk",
["npcID"] = 211591,
},
[463081] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[385958] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[455380] = {
["isChanneled"] = false,
["source"] = "Malfunctioning Railbot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218251,
},
[448600] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[438877] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nakt",
["npcID"] = 218324,
},
[388897] = {
["isChanneled"] = false,
["source"] = "Scavenging Sandsnapper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222156,
},
[445996] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[432030] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Patrolling Swarmite",
["npcID"] = 227143,
},
[443981] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[427865] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2883,
},
[431714] = {
["isChanneled"] = false,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212717,
},
[430179] = {
["isChanneled"] = false,
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214439,
},
[441381] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216648,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2835,
},
[427621] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[434786] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nakt",
["npcID"] = 218324,
},
[463956] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[270515] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Azerite-Infused Elemental",
["npcID"] = 137905,
},
[436322] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Atik",
["npcID"] = 217533,
},
[456748] = {
["isChanneled"] = false,
["source"] = "Dark Proselityzer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224898,
},
[443487] = {
["isChanneled"] = false,
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210265,
},
[263863] = {
["isChanneled"] = false,
["source"] = "Ligrylak",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210271,
},
[116947] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Earthgrab Totem",
["npcID"] = 60561,
},
[19483] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infernal",
["npcID"] = 89,
},
[439324] = {
["encounterName"] = "Izo, the Grand Splicer",
["type"] = "DEBUFF",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216658,
},
[433766] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[438883] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Nakt",
["npcID"] = 218324,
},
[386173] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[450142] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2894,
},
[462936] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Medbot",
["npcID"] = 229769,
},
[440931] = {
["isChanneled"] = false,
["source"] = "Festering Sporemass",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217963,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2883,
},
[463094] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[461842] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216320,
},
[422246] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[423979] = {
["isChanneled"] = false,
["source"] = "Void Cursed Crusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214419,
},
[263867] = {
["isChanneled"] = false,
["source"] = "YourFace",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[441289] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216320,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[386176] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 17252,
},
[430171] = {
["isChanneled"] = false,
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208450,
},
[434655] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[434793] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Trilling Attendant",
["npcID"] = 216293,
},
[446717] = {
["isChanneled"] = false,
["source"] = "Elder Shadeweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221102,
},
[427629] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[428508] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[267964] = {
["isChanneled"] = false,
["source"] = "Rinnshokin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[444428] = {
["source"] = "Elder Shadeweaver",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221102,
},
[434722] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216619,
},
[377991] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guardian Sentry",
["npcID"] = 192680,
},
[452195] = {
["source"] = "Cyclonecrier Alpha",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222959,
},
[447271] = {
["isChanneled"] = false,
["source"] = "Hulking Warshell",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221103,
},
[432994] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Brann Bronzebeard",
["npcID"] = 210759,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[35079] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Baldr",
["npcID"] = 165189,
},
[428520] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Scrap Block",
["npcID"] = 213694,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[386601] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Skurikzugul",
["npcID"] = 17252,
},
[386181] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["npcID"] = 194181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2562,
},
[442387] = {
["isChanneled"] = false,
["source"] = "Nerubian War-Weaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222731,
},
[452813] = {
["source"] = "Hunting Skyrazor",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226150,
},
[432448] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightfall Ritualist",
["npcID"] = 214761,
},
[390944] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aggravated Skitterfly",
["npcID"] = 197406,
},
[439341] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216658,
},
[443433] = {
["isChanneled"] = false,
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220196,
},
[439401] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216658,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[427635] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "War Lynx",
["npcID"] = 206699,
},
[157331] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[449129] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[443500] = {
["isChanneled"] = false,
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220197,
},
[450153] = {
["isChanneled"] = false,
["source"] = "Vileroot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214783,
},
[452811] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedheart Invader",
["npcID"] = 212403,
},
[449130] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[388231] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Tuskarr Training Dummy",
["npcID"] = 196394,
},
[456295] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[448619] = {
["isChanneled"] = false,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[434802] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ixin",
["npcID"] = 217531,
},
[6360] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Druswena",
["npcID"] = 1863,
},
[372369] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[428150] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[455273] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepsludger",
["npcID"] = 216536,
},
[443427] = {
["isChanneled"] = false,
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220195,
},
[445781] = {
["isChanneled"] = false,
["source"] = "Shadow-seized Loader",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223866,
},
[443401] = {
["source"] = "Sureki Venomblade",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220193,
},
[433781] = {
["encounterName"] = "Anub'zekt",
["type"] = "DEBUFF",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2906,
},
[443504] = {
["source"] = "[DNT] Beehive Trash Stalker",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221194,
},
[431734] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadesworn Crusher",
["npcID"] = 218527,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216649,
},
[441627] = {
["isChanneled"] = false,
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214673,
},
[369813] = {
["isChanneled"] = false,
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215077,
},
[448111] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[443494] = {
["encounterName"] = "Skarmorak",
["source"] = "Crystal Shard",
["npcID"] = 214443,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[449135] = {
["isChanneled"] = false,
["source"] = "Flickerflame Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212542,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[341118] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "MayorFieri",
["npcID"] = 165189,
},
[245102] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Devlynn Styx",
["npcID"] = 121527,
},
[449136] = {
["isChanneled"] = false,
["source"] = "Flickerflame Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212542,
},
[453742] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Colossal Titan Construct",
["npcID"] = 212213,
},
[443461] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Barrel of Fireworks",
["npcID"] = 221183,
},
[196742] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[435301] = {
["source"] = "Fungal Infestor",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216077,
},
[447994] = {
["source"] = "Waste Flayer",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221017,
},
[433785] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reinforced Drone",
["npcID"] = 216363,
},
[443507] = {
["isChanneled"] = false,
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220197,
},
[435797] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Cinderbrew Bomb",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217837,
},
[443509] = {
["source"] = "Royal Swarmguard",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220197,
},
[448047] = {
["isChanneled"] = true,
["source"] = "Pale Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223646,
},
[453458] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[428242] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Scrap Block",
["npcID"] = 213694,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[453745] = {
["source"] = "Kelp",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 225540,
},
[427378] = {
["encounterName"] = "Anub'ikkaj",
["type"] = "DEBUFF",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2838,
},
[426619] = {
["isChanneled"] = false,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[220540] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Umbral Citizen",
["npcID"] = 221255,
},
[386195] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Dreadstalker",
["npcID"] = 98035,
},
[317898] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Risen Footman",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212835,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2926,
},
[440921] = {
["isChanneled"] = false,
["source"] = "Festering Sporemass",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217963,
},
[445559] = {
["isChanneled"] = false,
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211858,
},
[167615] = {
["source"] = "Rukhmar",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 83746,
},
[441397] = {
["source"] = "Bee-let",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218865,
},
[443001] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Maddened Hierophant",
["npcID"] = 214398,
},
[438599] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Jabbing Flyer",
["npcID"] = 216341,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1048,
},
[115804] = {
["source"] = "Earth Spirit",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 69792,
},
[428161] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[377923] = {
["isChanneled"] = false,
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214722,
},
[431744] = {
["isChanneled"] = false,
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211858,
},
[450756] = {
["isChanneled"] = false,
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214762,
},
[392733] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sleepless Fickleshell",
["npcID"] = 191329,
},
[443977] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[456309] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[462372] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[392959] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[434668] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Arathi Bomb",
["npcID"] = 217124,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[224125] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 100820,
},
[438825] = {
["source"] = "Atik",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 217533,
},
[439403] = {
["isChanneled"] = false,
["source"] = "Yes Man",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219588,
},
[424008] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Podling",
["npcID"] = 211063,
},
[424801] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Infected Beast",
["npcID"] = 210478,
},
[448347] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[377502] = {
["isChanneled"] = false,
["source"] = "Shimmerfin Scrapper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220252,
},
[81262] = {
["isChanneled"] = false,
["source"] = "Efflorescence",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 47649,
},
[224126] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 100820,
},
[465012] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[456263] = {
["source"] = "Candleflyer Captain",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220276,
},
[390297] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[427929] = {
["source"] = "Pack Mole",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211977,
},
[89751] = {
["isChanneled"] = false,
["source"] = "Rinnshokin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[439426] = {
["isChanneled"] = false,
["source"] = "Underground Spore",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215235,
},
[224127] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 100820,
},
[424074] = {
["isChanneled"] = false,
["source"] = "The Darkness",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[435239] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[440147] = {
["encounterName"] = "I'pa",
["type"] = "BUFF",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210267,
},
[422245] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[456746] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[422541] = {
["isChanneled"] = true,
["source"] = "Shuffling Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208456,
},
[371877] = {
["source"] = "Dream Sprout",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 189161,
},
[444034] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[448640] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[30151] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shaaroon",
["npcID"] = 17252,
},
[30213] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kizlikad",
["npcID"] = 17252,
},
[450176] = {
["isChanneled"] = false,
["source"] = "Nerubian Slasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208243,
},
[454782] = {
["source"] = "Trilling Attendant",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216293,
},
[449153] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[423566] = {
["isChanneled"] = false,
["source"] = "The Darkness",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210797,
},
[436360] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Glooming Darkweaver",
["npcID"] = 216868,
},
[449154] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[192226] = {
["isChanneled"] = false,
["source"] = "Liquid Magma Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97369,
},
[456319] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[267997] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Charhound",
["npcID"] = 226269,
},
[24394] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "EatMy",
["npcID"] = 165189,
},
[439432] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Maintenance Machine",
["npcID"] = 219587,
},
[456891] = {
["isChanneled"] = false,
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210264,
},
[426127] = {
["encounterName"] = "The Candle King",
["type"] = "DEBUFF",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208745,
},
[450180] = {
["isChanneled"] = false,
["source"] = "Coal Rager",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219726,
},
[455809] = {
["isChanneled"] = false,
["source"] = "Urthgrafr Riftcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215233,
},
[441992] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Y'tekhi",
["npcID"] = 215659,
},
[8219] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 416,
},
[432781] = {
["isChanneled"] = false,
["source"] = "Radiating Voidstone",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212739,
},
[3600] = {
["isChanneled"] = false,
["source"] = "Earthbind Totem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 2630,
},
[446598] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[240763] = {
["isChanneled"] = true,
["source"] = "Nether Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118044,
},
[434829] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216619,
},
[157348] = {
["isChanneled"] = false,
["source"] = "Primal Storm Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 77942,
},
[450182] = {
["isChanneled"] = false,
["source"] = "Disturbed Mudspawn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219897,
},
[374350] = {
["encounterName"] = "Echo of Doragosa",
["type"] = "DEBUFF",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2565,
},
[57984] = {
["isChanneled"] = false,
["source"] = "Greater Fire Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95061,
},
[420501] = {
["isChanneled"] = false,
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213883,
},
[426734] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[428820] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Vent Stalker",
["npcID"] = 214049,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[389032] = {
["encounterName"] = "Overgrown Ancient",
["type"] = "BUFF",
["source"] = "Hungry Lasher",
["npcID"] = 196642,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2563,
},
[398497] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stormtop Shalemaw",
["npcID"] = 212364,
},
[452231] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[377004] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["npcID"] = 191736,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2564,
},
[422090] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[455814] = {
["isChanneled"] = false,
["source"] = "Elemental Rift",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217914,
},
[426735] = {
["encounterName"] = "Speaker Shadowcrown",
["type"] = "DEBUFF",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211087,
},
[157375] = {
["isChanneled"] = false,
["source"] = "Primal Storm Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 77942,
},
[422648] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[427157] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[452233] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[427601] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[432116] = {
["isChanneled"] = false,
["source"] = "Candleclaw Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213833,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[436624] = {
["encounterName"] = "Goldie Baronbottom",
["type"] = "DEBUFF",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214661,
},
[427852] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2883,
},
[461446] = {
["isChanneled"] = false,
["source"] = "Agaric Spreader",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212578,
},
[3716] = {
["isChanneled"] = false,
["source"] = "Jhazdok",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 1860,
},
[450188] = {
["isChanneled"] = false,
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213834,
},
[441413] = {
["source"] = "Worker Bee",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210265,
},
[431897] = {
["encounterName"] = "Brewmaster Aldryr",
["type"] = "DEBUFF",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 215819,
},
[425113] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207205,
},
[462983] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Automatic Ironstrider",
["npcID"] = 229778,
},
[377009] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["npcID"] = 191736,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2564,
},
[457354] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "ELIZA",
["npcID"] = 224060,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2835,
},
[456331] = {
["isChanneled"] = false,
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219619,
},
[432036] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[449167] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[453773] = {
["source"] = "Nazgrim",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 221634,
},
[449815] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sandres the Relicbearer",
["npcID"] = 217534,
},
[390599] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Child of Ohn'ahra",
["npcID"] = 191869,
},
[443027] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bazaar Guard",
["npcID"] = 220974,
},
[122719] = {
["source"] = "Pilgrim",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 217874,
},
[79849] = {
["isChanneled"] = false,
["source"] = "Kirin Tor Guardian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 104091,
},
[449169] = {
["encounterName"] = "Master Machinists",
["type"] = "DEBUFF",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 213216,
},
[443028] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[376997] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["npcID"] = 191736,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2564,
},
[263916] = {
["source"] = "Feathermane",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[100784] = {
["isChanneled"] = false,
["source"] = "Earth Spirit",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 69792,
},
[425536] = {
["isChanneled"] = false,
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210818,
},
[453776] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Colossal Titan Construct",
["npcID"] = 212213,
},
[443854] = {
["isChanneled"] = false,
["source"] = "Inflicted Civilian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219066,
},
[441171] = {
["encounterName"] = "I'pa",
["source"] = "Brew Drop",
["encounterID"] = 2929,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219301,
},
[464917] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Weave-Rat",
["npcID"] = 230889,
},
[317792] = {
["isChanneled"] = false,
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163366,
},
[389572] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[450196] = {
["isChanneled"] = false,
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213834,
},
[450197] = {
["isChanneled"] = false,
["source"] = "Skittering Swarmer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208245,
},
[448662] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[444055] = {
["isChanneled"] = false,
["source"] = "Rampaging Threadling",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222730,
},
[430238] = {
["isChanneled"] = false,
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207202,
},
[428703] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rock Smasher",
["npcID"] = 213954,
},
[451732] = {
["isChanneled"] = false,
["source"] = "Swarming Cogwalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 232871,
},
[433821] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Winged Carrier",
["npcID"] = 216365,
},
[446615] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[452730] = {
["isChanneled"] = false,
["source"] = "Verdant Hulk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215813,
},
[452042] = {
["source"] = "Arcane Phoenix",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223453,
},
[424891] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[456851] = {
["isChanneled"] = false,
["source"] = "Chasm Shalewing",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219291,
},
[451222] = {
["isChanneled"] = false,
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219983,
},
[1604] = {
["source"] = "Small Threadling",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 219662,
},
[423588] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[451763] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[427583] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[453588] = {
["isChanneled"] = false,
["source"] = "Coalesced Monstrosity",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220266,
},
[449017] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Tij'allet",
["npcID"] = 215600,
},
[372503] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Loyalist Threadblade",
["npcID"] = 221190,
},
[430754] = {
["isChanneled"] = false,
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214439,
},
[461460] = {
["source"] = "Creaky Mine Cart",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209439,
},
[460436] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Freysworn Chalcy",
["npcID"] = 224441,
},
[448666] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[400050] = {
["isChanneled"] = false,
["source"] = "Deepflayer Hunter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221198,
},
[7870] = {
["isChanneled"] = false,
["source"] = "Nazrida",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 1863,
},
[415403] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Swarming Flyer",
["npcID"] = 218325,
},
[388866] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Manafiend",
["npcID"] = 196045,
},
[191726] = {
["isChanneled"] = false,
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 97022,
},
[392375] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Spirit Wolf",
["npcID"] = 29264,
},
[456593] = {
["source"] = "Lava Laden Crystal Construct",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 226968,
},
[405681] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skelshekor",
["npcID"] = 17252,
},
[457858] = {
["isChanneled"] = false,
["source"] = "Deepfiend Azellix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218458,
},
[444418] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[452272] = {
["isChanneled"] = false,
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213658,
},
[432805] = {
["source"] = "Radiating Voidstone",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212739,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["encounterID"] = 2788,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213008,
},
[450205] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Wicktor",
["npcID"] = 218211,
},
[442529] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Starblessed Glimmerfly",
["npcID"] = 220703,
},
[447135] = {
["isChanneled"] = false,
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[429224] = {
["source"] = "Treant",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 54983,
},
[388796] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[450718] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[447136] = {
["source"] = "Flavor Scientist",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222964,
},
[415406] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2831,
},
[432031] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Black Blood",
["npcID"] = 215968,
},
[428202] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2888,
},
[317791] = {
["isChanneled"] = false,
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 163366,
},
[427323] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212786,
},
[195321] = {
["source"] = "Earth Spirit",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 69792,
},
[421817] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208743,
},
[424621] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
},
[427180] = {
["encounterName"] = "The Darkness",
["type"] = "DEBUFF",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 208747,
},
[425998] = {
["source"] = "Sparklit Bomber",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212540,
},
[432068] = {
["isChanneled"] = false,
["source"] = "Waterworks Brute",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222979,
},
[456101] = {
["isChanneled"] = false,
["source"] = "Void Crystal Monstrosity",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217200,
},
[424614] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Stabber",
["npcID"] = 207450,
},
[390912] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Vile Lasher",
["npcID"] = 197219,
},
[382817] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Unknown",
["npcID"] = 1860,
},
[429099] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[68054] = {
["source"] = "Jeeves",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 35642,
},
[433845] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[427469] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[447141] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Repurposed Loaderbot",
["npcID"] = 222923,
},
[263423] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hound",
["npcID"] = 165189,
},
[8220] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[442536] = {
["isChanneled"] = false,
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224732,
},
[426160] = {
["encounterName"] = "Stormguard Gorren",
["type"] = "DEBUFF",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207205,
},
[79892] = {
["isChanneled"] = false,
["source"] = "Murgha the Tempered",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 96957,
},
[439333] = {
["encounterName"] = "Avanoxx",
["type"] = "BUFF",
["source"] = "Starved Crawler",
["npcID"] = 218961,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2926,
},
[457484] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[459937] = {
["source"] = "Dripear the Waxy",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 213883,
},
[449702] = {
["isChanneled"] = false,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223562,
},
[433843] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[377034] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["npcID"] = 191736,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2564,
},
[451238] = {
["isChanneled"] = false,
["source"] = "Sureki Conscript",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223357,
},
[459938] = {
["isChanneled"] = true,
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213883,
},
[263938] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Gorilla",
["npcID"] = 165189,
},
[430256] = {
["isChanneled"] = false,
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212793,
},
[451239] = {
["source"] = "Sureki Conscript",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223357,
},
[451608] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[387843] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spectral Invoker",
["npcID"] = 196202,
},
[450728] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207205,
},
[422351] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gnarled Lasher",
["npcID"] = 207740,
},
[433841] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[428212] = {
["encounterName"] = "Master Machinists",
["type"] = "BUFF",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2888,
},
[426677] = {
["isChanneled"] = false,
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212412,
},
[441518] = {
["isChanneled"] = false,
["source"] = "Failed Batch",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220368,
},
[432156] = {
["isChanneled"] = false,
["source"] = "Waxtail Outrider",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213095,
},
[116847] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[439600] = {
["encounterName"] = "Skarmorak",
["type"] = "BUFF",
["source"] = "Crystal Shard",
["npcID"] = 214443,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2880,
},
[439467] = {
["isChanneled"] = false,
["source"] = "Yes Man",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219588,
},
[439984] = {
["isChanneled"] = true,
["source"] = "Earthen-Ward Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216221,
},
[439468] = {
["isChanneled"] = false,
["source"] = "Yes Man",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219588,
},
[134847] = {
["source"] = "Blingtron 4000",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 43929,
},
[420847] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Unknown",
["npcID"] = 165189,
},
[445210] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[457465] = {
["encounterName"] = "Void Speaker Eirich",
["type"] = "DEBUFF",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2883,
},
[82707] = {
["isChanneled"] = false,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[427192] = {
["source"] = "Anub'ikkaj",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211089,
},
[458409] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pride of Beledar",
["npcID"] = 221786,
},
[439749] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2880,
},
[431549] = {
["isChanneled"] = false,
["source"] = "Nerubian Venomspitter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219661,
},
[462859] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[445910] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sporbit",
["npcID"] = 213434,
},
[445207] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Bound Howler",
["npcID"] = 221979,
},
[89753] = {
["isChanneled"] = false,
["source"] = "Rinnshokin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 17252,
},
[451758] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[425556] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2848,
},
[445718] = {
["isChanneled"] = false,
["source"] = "Sparklit Rust Crusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212597,
},
[431659] = {
["isChanneled"] = false,
["source"] = "Clotweave Widow",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216193,
},
[370013] = {
["isChanneled"] = false,
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214722,
},
[454318] = {
["isChanneled"] = false,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[449960] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Kobyss",
["npcID"] = 215750,
},
[456338] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[452252] = {
["isChanneled"] = false,
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217353,
},
[454319] = {
["isChanneled"] = false,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[423393] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[456453] = {
["isChanneled"] = false,
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213566,
},
[431364] = {
["isChanneled"] = true,
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214761,
},
[434824] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Atik",
["npcID"] = 217533,
},
[124007] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Xuen",
["npcID"] = 63508,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210271,
},
[441259] = {
["source"] = "Tentacular Slime",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220364,
},
[427710] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sporbit",
["npcID"] = 213434,
},
[286305] = {
["source"] = "Varok Saurfang",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 146011,
},
[436922] = {
["isChanneled"] = false,
["source"] = "Ixlorb the Spinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218426,
},
[453810] = {
["source"] = "Failed Batch",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220368,
},
[79571] = {
["source"] = "Kirin Tor Guardian",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222476,
},
[446646] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[428735] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 103822,
},
[451764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[442041] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Sunless Shadowblade",
["npcID"] = 219631,
},
[440506] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stream Skipper",
["npcID"] = 213700,
},
[438971] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Ravenous Cinderbee",
["encounterID"] = 2931,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218016,
},
[426145] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[445470] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ah'shalathala the Quenched",
["npcID"] = 224306,
},
[451102] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Ascendant Vis'coxria",
["npcID"] = 211261,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[428737] = {
["isChanneled"] = false,
["source"] = "Treant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54983,
},
[446519] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Penumbral Shalehorn",
["npcID"] = 227933,
},
[451114] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Animated Darkness",
["npcID"] = 213905,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2838,
},
[451890] = {
["isChanneled"] = false,
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212876,
},
[438973] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[423109] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208743,
},
[388822] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2565,
},
[424429] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[90361] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blu",
["npcID"] = 165189,
},
[434096] = {
["encounterName"] = "Rasha'nan",
["type"] = "DEBUFF",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2839,
},
[444722] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[446858] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[438975] = {
["encounterName"] = "Benk Buzzbee",
["type"] = "DEBUFF",
["source"] = "Ravenous Cinderbee",
["encounterID"] = 2931,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 218016,
},
[452118] = {
["isChanneled"] = false,
["source"] = "Kra'jhendo",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216546,
},
[396812] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Spellbound Scepter",
["npcID"] = 196576,
},
[124009] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Xuen",
["npcID"] = 63508,
},
[423305] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[439488] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2565,
},
[431645] = {
["isChanneled"] = false,
["source"] = "Dark Apothecary",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219651,
},
[464876] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Engine Speaker",
["npcID"] = 212764,
},
[434505] = {
["isChanneled"] = false,
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214668,
},
[449724] = {
["source"] = "Baelgrim",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 223833,
},
[449622] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Webspeaker Grik'ik",
["npcID"] = 216041,
},
[391385] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enraged Magma Fury",
["npcID"] = 214924,
},
[396716] = {
["encounterName"] = "Overgrown Ancient",
["type"] = "DEBUFF",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2563,
},
[457913] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Deployed Wind-Wrangling Spire",
["npcID"] = 227482,
},
[434743] = {
["source"] = "Chef Chewie",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214697,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[424650] = {
["isChanneled"] = false,
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210818,
},
[431303] = {
["isChanneled"] = false,
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213892,
},
[437956] = {
["isChanneled"] = false,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2848,
},
[446086] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sureki Unnaturaler",
["npcID"] = 216339,
},
[166302] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blingtron 5000",
["npcID"] = 77789,
},
[434089] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2839,
},
[459210] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Bound Despoiler",
["npcID"] = 212765,
},
[388902] = {
["encounterName"] = "Echo of Doragosa",
["type"] = "DEBUFF",
["source"] = "Arcane Rift Invisible Stalker",
["npcID"] = 196664,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2565,
},
[398553] = {
["isChanneled"] = false,
["source"] = "Shaleshell Clicker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220155,
},
[455277] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[430282] = {
["isChanneled"] = false,
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207202,
},
[440207] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[448384] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flamekeeper Graz",
["npcID"] = 219279,
},
[420659] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2926,
},
[444705] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[208963] = {
["source"] = "Totem of Wrath",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 105427,
},
[440007] = {
["isChanneled"] = true,
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214576,
},
[252637] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Slobbering Fiend",
["npcID"] = 127810,
},
[445125] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cindersting",
["npcID"] = 220238,
},
[451778] = {
["isChanneled"] = false,
["source"] = "Dogmatic Machine Speaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212878,
},
[290577] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Abomination",
["npcID"] = 149555,
},
[438473] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2926,
},
[450127] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegehold Defender",
["npcID"] = 216016,
},
[431309] = {
["isChanneled"] = false,
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213892,
},
[448050] = {
["isChanneled"] = false,
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211858,
},
[8221] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[451268] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[389054] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arcane Forager",
["npcID"] = 196694,
},
[444490] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Ancestor",
["npcID"] = 221177,
},
[453496] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Sureki Webmage",
["npcID"] = 225479,
},
[459457] = {
["isChanneled"] = false,
["source"] = "Nerubian Saboteur",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228057,
},
[449734] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2839,
},
[461781] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[430288] = {
["isChanneled"] = false,
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207202,
},
[455364] = {
["isChanneled"] = false,
["source"] = "Kx",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216582,
},
[263861] = {
["isChanneled"] = false,
["source"] = "Tank",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[450628] = {
["isChanneled"] = true,
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209801,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[445130] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Cindersting",
["npcID"] = 220238,
},
[455877] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Deepwater Abomination",
["npcID"] = 215654,
},
[446154] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Deepwater Gar",
["npcID"] = 219359,
},
[442995] = {
["isChanneled"] = false,
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220946,
},
[378003] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Guardian Sentry",
["npcID"] = 192680,
},
[427024] = {
["isChanneled"] = false,
["source"] = "Glower Swarm",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224595,
},
[440549] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[2649] = {
["isChanneled"] = false,
["source"] = "Sul'raka",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[441410] = {
["isChanneled"] = false,
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210265,
},
[343294] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rune Weapon",
["npcID"] = 27893,
},
[224729] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[181089] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["npcID"] = 191736,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2564,
},
[448002] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Great Stormfang",
["npcID"] = 216017,
},
[443397] = {
["isChanneled"] = false,
["source"] = "Sureki Venomblade",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220193,
},
[234401] = {
["isChanneled"] = false,
["source"] = "Inquisitor Variss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 117933,
},
[461884] = {
["isChanneled"] = false,
["source"] = "Spring Elemental",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215810,
},
[430805] = {
["isChanneled"] = false,
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214421,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216619,
},
[443438] = {
["source"] = "Herald of Ansurek",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 220196,
},
[450764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegehold Defender",
["npcID"] = 216016,
},
[426712] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[408801] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Incorporeal Being",
["npcID"] = 204560,
},
[452169] = {
["isChanneled"] = false,
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211858,
},
[452812] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Hunting Skyrazor",
["npcID"] = 226150,
},
[193473] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Void Tendril",
["npcID"] = 192337,
},
[452469] = {
["source"] = "Brightstone",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 224764,
},
[442285] = {
["encounterName"] = "The Coaglamation",
["type"] = "DEBUFF",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216320,
},
[450766] = {
["source"] = "Coalesced Living Honey",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 217833,
},
[429114] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[414944] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[152175] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[454861] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Colossal Titan Construct",
["npcID"] = 226078,
},
[449298] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[414945] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[377270] = {
["isChanneled"] = true,
["source"] = "Shimmerfin Mender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220246,
},
[198837] = {
["isChanneled"] = false,
["source"] = "Risen Skulker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 99541,
},
[389401] = {
["isChanneled"] = false,
["source"] = "Shimmerfin Oracle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220249,
},
[408805] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Incorporeal Being",
["npcID"] = 204560,
},
[211887] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Elisande",
["npcID"] = 106643,
},
[89798] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lord Victor Nefarius",
["npcID"] = 49799,
},
[377589] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Marrowthief",
["npcID"] = 26125,
},
[451793] = {
["isChanneled"] = false,
["source"] = "Al'haggro",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216560,
},
[452164] = {
["isChanneled"] = false,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[463052] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[430812] = {
["isChanneled"] = true,
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214421,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210267,
},
[452306] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Arathi Reserve",
["npcID"] = 213286,
},
[452877] = {
["source"] = "Oop'lajax",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 222319,
},
[432113] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Overlord",
["npcID"] = 228575,
},
[458795] = {
["isChanneled"] = false,
["source"] = "Ravageant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207826,
},
[459753] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Fenryr",
["npcID"] = 228224,
},
[260249] = {
["source"] = "N.U.T.Z.",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[430814] = {
["source"] = "Coalescing Void Diffuser",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 214421,
},
[446726] = {
["isChanneled"] = false,
["source"] = "Elder Shadeweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221102,
},
[5672] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Healing Stream Totem",
["npcID"] = 3527,
},
[446424] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Freed Honeywax",
["npcID"] = 222313,
},
[443924] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[453029] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Siege Marshal Tekhzok",
["npcID"] = 215987,
},
[427950] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[440652] = {
["isChanneled"] = false,
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208450,
},
[422628] = {
["source"] = "Corridor Creeper",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210539,
},
[324447] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Priory Squire",
["npcID"] = 221486,
},
[240548] = {
["isChanneled"] = false,
["source"] = "Tormenting Eye",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118032,
},
[15572] = {
["source"] = "Constable Elimoore",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 211016,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210267,
},
[442418] = {
["isChanneled"] = false,
["source"] = "Royal Journalist Ist'iix",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226234,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[438494] = {
["encounterName"] = "Avanoxx",
["type"] = "BUFF",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_AURA_APPLIED",
["encounterID"] = 2926,
},
[263854] = {
["isChanneled"] = false,
["source"] = "nonstop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[439518] = {
["source"] = "Nx",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 216648,
},
[439538] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Mechanized Enforcer",
["npcID"] = 214826,
},
[442589] = {
["isChanneled"] = false,
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220946,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2878,
},
[445882] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadow-Mad Sow",
["npcID"] = 214930,
},
[1459] = {
["source"] = "Meredy Huntswell",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209059,
},
[357650] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "King Krush",
["npcID"] = 165189,
},
[441419] = {
["source"] = "Deathpetal",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206184,
},
[295028] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[452314] = {
["isChanneled"] = false,
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213658,
},
[295032] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[432868] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hulking Bloodguard",
["npcID"] = 228015,
},
[431333] = {
["isChanneled"] = true,
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213893,
},
[425704] = {
["isChanneled"] = false,
["source"] = "Pack Mole",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211977,
},
[422122] = {
["isChanneled"] = false,
["source"] = "Ol' Waxbeard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[441179] = {
["isChanneled"] = false,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223562,
},
[439522] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216648,
},
[419798] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Night Elf Starcaller",
["npcID"] = 219919,
},
[450781] = {
["isChanneled"] = false,
["source"] = "Flickerflame Sticker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212629,
},
[443105] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Awakener Kobyss",
["npcID"] = 215683,
},
[432569] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mother of Chaos",
["npcID"] = 228576,
},
[452317] = {
["isChanneled"] = false,
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213658,
},
[454876] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Rhak'ik",
["npcID"] = 221032,
},
[463576] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Candle",
["npcID"] = 222021,
},
[439524] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218002,
},
[461785] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[434407] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2839,
},
[451295] = {
["isChanneled"] = false,
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219983,
},
[426869] = {
["isChanneled"] = false,
["source"] = "Flickerflame Enforcer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212548,
},
[388862] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Manafiend",
["npcID"] = 196045,
},
[434408] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2906,
},
[234476] = {
["isChanneled"] = false,
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118065,
},
[234680] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Highlord Kruul",
["npcID"] = 117198,
},
[388863] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Manafiend",
["npcID"] = 196045,
},
[440550] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[449250] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Tij'allet",
["npcID"] = 215600,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[113656] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Void Chunk",
["encounterID"] = 2836,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213684,
},
[449251] = {
["isChanneled"] = false,
["source"] = "Nerubian Threadmancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208244,
},
[455904] = {
["isChanneled"] = false,
["source"] = "Oozemodius",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220410,
},
[234573] = {
["source"] = "Smoldering Infernal",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 118065,
},
},
["profileKeys"] = {
["Sevdh - Lothar"] = "Default",
["Sevmage - Lothar"] = "Jundies Plater",
["Buffythevamp - Lothar"] = "Default",
["Angrysev - Lothar"] = "Jundies Plater",
["Severusevans - Lothar"] = "Quazii Plater",
["Xosis - Lothar"] = "Default",
["Sevmonk - Lothar"] = "Default",
},
["profiles"] = {
["Jundies Plater"] = {
["target_highlight"] = false,
["aura_breakline_space"] = 1,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675977191,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = -13828,
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 281,
["semver"] = "",
["url"] = "",
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["SpellIds"] = {
261265,
261266,
271590,
350857,
352016,
235308,
235089,
367573,
362020,
232156,
374779,
113309,
117665,
379256,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        \n        --Shadowlands Open World - Korthia\n        [180013] = {20}, --Escaped Wilderling\n        [179931] = {80, 60}, --Relic Breaker krelva\n        \n        --Dragonflight Open World\n        \n        [193532] = {40}, --Bazual, The Dreaded Flame\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n        --                                                                                ***DUNGEONS***\n        \n        --DRAGONFLIGHT DUNGEONS\n        \n        \n        --Ruby Life pools\n        [190485] = {50}, --Stormvein\n        [193435] = {50}, --Kyrakka\n        [188252] = {66,33}, --Melidrussa Chillworn\n        \n        --The Azure Vault\n        [186738] = {75, 50, 25}, --Umbrelskul\n        \n        --Brackenhide Hollow\n        [186125] = {30}, --Tricktotem\n        [186122] = {30}, --Rira Hackclaw\n        [186124] = {30}, --Gashtooth\n        \n        --Halls of Infusion\n        [189719] = {15}, --Watcher Irideus\n        \n        --The Nokhud Offensive\n        [186151] = {60}, --Balakar Khan\n        \n        --Uldaman: Legacy of Tyr\n        [184422] = {70, 30}, --Emberon\n        \n        --Temple of the Jade Serpent\n        [56732] = {30}, --Liu Flameheart\n        \n        \n        \n        --LEGION DUNGEONS\n        \n        \n        --Halls of Valor\n        [96574] = {30}, --Stormforged Sentinel\n        [99868] = {60}, --Fenryr\n        [95676] = {80}, --Odyn\n        [94960] = {10}, --Hymdall \n        \n        \n        --Karazhan\n        [114790] = {66, 33}, --Viz'aduum the Watcher\n        [114312] = {60}, -- Moroes\n        \n        \n        \n        --SHADOWLANDS DUNGEONS\n        \n        \n        --Theater of pain\n        [164451] = {40}, --Dessia the Decapirator\n        [164463] = {40}, --Paceran the Virulent\n        [164461] = {40}, -- Sathel the Accursed\n        [165946]= {50}, -- Mordretha\n        \n        --Mists of TIrna Scithe\n        [164804] = {22}, -- Droman Oulfarran\n        [164501] = {70, 40, 10}, --Mistcaller\n        [164926] = {50}, -- Drust Boughbreaker\n        \n        --Plaguefall\n        [164267] =  {66, 33}, --Magrave Stradama\n        [164967] =  {66, 33}, --Doctor ickus\n        [169861] = {66, 33}, -- Ickor Bileflesh\n        \n        --Halls of Atonement\n        [164218] = {70, 40}, --Lord Chamberlain\n        \n        --Spires of Ascension\n        [162061] = {70, 30}, --Devos\n        \n        --Sanguine Depths\n        [162099] = {50}, --General Kaal Boss fight\n        \n        --De Other Side\n        [164558] = {80, 60, 40, 20}, --Hakkar the Soulflayer\n        \n        \n        --WOD DUNGEONS\n        \n        --Grimrail Depot\n        [79545] = {60}, --Nitrogg Thundertower\n        \n        \n        \n        --BFA DUNGEONS\n        \n        --Mechagon\n        [144298] = {30}, --Defense Bot Mk III (casts a shield)\n        \n        \n        --                                                                                  ***RAIDS***\n        \n        \n        \n        --VAULT OF THE INCARNATES\n        \n        --Kurog Grimtotem\n        [181378] = {66, 33},\n        \n        --Raszageth the Storm Eater\n        [199031] = {65},\n        \n        \n        \n        \n        --Sepulcher of the First Ones\n        \n        --Prototype Pantheon\n        [181548] = {40}, --Absolution\n        [181551] = {40}, --Duty\n        [181546] = {40}, --Renewal\n        [181549] = {40}, --War\n        \n        --Artificer Xymox\n        [183501] = {75, 50}, --Xymox\n        \n        --Halondrus the Reclaimer\n        [180906] = {78, 45}, --Halondrus\n        \n        --Anduin Wrynn\n        [183671] = {40}, --Monstrous Soul\n        \n        [185421] = {15}, --The Jailer\n        \n        \n        --[163121] = {70}, -- Stitched vanguard - Necrotic Wake\n        \n        --Castle Nathria\n        \n        --Sanctum of domination\n        [175730] = {70, 40}, --Fatescribe Roh-Kalo\n        [176523] = {70, 40}, --Painsmith\n        [175725] = {66, 33}, --Eye of the Jailer\n        [176929] = {60, 20}, --Remnant of Kel'Thuzad\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n        \n        \n        [166969] = {50}, --Council of Blood - Frieda\n        [166970] = {50}, --Council of Blood - Stavros\n        [166971] = {50}, --Council of Blood - Niklaus\n        --Sire Denathrius\n        [167406] = {70.5, 37.5}, --Sire Denathrius\n        [173162] = {66,33}, --Lord Evershade\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675976856,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        \n        --Shadowlands Open World - Korthia\n        [180013] = {20}, --Escaped Wilderling\n        [179931] = {80, 60}, --Relic Breaker krelva\n        \n        --Dragonflight Open World\n        \n        [193532] = {40}, --Bazual, The Dreaded Flame\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n        --                                                                                ***DUNGEONS***\n        \n        --DRAGONFLIGHT DUNGEONS\n        \n        \n        --Ruby Life pools\n        [190485] = {50}, --Stormvein\n        [193435] = {50}, --Kyrakka\n        [188252] = {66,33}, --Melidrussa Chillworn\n        \n        --The Azure Vault\n        [186738] = {75, 50, 25}, --Umbrelskul\n        \n        --Brackenhide Hollow\n        [186125] = {30}, --Tricktotem\n        [186122] = {30}, --Rira Hackclaw\n        [186124] = {30}, --Gashtooth\n        \n        --Halls of Infusion\n        [189719] = {15}, --Watcher Irideus\n        \n        --The Nokhud Offensive\n        [186151] = {60}, --Balakar Khan\n        \n        --Uldaman: Legacy of Tyr\n        [184422] = {70, 30}, --Emberon\n        \n        --Temple of the Jade Serpent\n        [56732] = {30}, --Liu Flameheart\n        \n        \n        \n        --LEGION DUNGEONS\n        \n        \n        --Halls of Valor\n        [96574] = {30}, --Stormforged Sentinel\n        [99868] = {60}, --Fenryr\n        [95676] = {80}, --Odyn\n        [94960] = {10}, --Hymdall \n        \n        \n        --Karazhan\n        [114790] = {66, 33}, --Viz'aduum the Watcher\n        [114312] = {60}, -- Moroes\n        \n        \n        \n        --SHADOWLANDS DUNGEONS\n        \n        \n        --Theater of pain\n        [164451] = {40}, --Dessia the Decapirator\n        [164463] = {40}, --Paceran the Virulent\n        [164461] = {40}, -- Sathel the Accursed\n        [165946]= {50}, -- Mordretha\n        \n        --Mists of TIrna Scithe\n        [164804] = {22}, -- Droman Oulfarran\n        [164501] = {70, 40, 10}, --Mistcaller\n        [164926] = {50}, -- Drust Boughbreaker\n        \n        --Plaguefall\n        [164267] =  {66, 33}, --Magrave Stradama\n        [164967] =  {66, 33}, --Doctor ickus\n        [169861] = {66, 33}, -- Ickor Bileflesh\n        \n        --Halls of Atonement\n        [164218] = {70, 40}, --Lord Chamberlain\n        \n        --Spires of Ascension\n        [162061] = {70, 30}, --Devos\n        \n        --Sanguine Depths\n        [162099] = {50}, --General Kaal Boss fight\n        \n        --De Other Side\n        [164558] = {80, 60, 40, 20}, --Hakkar the Soulflayer\n        \n        \n        --WOD DUNGEONS\n        \n        --Grimrail Depot\n        [79545] = {60}, --Nitrogg Thundertower\n        \n        \n        \n        --BFA DUNGEONS\n        \n        --Mechagon\n        [144298] = {30}, --Defense Bot Mk III (casts a shield)\n        \n        \n        --                                                                                  ***RAIDS***\n        \n        \n        \n        --VAULT OF THE INCARNATES\n        \n        --Kurog Grimtotem\n        [181378] = {66, 33},\n        \n        --Raszageth the Storm Eater\n        [199031] = {65},\n        \n        \n        \n        \n        --Sepulcher of the First Ones\n        \n        --Prototype Pantheon\n        [181548] = {40}, --Absolution\n        [181551] = {40}, --Duty\n        [181546] = {40}, --Renewal\n        [181549] = {40}, --War\n        \n        --Artificer Xymox\n        [183501] = {75, 50}, --Xymox\n        \n        --Halondrus the Reclaimer\n        [180906] = {78, 45}, --Halondrus\n        \n        --Anduin Wrynn\n        [183671] = {40}, --Monstrous Soul\n        \n        [185421] = {15}, --The Jailer\n        \n        \n        --[163121] = {70}, -- Stitched vanguard - Necrotic Wake\n        \n        --Castle Nathria\n        \n        --Sanctum of domination\n        [175730] = {70, 40}, --Fatescribe Roh-Kalo\n        [176523] = {70, 40}, --Painsmith\n        [175725] = {66, 33}, --Eye of the Jailer\n        [176929] = {60, 20}, --Remnant of Kel'Thuzad\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n        \n        \n        [166969] = {50}, --Council of Blood - Frieda\n        [166970] = {50}, --Council of Blood - Stavros\n        [166971] = {50}, --Council of Blood - Niklaus\n        --Sire Denathrius\n        [167406] = {70.5, 37.5}, --Sire Denathrius\n        [173162] = {66,33}, --Lord Evershade\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n",
["Icon"] = -13520,
["NpcNames"] = {
"166644",
"164267",
"166969",
"166970",
"162061",
"164804",
"164926",
"166971",
"164967",
"167406",
"173162",
"169861",
"175730",
"175725",
"176523",
"180013",
"179931",
"176929",
"116410",
"116409",
"180906",
"181548",
"181551",
"181546",
"181549",
"183501",
"183671",
"114790",
"144298",
"79545",
"114312",
"193435",
"190485",
"186738",
"96574",
"99868",
"95676",
"186125",
"186124",
"186122",
"189719",
"188252",
"186151",
"184422",
"181378",
"94960",
"56732",
"199031",
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 479,
["semver"] = "",
["url"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Name"] = "Unit - Health Markers [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n\n--DRAGONFLIGHT\n\n--VAULT OF THE INCARNATES\n\n--Eranog - 184972\n--Terros - 190496\n--Dethea, Ascended - 189813 \n--Broodkeeper Diurna - 190245\n--Kurog Grimtotem - 184986\n\n--DUNGEONS\n--Overgrown Ancient - 196482\n--Telash Greywing - 186737\n--Granyth - 186616\n--The Raging Tempest - 186615\n\n--SHADOWLANDS\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n164558 = Hakkar the Soulflayer\n\n162060 = Oryphrion\ncustom:\n171557 = shade-of-bargast\n\n-- Sepulcher of the First Ones\n\n--Xymox adds - 184140\n--Lihuvim - 182169\n--Tala - 104217 for testing\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
["fontColor"] = {
1,
1,
1,
1,
},
["fontSize"] = 12,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675976862,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n\n--DRAGONFLIGHT\n\n--VAULT OF THE INCARNATES\n\n--Eranog - 184972\n--Terros - 190496\n--Dethea, Ascended - 189813 \n--Broodkeeper Diurna - 190245\n--Kurog Grimtotem - 184986\n\n--DUNGEONS\n--Overgrown Ancient - 196482\n--Telash Greywing - 186737\n--Granyth - 186616\n--The Raging Tempest - 186615\n\n--SHADOWLANDS\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n164558 = Hakkar the Soulflayer\n\n162060 = Oryphrion\ncustom:\n171557 = shade-of-bargast\n\n-- Sepulcher of the First Ones\n\n--Xymox adds - 184140\n--Lihuvim - 182169\n--Tala - 104217 for testing\n\n--]=]",
["Icon"] = 136048,
["NpcNames"] = {
"171557",
"162060",
"168318",
"184140",
"182169",
"196482",
"186120",
"186116",
"189729",
"189901",
"197025",
"190496",
"189813",
"190245",
"184972",
"184986",
"186737",
"186616",
"186615",
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 472,
["semver"] = "",
["url"] = "",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", -115, -16);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--56792 - Figment of Doubt\n--165913 - Ghastly Parishoner\n--167898 - Manifestation of Envy\n--174773 - Spiteful Shade\n--164702 - Carrion Worm\n--194745 - Rotfang Hyena\n\n--166251  ---- Potentially explosive orb? need to test",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
["nameplateColor"] = {
0.86666666666667,
0.43529411764706,
0,
1,
},
["changeNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    local targetName = UnitName (unitId .. \"target\");\n    \n    if targetName and UnitIsUnit(targetName, \"player\")then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n            \n            envTable.colorchanged = true\n        end\n        \n    end\n    \n    if (targetName) then\n        local _, class = UnitClass (unitId..\"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        envTable.FixateTarget:Show();\n    end  \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1675976859,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", -115, -16);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--56792 - Figment of Doubt\n--165913 - Ghastly Parishoner\n--167898 - Manifestation of Envy\n--174773 - Spiteful Shade\n--164702 - Carrion Worm\n--194745 - Rotfang Hyena\n\n--166251  ---- Potentially explosive orb? need to test",
["Icon"] = -14046,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["Revision"] = 778,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.71372549019608,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Outline Test",
},
},
["Desc"] = "Changes nameplate color to Orange and adds glow to npcs that are fixated on you",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"174773",
"164702",
"166251",
"165913",
"167898",
"56792",
},
["Prio"] = 99,
["Name"] = "Spiteful/Fixate Name&Glow",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    local targetName = UnitName (unitId .. \"target\");\n    \n    if targetName and UnitIsUnit(targetName, \"player\")then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n            \n            envTable.colorchanged = true\n        end\n        \n    end\n    \n    if (targetName) then\n        local _, class = UnitClass (unitId..\"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        envTable.FixateTarget:Show();\n    end  \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675976859,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["Icon"] = 413591,
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["Revision"] = 266,
["semver"] = "1.0.3",
["url"] = "https://wago.io/JcByzfZtU/4",
["Options"] = {
},
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Adds a configurable pixel border glow to the buff/debuff if the remaining duration is less than 30% of its total duration.",
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
315341,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Pandemic Glow (Pixel)",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = 4,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["SpellIds"] = {
268030,
337943,
320822,
333292,
341840,
324987,
333478,
178072,
330438,
329423,
350287,
334928,
348428,
330532,
358980,
351073,
358026,
357144,
351603,
356023,
330513,
334076,
237946,
237952,
312262,
242733,
362628,
316443,
356031,
356011,
356001,
355642,
355644,
355782,
355057,
356133,
357260,
357284,
347015,
355139,
336451,
364240,
364241,
361923,
368063,
356407,
363024,
355584,
334664,
340300,
366288,
232120,
228554,
228009,
228025,
228019,
227977,
228278,
228280,
228567,
29339,
169341,
162415,
340037,
373513,
373618,
167232,
227646,
375606,
386549,
385568,
385393,
388211,
371983,
373405,
391599,
387627,
375653,
387862,
392457,
371624,
393309,
393296,
391268,
393429,
374623,
390548,
391019,
392486,
385331,
388804,
106856,
397394,
377612,
385574,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame, \"#00fc76\")\nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame) \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675976988,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame, \"#00fc76\")\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame, \"#00fc76\")\nend\n\n\n",
["Icon"] = 135801,
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame) \nend\n\n\n",
["Revision"] = 157,
["semver"] = "1.0.0",
["url"] = "https://wago.io/QmFFPeSSS/1",
["Options"] = {
},
["Author"] = "Nephuhlim-Illidan",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
228287,
295311,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.SetNameplateColor (unitFrame, \"#00fc76\")\nend",
["Name"] = "Change Color on Debuff",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = 1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --custom frames\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    local UnitType = Plater.GetUnitType (unitFrame)\n    local hsize = 1\n    local wsize = 1\n    \n    if UnitType == \"minus\" then\n        hsize = Plater.db.profile.minor_height_scale\n        wsize = Plater.db.profile.minor_width_scale\n    elseif UnitType == \"pet\" then\n        hsize = Plater.db.profile.pet_height_scale\n        wsize = Plater.db.profile.pet_width_scale\n    end\n    \n    envTable.glowEffect:SetOffset (-26*wsize, 25*wsize, 10*hsize, -13*hsize)\n    envTable.glowEffect:Hide()\n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 64\n    envTable.overlaySpark.alpha = 1\n    envTable.overlaySpark.texture = [[Interface\\CastingBar\\UI-CastingBar-Spark]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = 16\n    envTable.topArrow.height = 20\n    envTable.topArrow.alpha = scriptTable.config.ArrowAlpha \n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.glowEffect:Hide()\n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    --decrease the nameplate size\n    if unitFrame.enlargedByScript then\n        Plater.SetNameplateSize(unitFrame)\n        unitFrame.enlargedByScript = false\n    end\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if scriptTable.spellBL[envTable._SpellID] then return end\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.glowEffect:Show()\n    envTable.glowEffect.Texture:SetAlpha (scriptTable.config.GlowAlpha)\n    envTable.overlaySpark:Show()\n    envTable.overlaySpark:ClearAllPoints()\n    if (scriptTable.config.ShowArrow) then\n        envTable.topArrow:Show()\n        envTable.topArrow:ClearAllPoints()\n    end\n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --increase the nameplate size\n    \n    if not unitFrame.enlargedByScript then\n        local nameplateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat [1]\n        local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n        \n        Plater.SetNameplateSize (unitFrame, nameplateWidth, math.ceil(nameplateHeight*scriptTable.config.NameplateSizeOffset))\n        \n        unitFrame.enlargedByScript = true\n    end\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if scriptTable.spellBL[envTable._SpellID] then return end\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    local percent = unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)\n    \n    --update the percent\n    self.ThrottleUpdate = -1\n    if self.channeling then\n        envTable.overlaySpark:SetPoint (\"center\", unitFrame.healthBar, \"right\",-percent, 0)\n        envTable.topArrow:SetPoint (\"center\", unitFrame.healthBar, \"topright\", -percent + envTable.topArrow.width/15, 1)\n    else\n        envTable.overlaySpark:SetPoint (\"center\", unitFrame.healthBar, \"left\", percent, 0)\n        envTable.topArrow:SetPoint (\"center\", unitFrame.healthBar, \"topleft\", percent + envTable.topArrow.width/15, 1)    \n    end        \nend\n\n\n",
["Time"] = 1675977255,
["Temp_Initialization"] = "function (scriptTable)\n    \n    scriptTable.spellBL = {\n        [363827] = true, -- 다우세그네, false spell\n        [227463] = true, -- 칼날 소용돌이, duplicated\n    }    \nend\n\n\n",
["url"] = "https://wago.io/qkRQuE1cu/26",
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.glowEffect:Hide()\n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    --decrease the nameplate size\n    if unitFrame.enlargedByScript then\n        Plater.SetNameplateSize(unitFrame)\n        unitFrame.enlargedByScript = false\n    end\nend",
["Enabled"] = true,
["Revision"] = 3272,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "ShowArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "ArrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.7,
["Key"] = "GlowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Glow Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1.25,
["Key"] = "NameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Height Scale",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --custom frames\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    local UnitType = Plater.GetUnitType (unitFrame)\n    local hsize = 1\n    local wsize = 1\n    \n    if UnitType == \"minus\" then\n        hsize = Plater.db.profile.minor_height_scale\n        wsize = Plater.db.profile.minor_width_scale\n    elseif UnitType == \"pet\" then\n        hsize = Plater.db.profile.pet_height_scale\n        wsize = Plater.db.profile.pet_width_scale\n    end\n    \n    envTable.glowEffect:SetOffset (-26*wsize, 25*wsize, 10*hsize, -13*hsize)\n    envTable.glowEffect:Hide()\n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 64\n    envTable.overlaySpark.alpha = 1\n    envTable.overlaySpark.texture = [[Interface\\CastingBar\\UI-CastingBar-Spark]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = 16\n    envTable.topArrow.height = 20\n    envTable.topArrow.alpha = scriptTable.config.ArrowAlpha \n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if scriptTable.spellBL[envTable._SpellID] then return end\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    envTable.glowEffect:Show()\n    envTable.glowEffect.Texture:SetAlpha (scriptTable.config.GlowAlpha)\n    envTable.overlaySpark:Show()\n    envTable.overlaySpark:ClearAllPoints()\n    if (scriptTable.config.ShowArrow) then\n        envTable.topArrow:Show()\n        envTable.topArrow:ClearAllPoints()\n    end\n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --increase the nameplate size\n    \n    if not unitFrame.enlargedByScript then\n        local nameplateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat [1]\n        local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n        \n        Plater.SetNameplateSize (unitFrame, nameplateWidth, math.ceil(nameplateHeight*scriptTable.config.NameplateSizeOffset))\n        \n        unitFrame.enlargedByScript = true\n    end\nend",
["Author"] = "Bombad£o-Azralon",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.spellBL = {\n        [363827] = true, -- 다우세그네, false spell\n        [227463] = true, -- 칼날 소용돌이, duplicated\n    }    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["SpellIds"] = {
81008,
162617,
167232,
167240,
173135,
184381,
192158,
227254,
227508,
227568,
227776,
227917,
228019,
228278,
228279,
228555,
228700,
228852,
229429,
232137,
241808,
260344,
277039,
278192,
285020,
293861,
294517,
294533,
295985,
296080,
296355,
296839,
297966,
301177,
301667,
301952,
310392,
318995,
325506,
325632,
329423,
329904,
329905,
329909,
329930,
330711,
331550,
331935,
332002,
332165,
332619,
333002,
335783,
336383,
337110,
337175,
341146,
342160,
344776,
347150,
347671,
347704,
347855,
348428,
349458,
349663,
349987,
350090,
350180,
350286,
350339,
350365,
350385,
350517,
350764,
350922,
351066,
351119,
351353,
351646,
352355,
352538,
352933,
353124,
353444,
353742,
353769,
353782,
353952,
354068,
354147,
355055,
355057,
355127,
355139,
355212,
355224,
355429,
355438,
355540,
355584,
355782,
356021,
356023,
356407,
356537,
356548,
357144,
357189,
357226,
357260,
357404,
358131,
358215,
358270,
358327,
358328,
359770,
360717,
361644,
361923,
361989,
362028,
362617,
362820,
363024,
363088,
363533,
364040,
364114,
364386,
365008,
365385,
365958,
366374,
366379,
366678,
367054,
367380,
371273,
371358,
371597,
373513,
387614,
398300,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if scriptTable.spellBL[envTable._SpellID] then return end\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    local percent = unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)\n    \n    --update the percent\n    self.ThrottleUpdate = -1\n    if self.channeling then\n        envTable.overlaySpark:SetPoint (\"center\", unitFrame.healthBar, \"right\",-percent, 0)\n        envTable.topArrow:SetPoint (\"center\", unitFrame.healthBar, \"topright\", -percent + envTable.topArrow.width/15, 1)\n    else\n        envTable.overlaySpark:SetPoint (\"center\", unitFrame.healthBar, \"left\", percent, 0)\n        envTable.topArrow:SetPoint (\"center\", unitFrame.healthBar, \"topleft\", percent + envTable.topArrow.width/15, 1)    \n    end        \nend\n\n\n",
["Name"] = "Cast - Explosive [OPS]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = 26,
["semver"] = "1.2.4",
["Icon"] = 2065634,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"214840",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Important by Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Shining Green [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Special Ability [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Width Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Spark Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Stun [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE Hit All [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Debuff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Simple Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - Ongoing Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["version"] = -1,
["Name"] = "Cast - Heal Cut [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Voidzone [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
453212,
451098,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE With Range [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
427001,
432448,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura - Is Cast Bar [P]",
["NpcNames"] = {
},
},
},
["npcs_renamed"] = {
[180015] = "Dickhand",
[178141] = "Fish Dicker",
[181551] = "Duty",
[164707] = "Purple Slime",
[164967] = "Dickus",
[190128] = "Zul'gondeez",
[175646] = "S.U.C.C. Master",
[180773] = "Trash Can",
[32666] = "Uh oh",
[168969] = "Green Slime",
[175663] = "Hill Brad",
[181546] = "Renewal",
[164804] = "Simp Tree",
[165946] = "Mordretha",
[185610] = "Simp",
[163891] = "Bad Slime",
[181224] = "Da Sausage",
[176523] = "Painsmith",
[184910] = "Speed Boi",
[165010] = "Purple Slime",
[167731] = "Separator",
[168310] = "Plaguecock",
[181548] = "Absolution",
[185680] = "Haste Relic",
[179842] = "Assclapper",
[184911] = "CDR Boi",
[185685] = "CDR Relic",
[185683] = "Speed Relic",
[184908] = "Haste Boi",
[173044] = "Stitcher",
[181549] = "War",
[180990] = "Jailer",
[168153] = "Plaguecock",
[178171] = "Don't Pull Me",
[162691] = "Blightboner",
[164705] = "Haste Slime",
[70245] = "uh oh",
[179334] = "Not the boss",
[182169] = "Lithium",
[176394] = "Worker",
[175806] = "Sa'lami",
[164501] = "Mute Me",
[179733] = "Fish Dick",
},
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater.lua:2098",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater.lua:2098",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/FrameXML/SettingDefinitions/Interface.lua\"]:137: in function <Interface/FrameXML/SettingDefinitions/Interface.lua:133>\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:260: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:359: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:355>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:178: in function <Interface/SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:308: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:307>\n",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:4565",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:2098",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"return function() local font, height, flags = aura_env.region.text:GetFont()\"]:9: in function <[string \"return function() local font, height, flags...\"]:1>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/WeakAuras/AuraEnvironment.lua\"]:374: in function `ActivateAuraEnvironment'\n[string \"@Interface/AddOns/WeakAuras/GenericTrigger.lua\"]:811: in function `CreateFakeStates'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4188: in function `UpdateFakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:4164: in function `FakeStatesFor'\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:2997: in function <Interface/AddOns/WeakAuras/WeakAuras.lua:2863>\n[string \"@Interface/AddOns/WeakAuras/WeakAuras.lua\"]:3019: in function `Add'\n[string \"@Interface/AddOns/WeakAurasOptions/DisplayOptions.lua\"]:186: in function <Interface/AddOns/WeakAurasOptions/DisplayOptions.lua:175>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/MaxCam/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:45: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:43>\n[string \"@Interface/AddOns/MaxCam/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:836: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:658>\n[string \"@Interface/AddOns/MaxCam/Libs/AceConfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua\"]:888: in function <...nfig-3.0/AceConfigDialog-3.0/AceConfigDialog-3.0.lua:876>\n[string \"=[C]\"]: ?\n[string \"@Interface/AddOns/ElvUI_Libraries/Core/Ace3/AceGUI-3.0/AceGUI-3.0.lua\"]:66: in function <.../ElvUI_Libraries/Core/Ace3/AceGUI-3.0/AceGUI-3.0.lua:64>\n[string \"@Interface/AddOns/ElvUI_Libraries/Core/Ace3/AceGUI-3.0/AceGUI-3.0.lua\"]:300: in function `Fire'\n[string \"@Interface/AddOns/WeakAurasOptions/AceGUI-Widgets/AceGUIWidget-WeakAurasSpinBox.lua\"]:216: in function `SetValue'\n[string \"@Interface/AddOns/WeakAurasOptions/AceGUI-Widgets/AceGUIWidget-WeakAurasSpinBox.lua\"]:94: in function <...ons/AceGUI-Widgets/AceGUIWidget-WeakAurasSpinBox.lua:87>\n",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:4567",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:13407",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowEnemyPets"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:6522",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater.lua:8646",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:4566",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater.lua:2098",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/FrameXML/SettingDefinitions/Interface.lua\"]:135: in function <Interface/FrameXML/SettingDefinitions/Interface.lua:133>\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:260: in function `SetValueInternal'\n[string \"@Interface/SharedXML/Settings/Blizzard_Setting.lua\"]:67: in function `SetValue'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:359: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:355>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:178: in function <Interface/SharedXML/CallbackRegistry.lua:177>\n[string \"=[C]\"]: ?\n[string \"@Interface/SharedXML/CallbackRegistry.lua\"]:181: in function `TriggerEvent'\n[string \"@Interface/SharedXML/Settings/Blizzard_SettingControls.lua\"]:308: in function <...face/SharedXML/Settings/Blizzard_SettingControls.lua:307>\n",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateOtherAtBase"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplatePlayerMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"SetCVar(\"nameplatePlayerMaxDistance\", 60)\"]:1: in main chunk\n[string \"=[C]\"]: in function `RunScript'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:2174: in function `?'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:5236: in function `ChatEdit_ParseText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4894: in function `ChatEdit_SendText'\n[string \"@Interface/FrameXML/ChatFrame.lua\"]:4930: in function <Interface/FrameXML/ChatFrame.lua:4926>\n[string \"=[C]\"]: in function `ChatEdit_OnEnterPressed'\n[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1: in function <[string \"*ChatFrame.xml:141_OnEnterPressed\"]:1>\n",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateShowEnemyTotems"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater.lua:2098",
["nameplateOverlapH"] = "Interface/AddOns/Plater/Plater.lua:2098",
},
["aura_cache_by_name"] = {
["atrophic poison"] = {
83609,
381637,
392388,
},
["butcher cut"] = {
279416,
279426,
},
["concentrated flame"] = {
295368,
295373,
295374,
295375,
295376,
295377,
295378,
295379,
295380,
295384,
299349,
299353,
302564,
},
["sanguine sphere"] = {
163689,
166591,
},
["effusive anima accelerator"] = {
352188,
353248,
353349,
360277,
},
["dream delver"] = {
352786,
353353,
353354,
},
["inspired"] = {
105710,
133461,
133928,
134116,
134454,
134885,
135077,
135414,
135435,
192943,
224693,
235727,
256539,
301972,
343503,
},
["defensive countermeasure"] = {
297133,
299428,
300996,
303941,
},
["frost dominance"] = {
374916,
396072,
396074,
396108,
396109,
},
["lunar empowerment"] = {
211091,
292664,
},
["bolster"] = {
209859,
280001,
},
["whip rage"] = {
29340,
233210,
},
["kevin's wrath"] = {
352520,
352528,
352533,
352534,
},
["strength of the pack"] = {
64369,
64381,
171114,
178149,
178150,
189715,
199184,
199186,
200922,
260057,
341222,
341223,
359768,
365338,
},
["enveloping mist"] = {
124682,
209193,
212414,
227345,
231605,
274062,
317602,
344008,
344240,
},
["insidious chill"] = {
391566,
391568,
},
["earth shield"] = {
379,
974,
32734,
38590,
54479,
54480,
55599,
55600,
56451,
57802,
57803,
58981,
58982,
59471,
59472,
60013,
60014,
66063,
66064,
67530,
67537,
69568,
69569,
69925,
69926,
77905,
79927,
79928,
101649,
101650,
143475,
143479,
145559,
145560,
159981,
159982,
165773,
199355,
199356,
204288,
204290,
226078,
254417,
254425,
268709,
268710,
374066,
374067,
377874,
377875,
383648,
413008,
413010,
},
["flame dominance"] = {
374881,
396056,
396062,
396105,
396106,
},
["crippling poison"] = {
3408,
3409,
25809,
30981,
44289,
115196,
132747,
132748,
169622,
169623,
283648,
283649,
},
["predatory instincts"] = {
389808,
},
["in the spotlight"] = {
227931,
312926,
},
["iron wire"] = {
196861,
256148,
},
["echoing void"] = {
307232,
307236,
317014,
317020,
317022,
317029,
318280,
318485,
318486,
373281,
373304,
373305,
},
["earth dominance"] = {
374917,
396067,
396068,
396085,
396098,
},
["consecration"] = {
26573,
32773,
33559,
36946,
37553,
38385,
41541,
43429,
57798,
59998,
69930,
79966,
81297,
107100,
111365,
153441,
158416,
162642,
165711,
184047,
188370,
190010,
200667,
200678,
200679,
204242,
205228,
216217,
221645,
221730,
233390,
243597,
251151,
251152,
251549,
251550,
264082,
283579,
283582,
283583,
288807,
288808,
288809,
290496,
290497,
290498,
294346,
294347,
327980,
344172,
382484,
387881,
401353,
413267,
},
["deadly poison"] = {
2818,
2823,
3583,
10022,
13582,
21787,
21788,
32970,
32971,
34616,
34655,
34657,
36872,
38519,
38520,
41191,
41192,
41485,
43580,
43581,
56145,
56149,
59479,
59482,
63755,
63756,
67710,
67711,
72329,
82632,
82633,
96648,
113780,
129410,
130980,
130981,
132745,
132746,
145419,
145420,
145421,
177918,
177919,
177920,
289078,
314113,
373774,
377030,
377036,
394324,
394325,
403952,
},
["rescind"] = {
404705,
404711,
},
["ice barrier"] = {
11426,
33245,
69787,
198094,
201565,
240074,
262251,
264458,
267504,
284882,
},
},
["url"] = "https://wago.io/ak3iS95aa/73",
["health_cutoff_upper"] = false,
["aura2_y_offset"] = 1.300003051757813,
["aura_timer_text_anchor"] = {
["x"] = 0.5,
},
["buffs_on_aura2"] = true,
["health_selection_overlay"] = "PlaterFocus",
["expansion_triggerwipe"] = {
[8] = true,
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.8,
0.30196078431373,
0.30196078431373,
1,
},
["first_run2"] = true,
["color_override_colors"] = {
[3] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
[4] = {
1,
0.79607843137255,
0.2078431372549,
},
},
["npc_cache"] = {
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[188100] = {
"Shrieking Whelp",
"The Azure Vault",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[22897] = {
"Summoned Windfury Totem",
"Black Temple",
},
[22929] = {
"Greater Shadowfiend",
"Black Temple",
},
[198081] = {
"Quarry Earthshaper",
"Vault of the Incarnates",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
},
[213434] = {
"Sporbit",
"Fungal Folly",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[190406] = {
"Aqualing",
"Halls of Infusion",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[205759] = {
"Whirling Torrent",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[187593] = {
"Primal Flame",
"Vault of the Incarnates",
},
[200131] = {
"Sha-Touched Guardian",
"Temple of the Jade Serpent",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[219066] = {
"Inflicted Civilian",
"The Rookery",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[201155] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[200388] = {
"Malformed Sha",
"Temple of the Jade Serpent",
},
[201668] = {
"Neltharion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[197831] = {
"Quarry Stonebreaker",
"Vault of the Incarnates",
},
[161241] = {
"Voidweaver Mal'thir",
"The Underrot",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
},
[190923] = {
"Zephyrling",
"Halls of Infusion",
},
[213696] = {
"Molten Scorpid",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[22898] = {
"Supremus",
"Black Temple",
},
[102019] = {
"Stormforged Obliterator",
"Halls of Valor",
},
[161243] = {
"Samh'rek, Beckoner of Chaos",
"The Underrot",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[129526] = {
"Bilge Rat Swabby",
"Freehold",
"enUS",
},
[161244] = {
"Blood of the Corruptor",
"The Underrot",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[197835] = {
"Kaurdyth",
"Vault of the Incarnates",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[184018] = {
"Bromach",
"Uldaman: Legacy of Tyr",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[59598] = {
"Lesser Sha",
"Temple of the Jade Serpent",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[59726] = {
"Peril",
"Temple of the Jade Serpent",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[184019] = {
"Burly Rock-Thrower",
"Uldaman: Legacy of Tyr",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
},
[126969] = {
"Trothak",
"Freehold",
"enUS",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[113536] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[196559] = {
"Volatile Sapling",
"The Azure Vault",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[201934] = {
"Shadowflame Amalgamation",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[101639] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[22963] = {
"Bonechewer Worker",
"Black Temple",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[29264] = {
"Spirit Wolf",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[127484] = {
"Jes Howlis",
"Tol Dagor",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[134390] = {
"Sand-crusted Striker",
"Temple of Sethraliss",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[22964] = {
"Priestess of Delight",
"Black Temple",
},
[116484] = {
"Sigryn",
"Halls of Valor - Scenario",
},
[31216] = {
"Sevmage",
"Shadowmoon Burial Grounds",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[190174] = {
"Hypnosis Bat",
"Operation: Mechagon",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
"enUS",
},
[76057] = {
"Carrion Worm",
"Shadowmoon Burial Grounds",
},
[127488] = {
"Ashvane Flamecaster",
"Tol Dagor",
},
[186338] = {
"Maruuk",
"The Nokhud Offensive",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[115719] = {
"Imp Servant",
"Faronaar",
},
[198878] = {
"Primalist Tempestmaker",
"Vault of the Incarnates",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[191714] = {
"Seeking Stormling",
"Vault of the Incarnates",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[22869] = {
"Illidari Boneslicer",
"Black Temple",
},
[22965] = {
"Devoted Steward",
"Black Temple",
},
[22997] = {
"Flame of Azzinoth",
"Black Temple",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[76444] = {
"Subjugated Soul",
"Shadowmoon Burial Grounds",
},
[125828] = {
"Dibe",
"Atal'Dazar",
"enUS",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"Draenor",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[216541] = {
"Threadmaestro Fothis",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[168949] = {
"Risen Bonesoldier",
"De Other Side",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[184303] = {
"Skittering Crawler",
"Uldaman: Legacy of Tyr",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[204262] = {
"Necrofrost",
"Dawn of the Infinite",
"enUS",
},
[23030] = {
"Dragonmaw Sky Stalker",
"Black Temple",
},
[126983] = {
"Harlan Sweete",
"Freehold",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
},
[23222] = {
"Bonechewer Brawler",
"Black Temple",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[23318] = {
"Ashtongue Rogue",
"Black Temple",
},
[205799] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[195820] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[143622] = {
"Wild Imp",
"Shadowmoon Burial Grounds",
},
[191215] = {
"Tarasek Legionnaire",
"Vault of the Incarnates",
},
[199659] = {
"Warlord Kagni",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[150276] = {
"Heavy Scrapbot",
"Operation: Mechagon",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[127497] = {
"Ashvane Warden",
"Tol Dagor",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[162049] = {
"Vestige of Doubt",
"Sanguine Depths",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[22871] = {
"Teron Gorefiend",
"Black Temple",
},
[138254] = {
"Irontide Powdershot",
"Siege of Boralus",
},
[187638] = {
"Flamescale Tarasek",
"Vault of the Incarnates",
},
[62358] = {
"Corrupt Droplet",
"Temple of the Jade Serpent",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
},
[200944] = {
"Nokhud Fighter",
"The Nokhud Offensive",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[23223] = {
"Bonechewer Spectator",
"Black Temple",
},
[208365] = {
"Aerwynn",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[200945] = {
"Nokhud Warmonger",
"The Nokhud Offensive",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
},
[135699] = {
"Ashvane Jailer",
"Tol Dagor",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[196855] = {
"Braekkas",
"Vault of the Incarnates",
},
[87329] = {
"Raider's Training Dummy",
"Draenor",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[104217] = {
"Talixae Flamewreath",
"Court of Stars",
},
[139284] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[107288] = {
"Vilethorn Sapling",
"Darkheart Thicket",
"enUS",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
},
[223724] = {
"Backfill Barrel",
"Cinderbrew Meadery",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[99868] = {
"Fenryr",
"Halls of Valor",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
"enUS",
},
[104218] = {
"Advisor Melandrus",
"Court of Stars",
},
[190205] = {
"Scorchling",
"Ruby Life Pools",
},
[192764] = {
"Flame Guardian",
"Vault of the Incarnates",
},
[201464] = {
"Cinderstep Weaver",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[195579] = {
"Primal Gust",
"The Nokhud Offensive",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[216561] = {
"Gahn'dante",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
},
[139799] = {
"Ironhull Apprentice",
"Shrine of the Storm",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[195580] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[201466] = {
"Cinderstep Igniter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[210423] = {
"Keeper of the Dream",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[187139] = {
"Crystal Thrasher",
"The Azure Vault",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[192769] = {
"Thondrozus",
"Vault of the Incarnates",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[102430] = {
"Tarspitter Slug",
"Neltharion's Lair",
"enUS",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[22841] = {
"Shade of Akama",
"Black Temple",
},
[22873] = {
"Coilskar General",
"Black Temple",
},
[201471] = {
"Earthborne Charger",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
},
[136735] = {
"Ashvane Marine",
"Tol Dagor",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[210173] = {
"Zaqali Steelshaper",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[127124] = {
"Freehold Barhand",
"Freehold",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
},
[112668] = {
"Infernal Imp",
"Court of Stars",
},
[138019] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[189707] = {
"Chaotic Mote",
"Castle Nathria",
},
[226809] = {
"Clump O' Wax",
"New Candle, New Hope",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[96677] = {
"Steeljaw Grizzly",
"Halls of Valor",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
},
[22874] = {
"Coilskar Harpooner",
"Black Temple",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[201736] = {
"Sundered Arcanist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
},
[210436] = {
"Flowering Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
"enUS",
},
[192781] = {
"Ore Elemental",
"Neltharus",
"enUS",
},
[118044] = {
"Nether Horror",
"Artifact - Acquisition - Tank",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[210437] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[187154] = {
"Arcane Curator",
"The Azure Vault",
},
[43878] = {
"Grand Vizier Ertan",
"The Vortex Pinnacle",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
},
[134701] = {
"Blood Effigy",
"The Underrot",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[186644] = {
"Leymor",
"The Azure Vault",
},
[199182] = {
"Jumping Spiderling",
"Vault of the Incarnates",
},
[193553] = {
"Nokhud Warhound",
"The Nokhud Offensive",
},
[216582] = {
"Kx",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
"enUS",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
"enUS",
},
[22875] = {
"Coilskar Sea-Caller",
"Black Temple",
},
[193555] = {
"Nokhud Villager",
"The Nokhud Offensive",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[216584] = {
"Nerubian Captain",
"Earthcrawl Mines",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[190485] = {
"Erkhart Stormvein",
"Ruby Life Pools",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[187159] = {
"Shrieking Whelp",
"The Azure Vault",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[216329] = {
"Congealed Droplet",
"City of Threads",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
},
[191510] = {
"Smoldering Hellion",
"Vault of the Incarnates",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[75829] = {
"Nhallish",
"Shadowmoon Burial Grounds",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[201746] = {
"Sundered Naturalist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[202258] = {
"Djaradin Skullcrusher",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[155433] = {
"Void-Touched Emissary",
"Temple of Sethraliss",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[202259] = {
"Djaradin Wallclimber",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[198933] = {
"Iridikron",
"Dawn of the Infinite",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[197398] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[46375] = {
"Rowdy Troublemaker",
"Stormwind Stockade",
},
[189722] = {
"Gulping Goliath",
"Halls of Infusion",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[131383] = {
"Sporecaller Zancha",
"The Underrot",
"enUS",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[205843] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[219149] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[192794] = {
"Nokhud Beastmaster",
"The Nokhud Offensive",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[202262] = {
"Blazing Dreadsquall",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
},
[22844] = {
"Ashtongue Battlelord",
"Black Temple",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
},
[222221] = {
"Swarmspike",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
},
[46248] = {
"Riverpaw Basher",
"Stormwind Stockade",
},
[23196] = {
"Bonechewer Behemoth",
"Black Temple",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[202264] = {
"Primal Lava Elemental",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[197147] = {
"Qalashi Honor Guard",
"Vault of the Incarnates",
},
[23420] = {
"Essence of Anger",
"Black Temple",
},
[201753] = {
"Sundered Destroyer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189727] = {
"Khajin the Unyielding",
"Halls of Infusion",
},
[83765] = {
"Grom'kar Footsoldier",
"Iron Docks",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[197148] = {
"Qalashi Lavabearer",
"Vault of the Incarnates",
},
[207639] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[190496] = {
"Terros",
"Vault of the Incarnates",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[189729] = {
"Primal Tsunami",
"Halls of Infusion",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[222974] = {
"Hungry Scarab",
"City of Threads",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[46249] = {
"Riverpaw Slayer",
"Stormwind Stockade",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[201756] = {
"Brina",
"Dawn of the Infinite",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[107435] = {
"Suspicious Noble",
"Court of Stars",
},
[222700] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[75451] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[189988] = {
"Thing From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[192803] = {
"War Ohuna",
"The Nokhud Offensive",
},
[156213] = {
"Coldheart Guardian",
"Torghast, Tower of the Damned",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[75452] = {
"Bonemaw",
"Shadowmoon Burial Grounds",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[196642] = {
"Hungry Lasher",
"Algeth'ar Academy",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[46250] = {
"Riverpaw Poacher",
"Stormwind Stockade",
},
[118032] = {
"Tormenting Eye",
"Artifact - Acquisition - Tank",
"enUS",
},
[193572] = {
"Nokhud Warsmith",
"The Nokhud Offensive",
},
[195875] = {
"Desecrated Bakar",
"The Nokhud Offensive",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[151353] = {
"Mawrat",
"Torghast, Tower of the Damned",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[186664] = {
"Stonevault Ambusher",
"Uldaman: Legacy of Tyr",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[23421] = {
"Ashtongue Channeler",
"Black Temple",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[100529] = {
"Hatespawn Slime",
"Darkheart Thicket",
"enUS",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[199715] = {
"Nokhud Battleguard",
"The Nokhud Offensive",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
"enUS",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
},
[196645] = {
"Desecrated Bakar",
"The Nokhud Offensive",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216560] = {
"Al'haggro",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[199716] = {
"Nokhud Brute",
"The Nokhud Offensive",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[75966] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[46251] = {
"Riverpaw Looter",
"Stormwind Stockade",
},
[222222] = {
"Swarmspike",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[46379] = {
"Vicious Thug",
"Stormwind Stockade",
},
[217610] = {
"Deviant Skardyn",
"Hall of Awakening",
"enUS",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
},
[216544] = {
"Sureki String Leader",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[199718] = {
"Nokhud Huntmaster",
"The Nokhud Offensive",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[118698] = {
"Hand from Beyond",
"Dread Scar Rift - Warlock Scenario Platform",
},
[202789] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
},
[199719] = {
"Nokhud Wardog",
"The Nokhud Offensive",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[22878] = {
"Aqueous Lord",
"Black Temple",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[22846] = {
"Ashtongue Stormcaller",
"Black Temple",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[45932] = {
"Skyfall Star",
"The Vortex Pinnacle",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[135240] = {
"Soul Essence",
"Kul Tiras",
"enUS",
},
[131402] = {
"Underrot Tick",
"The Underrot",
"enUS",
},
[46252] = {
"Riverpaw Shaman",
"Stormwind Stockade",
},
[58965] = {
"Laz-tarash",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[205611] = {
"Molten Hound",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
},
[220193] = {
"Sureki Venomblade",
"City of Threads",
"enUS",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[219361] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[117933] = {
"Inquisitor Variss",
"Artifact - Acquisition - Tank",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189233] = {
"Caustic Spiderling",
"Vault of the Incarnates",
},
[201774] = {
"Essence of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[46381] = {
"Shifty Thief",
"Stormwind Stockade",
},
[212483] = {
"Gnarled Roots",
"The Everbloom",
"enUS",
},
[46382] = {
"Petty Criminal",
"Stormwind Stockade",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
},
[217799] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
"enUS",
},
[201773] = {
"Eternal Blaze",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[211241] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[97081] = {
"King Bjorn",
"Halls of Valor",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[194745] = {
"Rotfang Hyena",
"Brackenhide Hollow",
"enUS",
},
[22847] = {
"Ashtongue Primalist",
"Black Temple",
},
[22879] = {
"Shadowmoon Reaver",
"Black Temple",
},
[95674] = {
"Fenryr",
"Halls of Valor",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[127019] = {
"Training Dummy",
"Freehold",
"enUS",
},
[130437] = {
"Mine Rat",
"The MOTHERLODE!!",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[95675] = {
"God-King Skovald",
"Halls of Valor",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[134994] = {
"Spectral Headhunter",
"Kings' Rest",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[201522] = {
"Summitshaper Lorac",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[203825] = {
"Voracious Magma Worm",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[210478] = {
"Infected Beast",
"Fungal Folly",
"enUS",
},
[204536] = {
"Blight Chunk",
"Dawn of the Infinite",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[118065] = {
"Smoldering Infernal",
"Artifact - Acquisition - Tank",
"enUS",
},
[95676] = {
"Odyn",
"Halls of Valor",
},
[203826] = {
"Colossal Draconic Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[210479] = {
"Carnivorous Lasher",
"Fungal Folly",
"enUS",
},
[184124] = {
"Sentinel Talondras",
"Uldaman: Legacy of Tyr",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[92350] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[135764] = {
"Explosive Totem",
"Kings' Rest",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[46383] = {
"Randolph Moloch",
"Stormwind Stockade",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[203831] = {
"Crystalline Guardian",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[213743] = {
"Enraged Skardyn",
"Hall of Awakening",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[55659] = {
"Wild Imp",
"Shadowmoon Burial Grounds",
},
[214576] = {
"Iron-Runed Protector",
"Hall of Awakening",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[22848] = {
"Storm Fury",
"Black Temple",
},
[22880] = {
"Shadowmoon Champion",
"Black Temple",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[23226] = {
"Illidari Elite",
"Black Temple",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[152009] = {
"Malfunctioning Scrapbot",
"Operation: Mechagon",
},
[205366] = {
"Time-Lost Wakethrasher",
"Dawn of the Infinite",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[23232] = {
"Mutant War Hound",
"Black Temple",
},
[187967] = {
"Sennarth",
"Vault of the Incarnates",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[130026] = {
"Bilge Rat Seaspeaker",
"Tol Dagor",
},
[81864] = {
"Dreadpetal",
"Draenor",
"enUS",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
"enUS",
},
[23215] = {
"Ashtongue Sorcerer",
"Black Temple",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
},
[135002] = {
"Demonic Tyrant",
"Shadowmoon Burial Grounds",
},
[104822] = {
"Flame of Woe",
"Halls of Valor",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[201467] = {
"Stonebreath Summoner",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[97087] = {
"Valarjar Champion",
"Halls of Valor",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[194622] = {
"Scorchling",
"Ruby Life Pools",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[22959] = {
"Ardent Host",
"Black Temple",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[205629] = {
"Crazed Experiment",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
"enUS",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[205365] = {
"Time-Lost Tidehunter",
"Dawn of the Infinite",
"enUS",
},
[208441] = {
"Water Elemental",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[130025] = {
"Irontide Thug",
"Tol Dagor",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[116496] = {
"Runeseer Faljar",
"Halls of Valor - Scenario",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[184134] = {
"Scavenging Leaper",
"Uldaman: Legacy of Tyr",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[205628] = {
"Twisted Elementium",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[201790] = {
"Loszkeleth",
"Dawn of the Infinite",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[22849] = {
"Ashtongue Feral Spirit",
"Black Temple",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[22945] = {
"Shadowmoon Blood Mage",
"Black Temple",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[81737] = {
"Unchecked Growth",
"The Everbloom",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[185584] = {
"Blasphemy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[223541] = {
"Stolen Loader",
"Earthcrawl Mines",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[118638] = {
"Shadowy Vestige",
"Dread Scar Rift - Warlock Scenario Platform",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[115641] = {
"Smoldering Imp",
"Faronaar",
},
[208957] = {
"Zelgius",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[17252] = {
"Klekferil",
"Shadowmoon Burial Grounds",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
"enUS",
},
[214075] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[116409] = {
"Raest Magespear",
"Dread Scar Rift - Warlock Scenario Platform",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[194373] = {
"Brackenhide Gnoll",
"Brackenhide Hollow",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[189363] = {
"Infected Lasher",
"Brackenhide Hollow",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[192519] = {
"Monstrous Mud",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[207638] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[216583] = {
"Chittering Fearmonger",
"Earthcrawl Mines",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[196117] = {
"Crystal Construct",
"The Azure Vault",
},
[195399] = {
"Curious Swoglet",
"Halls of Infusion",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
},
[115643] = {
"Imp Servant",
"Faronaar",
},
[196679] = {
"Frozen Shroud",
"Vault of the Incarnates",
},
[77006] = {
"Corpse Skitterling",
"Shadowmoon Burial Grounds",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[226617] = {
"Snake",
"Fungal Folly",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[204560] = {
"Incorporeal Being",
"The Vortex Pinnacle",
"enUS",
},
[19668] = {
"Shadowfiend",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[119098] = {
"Thing of Nightmare",
"Dread Scar Rift - Warlock Scenario Platform",
},
[211777] = {
"Spitfire Fusetender",
"Kriegval's Rest",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[201469] = {
"Restless Pebble",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[22946] = {
"Shadowmoon War Hound",
"Black Temple",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206068] = {
"Temporal Fusion",
"Dawn of the Infinite",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
},
[46260] = {
"Searing Destroyer",
"Stormwind Stockade",
},
[205638] = {
"Sundered Flame Banner",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[190128] = {
"Zul'gamux",
"Operation: Mechagon",
},
[226620] = {
"Rat",
"Earthcrawl Mines",
"enUS",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[23394] = {
"Promenade Sentinel",
"Black Temple",
},
[194896] = {
"Primal Stormshield",
"The Nokhud Offensive",
},
[213829] = {
"Candleclaw Soilseer",
"New Candle, New Hope",
"enUS",
},
[220065] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[201470] = {
"Flickering Flame",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[191311] = {
"Infinite Whelp",
"Uldaman: Legacy of Tyr",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[192337] = {
"Void Tendril",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[211272] = {
"Lieutenant Lunker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[211273] = {
"Sizzling Swogger",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[203594] = {
"Lumbering Boulder",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[91332] = {
"Stoneclaw Hunter",
"Neltharion's Lair",
"enUS",
},
[223646] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[213828] = {
"Candleclaw Pyromancer",
"Khaz Algar",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[46261] = {
"Enraged Fire Elemental",
"Stormwind Stockade",
},
[191313] = {
"Bubbling Sapling",
"The Azure Vault",
},
[201738] = {
"Renewed Hatchling",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[210507] = {
"Stalwart Bristlebruin",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[204337] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[225601] = {
"Mereldar Citizen",
"The Dawnbreaker",
"enUS",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[213831] = {
"Candleclaw Underboss",
"Khaz Algar",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[226625] = {
"Cave Skipper",
"Fungal Folly",
"enUS",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[174773] = {
"Spiteful Shade",
"Spires of Ascension",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[213576] = {
"Verdant Boughwalker",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[205644] = {
"Oozing Sludge",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189472] = {
"Qalashi Lavabearer",
"Neltharus",
"enUS",
},
[204109] = {
"Cavernous Shrieker",
"Kriegval's Rest",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213835] = {
"Candleclaw Scrambler",
"Khaz Algar",
"enUS",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
},
[22883] = {
"Aqueous Spawn",
"Black Temple",
},
[213833] = {
"Candleclaw Knight",
"Khaz Algar",
"enUS",
},
[22947] = {
"Mother Shahraz",
"Black Temple",
},
[194389] = {
"Lava Spawn",
"Neltharus",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[198995] = {
"Chronikar",
"Dawn of the Infinite",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[196946] = {
"Lurking Lunker",
"Vault of the Incarnates",
},
[217672] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[213834] = {
"Candleclaw Mole",
"Khaz Algar",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[23235] = {
"Bonechewer Blade Fury",
"Black Temple",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[196947] = {
"Goal of the Rushing Winds",
"Algeth'ar Academy",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[23523] = {
"Ashtongue Elementalist",
"Black Temple",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[23028] = {
"Bonechewer Taskmaster",
"Black Temple",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
"enUS",
},
[97202] = {
"Olmyr the Enlightened",
"Halls of Valor",
},
[210510] = {
"Flimflam the Cowardly",
"Darkflame Cleft",
"enUS",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[131445] = {
"Block Warden",
"Tol Dagor",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[201792] = {
"Ahnzon",
"Dawn of the Infinite",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[185691] = {
"Vicious Hyena",
"Brackenhide Hollow",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[194647] = {
"Thunder Caller",
"Vault of the Incarnates",
},
[198997] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[46263] = {
"Slag Fury",
"Stormwind Stockade",
},
[208461] = {
"Scorching Roots",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[105636] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[210512] = {
"Ashen Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[193558] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[205651] = {
"Bubbling Slime",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[188252] = {
"Melidrussa Chillworn",
"Ruby Life Pools",
},
[23172] = {
"Hand of Gorefiend",
"Black Temple",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[141939] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[130404] = {
"Vermin Trapper",
"Freehold",
"enUS",
},
[198874] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186206] = {
"Cruel Bonecrusher",
"Brackenhide Hollow",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[22884] = {
"Leviathan",
"Black Temple",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[22948] = {
"Gurtogg Bloodboil",
"Black Temple",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[191243] = {
"Wild Lasher",
"Brackenhide Hollow",
"enUS",
},
[198489] = {
"Denizen of the Dream",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216221] = {
"Earthen-Ward Sentinel",
"Hall of Awakening",
"enUS",
},
[137591] = {
"Healing Tide Totem",
"Kings' Rest",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
},
[187231] = {
"Wither Biter",
"Brackenhide Hollow",
"enUS",
},
[129598] = {
"Freehold Pack Mule",
"Freehold",
"enUS",
},
[23236] = {
"Bonechewer Shield Disciple",
"Black Temple",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[23374] = {
"Ashtongue Stalker",
"Black Temple",
},
[46262] = {
"Rumbling Earth",
"Stormwind Stockade",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[101679] = {
"Dreadsoul Poisoner",
"Darkheart Thicket",
"enUS",
},
[116499] = {
"Jarl Velbrand",
"Halls of Valor - Scenario",
},
[23524] = {
"Ashtongue Spiritbinder",
"Black Temple",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[98035] = {
"Dreadstalker",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[205656] = {
"Sundered Chemist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[129599] = {
"Cutwater Knife Juggler",
"Freehold",
"enUS",
},
[97219] = {
"Solsten",
"Halls of Valor",
},
[210518] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[43875] = {
"Asaad",
"The Vortex Pinnacle",
"enUS",
},
[128551] = {
"Irontide Mastiff",
"Freehold",
"enUS",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[224663] = {
"Mesmerized Flyer",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[217684] = {
"Deranged Skardyn",
"Hall of Awakening",
"enUS",
},
[23237] = {
"Bonechewer Blood Prophet",
"Black Temple",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[197982] = {
"Storm Warrior",
"Ruby Life Pools",
},
[98384] = {
"Razormouth",
"Neltharion's Lair",
"enUS",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
},
[207450] = {
"Fungal Stabber",
"Fungal Folly",
"enUS",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[187238] = {
"Witherling",
"Brackenhide Hollow",
"enUS",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[129601] = {
"Cutwater Harpooner",
"Freehold",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[22853] = {
"Illidari Defiler",
"Black Temple",
},
[22885] = {
"Dragon Turtle",
"Black Temple",
},
[22917] = {
"Illidan Stormrage",
"Black Temple",
},
[22949] = {
"Gathios the Shatterer",
"Black Temple",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[194147] = {
"Volcanius",
"Vault of the Incarnates",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[201465] = {
"Cinderstep Melter",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[207453] = {
"Fungal Rotspreader",
"Fungal Folly",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[204127] = {
"Kobold Taskfinder",
"Kriegval's Rest",
"enUS",
},
[196712] = {
"Nullification Device",
"Halls of Infusion",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[23397] = {
"Illidari Blood Lord",
"Black Temple",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[208478] = {
"Volcoross",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[202593] = {
"Monstrous Mud",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
"enUS",
},
[216155] = {
"Skittering Ambusher",
"Earthcrawl Mines",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[217435] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Fungal Folly",
"enUS",
},
[187242] = {
"Tarasek Looter",
"The Azure Vault",
},
[99922] = {
"Ebonclaw Packmate",
"Halls of Valor",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
},
[198757] = {
"Void Lasher",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[104273] = {
"Jazshariu",
"Court of Stars",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[100818] = {
"Bellowing Idol",
"Neltharion's Lair",
"enUS",
},
[135816] = {
"Vilefiend",
"Shadowmoon Burial Grounds",
},
[101074] = {
"Hatespawn Whelpling",
"Darkheart Thicket",
"enUS",
},
[188011] = {
"Primal Terrasentry",
"Ruby Life Pools",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[110063] = {
"Beast",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
},
[208994] = {
"Infected Lasher",
"Brackenhide Hollow",
"enUS",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[207459] = {
"Fungal Rotcaster",
"Fungal Folly",
"enUS",
},
[150712] = {
"Trixie Tazer",
"Operation: Mechagon",
},
[203877] = {
"Kobold Thwacker",
"Kriegval's Rest",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[228953] = {
"Skittering Intruder",
"Earthcrawl Mines",
"enUS",
},
[59051] = {
"Strife",
"Temple of the Jade Serpent",
},
[104274] = {
"Baalgar the Watchful",
"Court of Stars",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
},
[22950] = {
"High Nethermancer Zerevor",
"Black Temple",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[201320] = {
"Rashok",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[126847] = {
"Captain Raoul",
"Freehold",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
},
[23398] = {
"Angered Soul Fragment",
"Black Temple",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[58319] = {
"Lesser Sha",
"Pandaria",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[104275] = {
"Imacu'tya",
"Court of Stars",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[57080] = {
"Corrupted Scroll",
"Temple of the Jade Serpent",
},
[205672] = {
"Flame Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[62005] = {
"Beast",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
},
[201579] = {
"Magmorax",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[211306] = {
"Fiery Vines",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213143] = {
"Manifested Dream",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[189299] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[189555] = {
"Arcane Attendant",
"The Azure Vault",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[104277] = {
"Legion Hound",
"Court of Stars",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[195697] = {
"Thunderbeast Rider",
"The Nokhud Offensive",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[22855] = {
"Illidari Nightlord",
"Black Temple",
},
[207468] = {
"Gnarled Reviver",
"Fungal Folly",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[22951] = {
"Lady Malande",
"Black Temple",
},
[189813] = {
"Dathea, Ascended",
"Vault of the Incarnates",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[23047] = {
"Shadowmoon Soldier",
"Black Temple",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[23111] = {
"Shadowy Construct",
"Black Temple",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[23239] = {
"Bonechewer Combatant",
"Black Temple",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[95833] = {
"Hyrja",
"Halls of Valor",
},
[23399] = {
"Suffering Soul Fragment",
"Black Temple",
},
[22962] = {
"Mistress of Woe",
"Black Temple",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
"enUS",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[198142] = {
"Quarry Earthshaper",
"Vault of the Incarnates",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
},
[199028] = {
"Glacias",
"Vault of the Incarnates",
},
[130024] = {
"Soggy Shiprat",
"Freehold",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[22877] = {
"Coilskar Wrangler",
"Black Temple",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[200035] = {
"Carrion Worm",
"Shadowmoon Burial Grounds",
},
[199029] = {
"Cyclas",
"Vault of the Incarnates",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[208241] = {
"Ankle Biter",
"Earthcrawl Mines",
"enUS",
},
[56762] = {
"Yu'lon",
"Temple of the Jade Serpent",
},
[202612] = {
"Cliffkeeper Bouldani",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[199030] = {
"Loamas",
"Vault of the Incarnates",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[208242] = {
"Nerubian Darkcaster",
"Earthcrawl Mines",
"enUS",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
},
[202613] = {
"Portalkeeper Cimbra",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[210290] = {
"Firelands Flameguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[208243] = {
"Nerubian Slasher",
"Earthcrawl Mines",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[192329] = {
"Territorial Eagle",
"Algeth'ar Academy",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[213873] = {
"Waxy Globule",
"New Candle, New Hope",
"enUS",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[172021] = {
"Coldheart Automaton",
"Torghast, Tower of the Damned",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[208245] = {
"Skittering Swarmer",
"Earthcrawl Mines",
"enUS",
},
[198266] = {
"Pouncing Broodswarmer",
"Vault of the Incarnates",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[127480] = {
"Stinging Parasite",
"Tol Dagor",
},
[23400] = {
"Illidari Archon",
"Black Temple",
},
[210293] = {
"Firelands Destroyer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
},
[81638] = {
"Aqueous Globule",
"The Everbloom",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
},
[126928] = {
"Irontide Corsair",
"Freehold",
"enUS",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
},
[210294] = {
"Flamespreader",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[201560] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
},
[22845] = {
"Ashtongue Mystic",
"Black Temple",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[211063] = {
"Fungal Podling",
"Fungal Folly",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[210295] = {
"Flamewaker Infernoguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[22881] = {
"Aqueous Surger",
"Black Temple",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[129232] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
},
[96608] = {
"Ebonclaw Worg",
"Halls of Valor",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[202108] = {
"Djaradin Dragonhunter",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[207482] = {
"Invasive Sporecap",
"Kriegval's Rest",
"enUS",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
},
[202109] = {
"Djaradin Commander",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[130896] = {
"Blackout Barrel",
"Freehold",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[92387] = {
"Drums of War",
"Neltharion's Lair",
"enUS",
},
[96609] = {
"Gildedfur Stag",
"Halls of Valor",
},
[45926] = {
"Servant of Asaad",
"The Vortex Pinnacle",
"enUS",
},
[205820] = {
"Crawling Goo",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[210810] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[190340] = {
"Refti Defender",
"10.0 Dragon Isles",
},
[22882] = {
"Shadowmoon Deathshaper",
"Black Temple",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[213881] = {
"Candleclaw Bootlicker",
"New Candle, New Hope",
"enUS",
},
[22953] = {
"Wrathbone Flayer",
"Black Temple",
},
[127482] = {
"Sewer Vicejaw",
"Tol Dagor",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[23049] = {
"Shadowmoon Weapon Master",
"Black Temple",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[189318] = {
"Infected Bear",
"Brackenhide Hollow",
"enUS",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[190342] = {
"Containment Apparatus",
"10.0 Dragon Isles",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[161124] = {
"Urg'roth, Breaker of Heroes",
"The Underrot",
},
[23401] = {
"Hungering Soul Fragment",
"Black Temple",
},
[213883] = {
"Dripear the Waxy",
"New Candle, New Hope",
"enUS",
},
[95843] = {
"King Haldor",
"Halls of Valor",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[96611] = {
"Angerhoof Bull",
"Halls of Valor",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
"enUS",
},
[202257] = {
"Djaradin Magmashaper",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[197509] = {
"Primal Thundercloud",
"Ruby Life Pools",
},
[199812] = {
"Zaqali Wallclimber",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
},
[153755] = {
"Naeno Megacrash",
"Operation: Mechagon",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
},
[192761] = {
"Iskakx",
"Vault of the Incarnates",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[186615] = {
"The Raging Tempest",
"The Nokhud Offensive",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[83392] = {
"Rampaging Clefthoof",
"Iron Docks",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[190348] = {
"Primalist Ravager",
"10.0 Dragon Isles",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[135846] = {
"Sand-Crusted Striker",
"Temple of Sethraliss",
},
[220029] = {
"Gearsweep",
"Hall of Awakening",
"enUS",
},
[22957] = {
"Mistress of Dementia",
"Black Temple",
},
[202375] = {
"Zskarn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[22876] = {
"Coilskar Soothsayer",
"Black Temple",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[217225] = {
"Machinist Protector",
"Hall of Awakening",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[22954] = {
"Illidari Fearbringer",
"Black Temple",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[223357] = {
"Sureki Conscript",
"City of Threads",
"enUS",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[215177] = {
"Waximus",
"New Candle, New Hope",
"enUS",
},
[101476] = {
"Molten Charskin",
"Neltharion's Lair",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[23402] = {
"Illidari Battle-mage",
"Black Temple",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[23498] = {
"Parasitic Shadowfiend",
"Black Temple",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[200761] = {
"Wild Ohuna",
"The Nokhud Offensive",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[105699] = {
"Mana Saber",
"Court of Stars",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
},
[139946] = {
"Heart Guardian",
"Temple of Sethraliss",
},
[209800] = {
"Cycle Warden",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[100713] = {
"Rockbait Fisher",
"Neltharion's Lair",
"enUS",
},
[184693] = {
"Living Flame",
"Vault of the Incarnates",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[23018] = {
"Shadowmoon Houndmaster",
"Black Temple",
},
[139800] = {
"Galecaller Apprentice",
"Shrine of the Storm",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[136391] = {
"Heart Guardian",
"Temple of Sethraliss",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[187894] = {
"Infused Whelp",
"Ruby Life Pools",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[200936] = {
"Living Flame",
"Vault of the Incarnates",
},
[22952] = {
"Veras Darkshadow",
"Black Temple",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[130521] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[22955] = {
"Charming Patron",
"Black Temple",
},
[195821] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[81279] = {
"Grom'kar Flameslinger",
"Iron Docks",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[23083] = {
"Shadowmoon Riding Hound",
"Black Temple",
},
[211339] = {
"Dream Seedling",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[23147] = {
"Shadowmoon Grunt",
"Black Temple",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[134058] = {
"Galecaller Faye",
"Shrine of the Storm",
},
[132530] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[115638] = {
"Agatha",
"Faronaar",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[23339] = {
"Illidari Heartseeker",
"Black Temple",
},
[115402] = {
"Bishop",
"Return to Karazhan",
},
[23403] = {
"Illidari Assassin",
"Black Temple",
},
[130522] = {
"Freehold Shipmate",
"Freehold",
"enUS",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[75509] = {
"Sadana Bloodfury",
"Shadowmoon Burial Grounds",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
},
[97084] = {
"King Tor",
"Halls of Valor",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[184986] = {
"Kurog Grimtotem",
"Vault of the Incarnates",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[205968] = {
"Fragment of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
"enUS",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[105703] = {
"Mana Wyrm",
"Court of Stars",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[97197] = {
"Valarjar Purifier",
"UNKNOWN",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[205673] = {
"Sundered Devourer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[190586] = {
"Earth Breaker",
"Vault of the Incarnates",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[23337] = {
"Illidari Centurion",
"Black Temple",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[196482] = {
"Overgrown Ancient",
"Algeth'ar Academy",
"enUS",
},
[205971] = {
"Fragment of Fire",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[23330] = {
"Dragonmaw Wind Reaver",
"Black Temple",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[76407] = {
"Ner'zhul",
"Shadowmoon Burial Grounds",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[207481] = {
"Spinshroom",
"Fungal Folly",
"enUS",
},
[135759] = {
"Earthwall Totem",
"Kings' Rest",
},
[105705] = {
"Bound Energy",
"Court of Stars",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[213905] = {
"Animated Darkness",
"The Dawnbreaker",
"enUS",
},
[22956] = {
"Priestess of Torment",
"Black Temple",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[98285] = {
"Smashum Grabb",
"Tanaan Jungle",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
"enUS",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[189893] = {
"Infused Whelp",
"Ruby Life Pools",
},
[203927] = {
"Failed Prototype",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[129758] = {
"Irontide Grenadier",
"Freehold",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[190366] = {
"Curious Swoglet",
"Halls of Infusion",
},
[201413] = {
"Inflammable Wall",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[205671] = {
"Shadow Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[23436] = {
"Image of Dementia",
"Black Temple",
},
[187772] = {
"Opalfang",
"Vault of the Incarnates",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[210288] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[75715] = {
"Reanimated Ritual Bones",
"Shadowmoon Burial Grounds",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[155434] = {
"Emissary of the Tides",
"Temple of Sethraliss",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[201472] = {
"Torch Revenant",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[94960] = {
"Hymdall",
"Halls of Valor",
},
[186616] = {
"Granyth",
"The Nokhud Offensive",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
},
[208239] = {
"Skittering Menace",
"Earthcrawl Mines",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
},
[202256] = {
"Djaradin Lavamancer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[102253] = {
"Understone Demolisher",
"Neltharion's Lair",
"enUS",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[82039] = {
"Rockspine Stinger",
"Draenor",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[104918] = {
"Vigilant Duskwatch",
"Court of Stars",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[168365] = {
"Fungret Shroomtender",
"Plaguefall",
},
[130400] = {
"Irontide Crusher",
"Freehold",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
},
[22887] = {
"High Warlord Naj'entus",
"Black Temple",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[212327] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[186227] = {
"Monstrous Decay",
"Brackenhide Hollow",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[132481] = {
"Kul Tiran Vanguard",
"Siege of Boralus",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[197793] = {
"Awakened Juggernaut",
"Vault of the Incarnates",
},
[202824] = {
"Erratic Remnant",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[194467] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[203878] = {
"Kobold Mystic",
"Kriegval's Rest",
"enUS",
},
[96934] = {
"Valarjar Trapper",
"Halls of Valor",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[23469] = {
"Enslaved Soul",
"Black Temple",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[194469] = {
"Wither Slasher",
"Brackenhide Hollow",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[207454] = {
"Fungal Gutter",
"Fungal Folly",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
"enUS",
},
[22939] = {
"Temple Acolyte",
"Black Temple",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[155432] = {
"Enchanted Emissary",
"Temple of Sethraliss",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[129699] = {
"Ludwig Von Tortollan",
"Freehold",
"enUS",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
},
[52019] = {
"Skyfall Nova",
"The Vortex Pinnacle",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[203939] = {
"Animation Fluid",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[198310] = {
"Flame Tarasek",
"Vault of the Incarnates",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[54983] = {
"Treant",
"Waycrest Manor",
"enUS",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
},
[199916] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[141938] = {
"Ashvane Sniper",
"Siege of Boralus",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[189492] = {
"Raszageth",
"Vault of the Incarnates",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[198996] = {
"Manifested Timeways",
"Dawn of the Infinite",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[196694] = {
"Arcane Forager",
"Algeth'ar Academy",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[22894] = {
"Cyclone Totem",
"Black Temple",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[197801] = {
"Awakened Terrasentry",
"Vault of the Incarnates",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
},
[192481] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[155094] = {
"Mechagon Trooper",
"Operation: Mechagon",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[205478] = {
"Conduit Guardian",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205734] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
"enUS",
},
[213577] = {
"Spitfire Charger",
"Kriegval's Rest",
"enUS",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193709] = {
"Primalist Earthwarden",
"Vault of the Incarnates",
},
[134602] = {
"Shrouded Fang",
"Temple of Sethraliss",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[96247] = {
"Vileshard Crawler",
"Neltharion's Lair",
"enUS",
},
[213830] = {
"Candleclaw Kobold",
"Khaz Algar",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[91002] = {
"Rotdrool Grabber",
"Neltharion's Lair",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[133663] = {
"Fanatical Headhunter",
"The Underrot",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
"enUS",
},
[205737] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[118637] = {
"Shadowy Fiend",
"Dread Scar Rift - Warlock Scenario Platform",
},
[26125] = {
"Risen Ghoul",
"Shadowmoon Burial Grounds",
},
[127119] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[194991] = {
"Oathsworn Vanguard",
"Vault of the Incarnates",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
"enUS",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[116410] = {
"Karam Magespear",
"Dread Scar Rift - Warlock Scenario Platform",
},
[202814] = {
"Twisted Aberration",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[201468] = {
"Stonebreath Landslider",
"10.1 Zaralek Caverns - Chapter 1 Scenario",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[216578] = {
"Swarm-Maven Donmiss",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[416] = {
"Huknagma",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216487] = {
"Skardyn Remnants",
"Hall of Awakening",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[137458] = {
"Rotting Spore",
"The Underrot",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
"enUS",
},
[136399] = {
"Vicious Hellhound",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[197298] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[203951] = {
"Kobold Skullface",
"Kriegval's Rest",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
"enUS",
},
[62982] = {
"Mindbender",
"Waycrest Manor",
"enUS",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
"enUS",
},
[23375] = {
"Shadow Demon",
"Black Temple",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[132051] = {
"Blood Tick",
"The Underrot",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[113197] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
"enUS",
},
[130027] = {
"Ashvane Marine",
"Tol Dagor",
},
[165189] = {
"Cat",
"Shadowmoon Burial Grounds",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[81283] = {
"Grom'kar Footsoldier",
"Iron Docks",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
},
[219874] = {
"High Speaker's Construct",
"Hall of Awakening",
"enUS",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[194999] = {
"Volatile Spark",
"Vault of the Incarnates",
},
[206063] = {
"Temporal Deviation",
"Dawn of the Infinite",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[136404] = {
"Bilescourge",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196111] = {
"Pit Lord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[105720] = {
"Understone Drudge",
"Neltharion's Lair",
"enUS",
},
[135246] = {
"\"Stabby\" Lottie",
"The Rotting Mire (Islands 9)",
},
[97788] = {
"Storm Drake",
"Halls of Valor",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[129550] = {
"Bilge Rat Padfoot",
"Freehold",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[217353] = {
"Master Machinist Dunstan",
"Hall of Awakening",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
"enUS",
},
[136406] = {
"Shivarra",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
},
[22896] = {
"Ashtongue Searing Totem",
"Black Temple",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[22960] = {
"Dragonmaw Wyrmcaller",
"Black Temple",
},
[84499] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[199353] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[23216] = {
"Ashtongue Defender",
"Black Temple",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[216554] = {
"Sureki String Conductor",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[219912] = {
"Crawler",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[136665] = {
"Ashvane Spotter",
"Tol Dagor",
},
[126832] = {
"Skycap'n Kragg",
"Freehold",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[213771] = {
"High Speaker Eirich",
"Hall of Awakening",
"enUS",
},
[216555] = {
"Heelripper",
"11.0 - Campaign Finale Scenario",
"enUS",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[127486] = {
"Ashvane Officer",
"Tol Dagor",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[133852] = {
"Living Rot",
"The Underrot",
"enUS",
},
[190245] = {
"Broodkeeper Diurna",
"Vault of the Incarnates",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[6112] = {
"Windfury Totem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[217299] = {
"Ostiary Wystan",
"Hall of Awakening",
"enUS",
},
},
["indicator_anchor"] = {
["x"] = 2,
["side"] = 6,
},
["health_selection_overlay_alpha"] = 0,
["minor_height_scale"] = 0.9999999403953552,
["aura_padding"] = 0.199999988079071,
["script_banned_user"] = {
["Player-3674-08A5D7A3"] = true,
},
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["aura_stack_size"] = 8,
["range_check_health_bar_alpha"] = 0.8499999642372131,
["aura_height2"] = 17,
["aura_show_crowdcontrol"] = true,
["health_cutoff"] = false,
["aura_border_colors"] = {
["enrage"] = {
0.70196078431373,
0,
0.054901960784314,
},
["steal_or_purge"] = {
nil,
0.92549019607843,
1,
},
["offensive"] = {
nil,
0.65098039215686,
0.10196078431373,
0,
},
["crowdcontrol"] = {
1,
1,
1,
},
["is_show_all"] = {
0.70196078431373,
0.10196078431373,
0.10196078431373,
},
["is_buff"] = {
0.65098039215686,
0.011764705882353,
0.090196078431373,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Aura - Is Cast Bar [P]"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Unit - Health Markers"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Explode on Die [P]"] = 1,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Tank Interrupt"] = 12,
["Cast - AoE With Range [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Cast - Important Target [P]"] = 2,
["Unit - Important"] = 11,
["Aura - Buff Alert"] = 15,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Color Change"] = 1,
["Add - Warning [P]"] = 5,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Countdown"] = 11,
["Cast - Heal Cut [P]"] = 3,
["Cast - Quick Flash"] = 2,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Glowing [P]"] = 10,
["Aura Border Color"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Shining Green [P]"] = 3,
["Explosion Affix M+"] = 14,
["Blink by Time Left"] = 1,
["Fixate On You"] = 11,
},
["extra_icon_anchor"] = {
["x"] = -0.5,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.8999999761581421,
["semver"] = "3.5.3",
["aura_frame2_anchor"] = {
["y"] = 1.300003051757813,
["x"] = -0.8000030517578125,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["auto_toggle_friendly"] = {
["party"] = true,
["raid"] = true,
["arena"] = true,
},
["transparency_behavior"] = 2,
["spell_animations"] = false,
["debuff_show_cc_border"] = {
1,
1,
1,
},
["aura_consolidate"] = true,
["extra_icon_width"] = 19,
["health_statusbar_texture"] = "Details Flat",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Combo Points"] = 6,
["Monk Statue"] = 2,
},
["extra_icon_border_color"] = {
1,
1,
1,
},
["minor_width_scale"] = 0.9999999403953552,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 1.300003051757813,
["x"] = 0.8000030517578125,
["side"] = 7,
},
["aura_timer_text_font"] = "Expressway",
["cast_statusbar_color_finished"] = {
0.27843137254902,
0.75294117647059,
0.23529411764706,
},
["extra_icon_stack_font"] = "Expressway",
["aura_height"] = 17,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Details Flat",
["aura2_x_offset"] = -0.8000030517578125,
["target_indicator"] = "Double Arrows",
["range_check_cast_bar_alpha"] = 0.8999999761581421,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.3999999761581",
["nameplateLargeTopInset"] = "0.03999999910593",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1.25",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateNotSelectedAlpha"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "15",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "0.1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.048449993133545",
["nameplateGlobalScale"] = "0.81166744232178",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.2126681804657",
["nameplateOverlapH"] = "0.75",
["nameplateSelfTopInset"] = "0.5",
["nameplateShowFriends"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "1",
["nameplateOccludedAlphaMult"] = "0.5",
["nameplateMinScale"] = "1",
["nameplateSelfAlpha"] = "1",
["nameplateOtherTopInset"] = "0.03999999910593",
["nameplateOtherAtBase"] = "0",
["nameplateSelfBottomInset"] = "0.19999998807907",
["nameplatePlayerMaxDistance"] = "60",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1.4",
["nameplateShowEnemyTotems"] = "1",
["ShowNamePlateLoseAggroFlash"] = "0",
["ShowClassColorInNameplate"] = "1",
["nameplateLargerScale"] = "1",
},
["login_counter"] = 46081,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
1,
1,
},
["bossmod_aura_height"] = 32.105155944824,
["aura_stack_font"] = "Expressway",
["range_check_buffs_alpha"] = 0.8999999761581421,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["auras_per_row_amount"] = 4,
["aura_stack_anchor"] = {
["y"] = 4.139999389648438,
["x"] = 8.629999160766602,
["side"] = 12,
},
["plate_config"] = {
["player"] = {
["spellpercent_text_font"] = "Expressway",
["power_percent_text_font"] = "Expressway",
["spellname_text_font"] = "Expressway",
["percent_text_font"] = "Expressway",
},
["friendlyplayer"] = {
["spellpercent_text_font"] = "Expressway",
["actorname_use_class_color"] = true,
["cast"] = {
132,
2,
},
["level_text_font"] = "Naowh",
["actorname_text_font"] = "Expressway",
["actorname_text_spacing"] = 8,
["only_damaged"] = false,
["only_thename"] = true,
["cast_incombat"] = {
132,
2,
},
["actorname_friend_color"] = {
0.70980392156863,
},
["actorname_text_size"] = 9,
["level_text_alpha"] = 0.29999998211861,
["percent_text_font"] = "Naowh",
["actorname_guild_color"] = {
0.49803921568627,
},
["health_incombat"] = {
132,
16,
},
["health"] = {
132,
16,
},
["spellname_text_font"] = "Expressway",
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["cast"] = {
132,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["enabled"] = false,
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color"] = {
1,
0.49803921568627,
},
["actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_color"] = {
nil,
0.7843137254902,
nil,
1,
},
["quest_color_enemy"] = {
1,
0.36862745098039,
0,
1,
},
["big_actortitle_text_font"] = "Naowh",
["percent_text_ooc"] = true,
["big_actorname_text_color"] = {
0.25098039215686,
0.68627450980392,
0.20392156862745,
1,
},
["actorname_text_anchor"] = {
["y"] = -0.2000045776367188,
["x"] = 2.5,
["side"] = 10,
},
["cast_incombat"] = {
132,
10,
},
["spellname_text_anchor"] = {
["side"] = 3,
},
["percent_text_anchor"] = {
["side"] = 11,
},
["spellname_text_font"] = "Expressway",
["quest_color_neutral"] = {
1,
0.65,
0,
},
["actorname_text_size"] = 11,
["percent_text_enabled"] = true,
["big_actortitle_text_size"] = 9,
["spellpercent_text_size"] = 9,
["percent_show_health"] = true,
["spellpercent_text_enabled"] = true,
["percent_text_font"] = "Expressway",
["percent_show_percent"] = false,
["level_text_alpha"] = 0.29999998211861,
["health_incombat"] = {
132,
},
["health"] = {
132,
16,
},
["big_actorname_text_font"] = "Naowh",
["percent_text_size"] = 10,
},
["global_health_height"] = 16,
["global_health_width"] = 132,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["cast"] = {
135,
7,
},
["fixed_class_color"] = {
0.69803921568627,
0.1921568627451,
0.11372549019608,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["spellname_text_outline"] = "OUTLINE",
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.49803921568627,
0,
1,
},
["big_actortitle_text_font"] = "Expressway",
["spellpercent_text_size"] = 9,
["cast_incombat"] = {
135,
7,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["spellname_text_font"] = "Expressway",
["quest_color_neutral"] = {
1,
0.49803921568627,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Expressway",
["percent_text_show_decimals"] = false,
["big_actortitle_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["percent_text_font"] = "Expressway",
["quest_enabled"] = true,
["level_text_alpha"] = 0.29999998211861,
["quest_color_enabled"] = true,
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["percent_show_percent"] = false,
["spellname_text_size"] = 9,
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "Expressway",
["cast"] = {
135,
7,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 8,
["quest_color_enemy"] = {
nil,
0.49803921568627,
},
["big_actortitle_text_font"] = "Expressway",
["spellpercent_text_size"] = 9,
["cast_incombat"] = {
135,
9,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["spellname_text_font"] = "Expressway",
["quest_color_neutral"] = {
nil,
0.49803921568627,
},
["big_actorname_text_font"] = "Expressway",
["percent_text_show_decimals"] = false,
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["percent_text_font"] = "Expressway",
["percent_show_percent"] = false,
["actorname_text_size"] = 9,
["spellname_text_size"] = 9,
["health"] = {
114,
17,
},
["percent_show_health"] = false,
["health_incombat"] = {
135,
15,
},
["level_text_alpha"] = 0.29999998211861,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 1.300003051757813,
["indicator_elite"] = false,
["cast_statusbar_use_fade_effects"] = false,
["border_thickness"] = 1.100000023841858,
["aura_show_tooltip"] = true,
["resources_settings"] = {
["global_settings"] = {
["anchor"] = {
["y"] = 9.709999084472656,
},
},
["chr"] = {
["Player-4184-004EAE08"] = "ArcaneCharges",
["Player-3674-0898468A"] = "SoulShards",
["Player-3674-096625B1"] = "Chi",
["Player-3678-0D4F17CA"] = "ComboPoints",
["Player-3676-0DBAB9E1"] = "ComboPoints",
["Player-3678-0D4C07B5"] = "ComboPoints",
["Player-970-0065C1C7"] = "ComboPoints",
["Player-3678-0D44FD01"] = "ComboPoints",
["Player-1175-0CEDCED5"] = "ComboPoints",
["Player-2073-09AF21B0"] = "ComboPoints",
["Player-4184-0021692E"] = "ComboPoints",
["Player-3674-09CBAF8C"] = "ArcaneCharges",
["Player-970-006B99B8"] = "ComboPoints",
["Player-1175-0CFE73BA"] = "ArcaneCharges",
},
},
["indicator_scale"] = 0.9999999403953552,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0.50242385268211,
},
["npc_colors"] = {
[134139] = {
false,
false,
"blue",
},
[198716] = {
true,
false,
"blue",
},
[196798] = {
true,
false,
"deepskyblue",
},
[186696] = {
true,
false,
"fuchsia",
},
[134012] = {
false,
false,
"blue",
},
[136186] = {
false,
false,
"fuchsia",
},
[196671] = {
true,
false,
"mediumpurple",
},
[180431] = {
true,
false,
"deepskyblue",
},
[115407] = {
true,
false,
"blue",
},
[195265] = {
true,
false,
"mediumpurple",
},
[184140] = {
true,
false,
"fuchsia",
},
[168156] = {
true,
false,
"fuchsia",
},
[165471] = {
true,
false,
"blue",
},
[173016] = {
true,
false,
"deepskyblue",
},
[129602] = {
false,
false,
"blue",
},
[180433] = {
true,
false,
"fuchsia",
},
[161124] = {
false,
false,
"blue",
},
[200126] = {
true,
false,
"blue",
},
[120651] = {
true,
false,
"gold",
},
[131009] = {
false,
false,
"mediumpurple",
},
[197697] = {
true,
false,
"fuchsia",
},
[132481] = {
false,
false,
"blue",
},
[176598] = {
true,
false,
"blue",
},
[164578] = {
true,
false,
"blue",
},
[135167] = {
false,
false,
"blue",
},
[197698] = {
true,
false,
"fuchsia",
},
[175576] = {
true,
false,
"fuchsia",
},
[199233] = {
true,
false,
"mediumpurple",
},
[126918] = {
false,
false,
"fuchsia",
},
[196548] = {
true,
false,
"deepskyblue",
},
[135552] = {
false,
false,
"white",
},
[130435] = {
false,
false,
"white",
},
[135169] = {
false,
false,
"white",
},
[83761] = {
true,
false,
"mediumpurple",
},
[178008] = {
true,
false,
"yellow",
},
[142587] = {
false,
false,
"white",
},
[168418] = {
true,
false,
"deepskyblue",
},
[130436] = {
false,
false,
"blue",
},
[165222] = {
true,
false,
"blue",
},
[198214] = {
true,
false,
"fuchsia",
},
[127879] = {
false,
false,
"blue",
},
[168420] = {
true,
false,
"blue",
},
[165479] = {
true,
false,
"mediumpurple",
},
[130437] = {
false,
false,
"fuchsia",
},
[192333] = {
true,
false,
"mediumpurple",
},
[134150] = {
false,
false,
"yellow",
},
[83763] = {
true,
false,
"deepskyblue",
},
[131849] = {
false,
false,
"fuchsia",
},
[128967] = {
false,
false,
"fuchsia",
},
[75899] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"fuchsia",
},
[134024] = {
false,
false,
"white",
},
[178141] = {
true,
false,
"blue",
},
[196044] = {
true,
false,
"fuchsia",
},
[190034] = {
true,
false,
"mediumpurple",
},
[160495] = {
true,
false,
"deepskyblue",
},
[188244] = {
true,
false,
"mediumpurple",
},
[178142] = {
true,
false,
"deepskyblue",
},
[157810] = {
true,
false,
"deepskyblue",
},
[194894] = {
true,
false,
"blue",
},
[200137] = {
true,
false,
"deepskyblue",
},
[165483] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"deepskyblue",
},
[83765] = {
false,
false,
"deepskyblue",
},
[164461] = {
true,
false,
"blue",
},
[128969] = {
false,
false,
"blue",
},
[177889] = {
true,
false,
"fuchsia",
},
[134284] = {
false,
false,
"darkgreen",
},
[194897] = {
true,
false,
"fuchsia",
},
[164463] = {
true,
false,
"deepskyblue",
},
[114584] = {
true,
false,
"mediumpurple",
},
[150142] = {
true,
false,
"deepskyblue",
},
[177891] = {
true,
false,
"mediumpurple",
},
[134158] = {
false,
false,
"blue",
},
[172265] = {
true,
false,
"deepskyblue",
},
[150143] = {
true,
false,
"blue",
},
[177892] = {
true,
false,
"blue",
},
[165872] = {
true,
false,
"mediumpurple",
},
[168942] = {
true,
false,
"blue",
},
[180323] = {
true,
false,
"fuchsia",
},
[190426] = {
true,
false,
"fuchsia",
},
[162038] = {
true,
false,
"mediumpurple",
},
[150146] = {
true,
false,
"fuchsia",
},
[138254] = {
false,
false,
"fuchsia",
},
[134418] = {
false,
false,
"springgreen",
},
[97068] = {
true,
false,
"mediumpurple",
},
[75713] = {
true,
false,
"deepskyblue",
},
[180070] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"blueviolet",
},
[198868] = {
true,
false,
"deepskyblue",
},
[195927] = {
true,
false,
"mediumpurple",
},
[199124] = {
true,
false,
"deepskyblue",
},
[150276] = {
false,
false,
"white",
},
[83578] = {
true,
false,
"mediumpurple",
},
[171376] = {
true,
false,
"blue",
},
[135699] = {
false,
false,
"darkgreen",
},
[97197] = {
true,
false,
"deepskyblue",
},
[195929] = {
true,
false,
"mediumpurple",
},
[75459] = {
true,
false,
"deepskyblue",
},
[118489] = {
true,
false,
"fuchsia",
},
[170483] = {
true,
false,
"fuchsia",
},
[98285] = {
false,
false,
"blue",
},
[168949] = {
false,
false,
"white",
},
[168310] = {
true,
false,
"fuchsia",
},
[133912] = {
false,
false,
"fuchsia",
},
[114334] = {
true,
false,
"mediumpurple",
},
[75652] = {
true,
false,
"fuchsia",
},
[139284] = {
false,
false,
"springgreen",
},
[155908] = {
true,
false,
"fuchsia",
},
[129232] = {
false,
false,
"white",
},
[179821] = {
true,
false,
"fuchsia",
},
[83389] = {
true,
false,
"mediumpurple",
},
[157571] = {
true,
false,
"deepskyblue",
},
[173044] = {
true,
false,
"deepskyblue",
},
[154758] = {
true,
false,
"fuchsia",
},
[193760] = {
true,
false,
"mediumpurple",
},
[118491] = {
true,
false,
"deepskyblue",
},
[115486] = {
true,
false,
"mediumpurple",
},
[157572] = {
true,
false,
"deepskyblue",
},
[164861] = {
true,
false,
"blue",
},
[114783] = {
true,
false,
"deepskyblue",
},
[105704] = {
true,
false,
"blue",
},
[166396] = {
true,
false,
"blue",
},
[83390] = {
true,
false,
"deepskyblue",
},
[187240] = {
true,
false,
"mediumpurple",
},
[129553] = {
false,
false,
"springgreen",
},
[180335] = {
true,
false,
"deepskyblue",
},
[162049] = {
false,
false,
"fuchsia",
},
[171384] = {
true,
false,
"blue",
},
[139799] = {
false,
false,
"blue",
},
[77700] = {
true,
false,
"deepskyblue",
},
[196576] = {
true,
false,
"blue",
},
[180336] = {
true,
false,
"deepskyblue",
},
[170490] = {
true,
false,
"deepskyblue",
},
[168572] = {
true,
false,
"blue",
},
[191206] = {
true,
false,
"deepskyblue",
},
[134174] = {
false,
false,
"springgreen",
},
[115488] = {
true,
false,
"blue",
},
[163458] = {
true,
false,
"deepskyblue",
},
[162691] = {
false,
false,
"blue",
},
[122969] = {
false,
false,
"springgreen",
},
[197985] = {
true,
false,
"deepskyblue",
},
[163459] = {
true,
false,
"blue",
},
[83392] = {
false,
false,
"blue",
},
[178165] = {
true,
false,
"fuchsia",
},
[197219] = {
true,
false,
"mediumpurple",
},
[165762] = {
true,
false,
"fuchsia",
},
[131492] = {
false,
false,
"springgreen",
},
[76104] = {
true,
false,
"blue",
},
[81283] = {
false,
false,
"deepskyblue",
},
[86526] = {
true,
false,
"blue",
},
[135329] = {
false,
false,
"fuchsia",
},
[81603] = {
true,
false,
"mediumpurple",
},
[166275] = {
true,
false,
"deepskyblue",
},
[196198] = {
true,
false,
"blue",
},
[174843] = {
true,
false,
"mediumpurple",
},
[198500] = {
true,
false,
"deepskyblue",
},
[122971] = {
false,
false,
"blue",
},
[166276] = {
true,
false,
"mediumpurple",
},
[168578] = {
true,
false,
"deepskyblue",
},
[150292] = {
true,
false,
"blue",
},
[198501] = {
true,
false,
"deepskyblue",
},
[162057] = {
true,
false,
"mediumpurple",
},
[150165] = {
true,
false,
"deepskyblue",
},
[198502] = {
true,
false,
"deepskyblue",
},
[135204] = {
false,
false,
"springgreen",
},
[122972] = {
false,
false,
"springgreen",
},
[170882] = {
true,
false,
"blue",
},
[99891] = {
true,
false,
"mediumpurple",
},
[139425] = {
false,
false,
"fuchsia",
},
[180473] = {
true,
false,
"blue",
},
[196202] = {
true,
false,
"blue",
},
[138019] = {
false,
false,
"blue",
},
[164873] = {
true,
false,
"fuchsia",
},
[122973] = {
false,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[186740] = {
false,
false,
"blue",
},
[150168] = {
true,
false,
"fuchsia",
},
[180091] = {
true,
false,
"mediumpurple",
},
[186741] = {
true,
false,
"deepskyblue",
},
[150169] = {
true,
false,
"mediumpurple",
},
[150297] = {
true,
false,
"deepskyblue",
},
[189555] = {
true,
false,
"deepskyblue",
},
[182778] = {
true,
false,
"fuchsia",
},
[165515] = {
false,
false,
"fuchsia",
},
[134058] = {
false,
false,
"yellow",
},
[163086] = {
true,
false,
"blue",
},
[173189] = {
true,
false,
"deepskyblue",
},
[173190] = {
true,
false,
"deepskyblue",
},
[187768] = {
true,
false,
"deepskyblue",
},
[153882] = {
true,
false,
"deepskyblue",
},
[187897] = {
true,
false,
"fuchsia",
},
[180864] = {
true,
false,
"fuchsia",
},
[151325] = {
true,
false,
"fuchsia",
},
[153755] = {
false,
false,
"white",
},
[189816] = {
true,
false,
"deepskyblue",
},
[188026] = {
true,
false,
"fuchsia",
},
[168717] = {
true,
false,
"deepskyblue",
},
[144293] = {
true,
false,
"mediumpurple",
},
[183423] = {
true,
false,
"deepskyblue",
},
[165137] = {
true,
false,
"mediumpurple",
},
[187771] = {
true,
false,
"blue",
},
[139946] = {
false,
false,
"blue",
},
[168718] = {
true,
false,
"blue",
},
[144294] = {
true,
false,
"deepskyblue",
},
[165010] = {
true,
false,
"mediumpurple",
},
[132530] = {
false,
false,
"blue",
},
[183425] = {
true,
false,
"blue",
},
[154014] = {
true,
false,
"deepskyblue",
},
[144296] = {
true,
false,
"mediumpurple",
},
[179334] = {
true,
false,
"fuchsia",
},
[132532] = {
false,
false,
"fuchsia",
},
[139949] = {
false,
false,
"springgreen",
},
[130012] = {
false,
false,
"yellow",
},
[163862] = {
true,
false,
"blue",
},
[191739] = {
true,
false,
"mediumpurple",
},
[179847] = {
true,
false,
"fuchsia",
},
[144298] = {
true,
false,
"blue",
},
[137521] = {
false,
false,
"fuchsia",
},
[176523] = {
true,
false,
"mediumpurple",
},
[133685] = {
false,
false,
"blueviolet",
},
[190206] = {
true,
false,
"blue",
},
[180104] = {
true,
false,
"deepskyblue",
},
[114796] = {
true,
false,
"blue",
},
[196856] = {
true,
false,
"mediumpurple",
},
[96574] = {
true,
false,
"mediumpurple",
},
[198263] = {
true,
false,
"mediumpurple",
},
[190207] = {
true,
false,
"deepskyblue",
},
[165911] = {
true,
false,
"fuchsia",
},
[188673] = {
true,
false,
"mediumpurple",
},
[104247] = {
true,
false,
"deepskyblue",
},
[130909] = {
false,
false,
"fuchsia",
},
[135989] = {
false,
false,
"blue",
},
[154020] = {
true,
false,
"deepskyblue",
},
[164506] = {
true,
false,
"blue",
},
[191232] = {
true,
false,
"blue",
},
[165913] = {
true,
false,
"fuchsia",
},
[192767] = {
true,
false,
"mediumpurple",
},
[179852] = {
true,
false,
"blue",
},
[115757] = {
true,
false,
"mediumpurple",
},
[155812] = {
true,
false,
"blue",
},
[177807] = {
false,
false,
"deepskyblue",
},
[166299] = {
true,
false,
"blue",
},
[56792] = {
true,
false,
"fuchsia",
},
[164510] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"blue",
},
[180495] = {
true,
false,
"fuchsia",
},
[166301] = {
true,
false,
"fuchsia",
},
[114544] = {
true,
false,
"fuchsia",
},
[155432] = {
false,
false,
"blueviolet",
},
[167964] = {
true,
false,
"fuchsia",
},
[122984] = {
false,
false,
"blueviolet",
},
[166302] = {
true,
false,
"deepskyblue",
},
[155433] = {
false,
false,
"blueviolet",
},
[165919] = {
true,
false,
"mediumpurple",
},
[195842] = {
true,
false,
"deepskyblue",
},
[104251] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"blue",
},
[167967] = {
true,
false,
"blue",
},
[189706] = {
true,
false,
"yellow",
},
[165410] = {
true,
false,
"mediumpurple",
},
[163620] = {
true,
false,
"blue",
},
[83025] = {
true,
false,
"blue",
},
[189707] = {
false,
false,
"white",
},
[179733] = {
true,
false,
"fuchsia",
},
[171805] = {
true,
false,
"blue",
},
[168992] = {
true,
false,
"deepskyblue",
},
[196102] = {
false,
false,
"deepskyblue",
},
[177816] = {
true,
false,
"deepskyblue",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"mediumpurple",
},
[114803] = {
true,
false,
"deepskyblue",
},
[81236] = {
true,
false,
"deepskyblue",
},
[177817] = {
true,
false,
"blue",
},
[135235] = {
false,
false,
"white",
},
[82579] = {
true,
false,
"deepskyblue",
},
[165414] = {
true,
false,
"deepskyblue",
},
[151476] = {
true,
false,
"mediumpurple",
},
[114804] = {
true,
false,
"blue",
},
[136643] = {
false,
false,
"blue",
},
[187154] = {
true,
false,
"fuchsia",
},
[130661] = {
false,
false,
"springgreen",
},
[194316] = {
true,
false,
"mediumpurple",
},
[163882] = {
true,
false,
"mediumpurple",
},
[195851] = {
true,
false,
"blue",
},
[173729] = {
true,
false,
"fuchsia",
},
[194317] = {
true,
false,
"mediumpurple",
},
[135239] = {
false,
false,
"white",
},
[150712] = {
false,
false,
"white",
},
[115765] = {
true,
false,
"fuchsia",
},
[136391] = {
false,
false,
"blue",
},
[156212] = {
true,
false,
"deepskyblue",
},
[151353] = {
false,
false,
"white",
},
[135241] = {
false,
false,
"fuchsia",
},
[134602] = {
false,
false,
"blue",
},
[156213] = {
false,
false,
"mediumpurple",
},
[133835] = {
false,
false,
"blue",
},
[155830] = {
true,
false,
"deepskyblue",
},
[183707] = {
true,
false,
"deepskyblue",
},
[182045] = {
true,
false,
"fuchsia",
},
[165805] = {
true,
false,
"mediumpurple",
},
[155831] = {
true,
false,
"fuchsia",
},
[187033] = {
true,
false,
"mediumpurple",
},
[168747] = {
true,
false,
"fuchsia",
},
[130025] = {
false,
false,
"blue",
},
[163121] = {
true,
false,
"blue",
},
[101637] = {
true,
false,
"mediumpurple",
},
[168109] = {
true,
false,
"deepskyblue",
},
[162099] = {
true,
false,
"fuchsia",
},
[168365] = {
false,
false,
"fuchsia",
},
[115640] = {
true,
false,
"fuchsia",
},
[130026] = {
false,
false,
"springgreen",
},
[135246] = {
false,
false,
"white",
},
[197905] = {
true,
false,
"blue",
},
[96587] = {
true,
false,
"deepskyblue",
},
[176551] = {
true,
false,
"deepskyblue",
},
[135759] = {
false,
false,
"fuchsia",
},
[144071] = {
false,
false,
"springgreen",
},
[130027] = {
false,
false,
"fuchsia",
},
[59547] = {
true,
false,
"mediumpurple",
},
[196117] = {
true,
false,
"mediumpurple",
},
[163126] = {
true,
false,
"deepskyblue",
},
[165556] = {
true,
false,
"fuchsia",
},
[134994] = {
false,
false,
"fuchsia",
},
[163894] = {
true,
false,
"blue",
},
[131670] = {
false,
false,
"blue",
},
[169905] = {
true,
false,
"blue",
},
[171184] = {
true,
false,
"mediumpurple",
},
[152898] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"deepskyblue",
},
[192796] = {
true,
false,
"fuchsia",
},
[135764] = {
false,
false,
"blueviolet",
},
[115388] = {
true,
false,
"fuchsia",
},
[197145] = {
true,
false,
"mediumpurple",
},
[198424] = {
true,
false,
"blue",
},
[164921] = {
true,
false,
"deepskyblue",
},
[197146] = {
true,
false,
"mediumpurple",
},
[188067] = {
true,
false,
"deepskyblue",
},
[168886] = {
true,
false,
"deepskyblue",
},
[134232] = {
false,
false,
"blue",
},
[133593] = {
false,
false,
"springgreen",
},
[157634] = {
true,
false,
"blue",
},
[166969] = {
true,
false,
"deepskyblue",
},
[192800] = {
true,
false,
"blue",
},
[166970] = {
true,
false,
"blue",
},
[82590] = {
true,
false,
"blue",
},
[152009] = {
false,
false,
"white",
},
[197149] = {
true,
false,
"deepskyblue",
},
[162040] = {
true,
false,
"fuchsia",
},
[172981] = {
true,
false,
"blue",
},
[166971] = {
true,
false,
"fuchsia",
},
[80816] = {
true,
false,
"deepskyblue",
},
[152905] = {
true,
false,
"fuchsia",
},
[136665] = {
false,
false,
"fuchsia",
},
[164414] = {
true,
false,
"deepskyblue",
},
[195135] = {
true,
false,
"mediumpurple",
},
[197406] = {
true,
false,
"fuchsia",
},
[131587] = {
false,
false,
"fuchsia",
},
[164926] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"springgreen",
},
[137591] = {
false,
false,
"yellow",
},
[168153] = {
true,
false,
"fuchsia",
},
[129600] = {
false,
false,
"springgreen",
},
[166589] = {
true,
false,
"fuchsia",
},
[114624] = {
true,
false,
"mediumpurple",
},
[197535] = {
true,
false,
"fuchsia",
},
[177808] = {
true,
false,
"mediumpurple",
},
[193373] = {
true,
false,
"fuchsia",
},
[150250] = {
true,
false,
"deepskyblue",
},
[198047] = {
true,
false,
"blue",
},
[178139] = {
true,
false,
"mediumpurple",
},
[178392] = {
true,
false,
"fuchsia",
},
[105715] = {
true,
false,
"blue",
},
[136470] = {
false,
false,
"springgreen",
},
[178171] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"blue",
},
[76518] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"deepskyblue",
},
[177716] = {
true,
false,
"deepskyblue",
},
[162039] = {
true,
false,
"deepskyblue",
},
[101326] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[167998] = {
true,
false,
"mediumpurple",
},
[183671] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"blue",
},
[192934] = {
true,
false,
"blue",
},
[104300] = {
true,
false,
"deepskyblue",
},
[196115] = {
true,
false,
"blue",
},
[135007] = {
false,
false,
"blue",
},
[81212] = {
true,
false,
"mediumpurple",
},
[135263] = {
false,
false,
"blueviolet",
},
[197595] = {
true,
false,
"mediumpurple",
},
[164707] = {
true,
false,
"mediumpurple",
},
[114542] = {
true,
false,
"blue",
},
[168882] = {
true,
false,
"fuchsia",
},
[163524] = {
true,
false,
"fuchsia",
},
[114626] = {
true,
false,
"fuchsia",
},
[179841] = {
true,
false,
"deepskyblue",
},
[131850] = {
false,
false,
"springgreen",
},
[190174] = {
true,
false,
"fuchsia",
},
[195877] = {
true,
false,
"fuchsia",
},
[168384] = {
true,
false,
"blue",
},
[180015] = {
true,
false,
"blue",
},
[131812] = {
false,
false,
"blue",
},
[95842] = {
true,
false,
"deepskyblue",
},
[168443] = {
true,
false,
"blue",
},
[129601] = {
false,
false,
"blueviolet",
},
[150253] = {
true,
false,
"mediumpurple",
},
[174210] = {
true,
false,
"deepskyblue",
},
[169861] = {
true,
false,
"blue",
},
[131685] = {
false,
false,
"springgreen",
},
[198308] = {
true,
false,
"mediumpurple",
},
[114627] = {
true,
false,
"blue",
},
[183033] = {
true,
false,
"mediumpurple",
},
[114317] = {
true,
false,
"deepskyblue",
},
[131677] = {
false,
false,
"blue",
},
[127111] = {
false,
false,
"blue",
},
[162047] = {
true,
false,
"mediumpurple",
},
[129370] = {
false,
false,
"springgreen",
},
[196263] = {
true,
false,
"deepskyblue",
},
[115020] = {
true,
false,
"mediumpurple",
},
[190381] = {
true,
false,
"fuchsia",
},
[194315] = {
true,
false,
"mediumpurple",
},
[129548] = {
false,
false,
"blueviolet",
},
[115395] = {
true,
false,
"mediumpurple",
},
[200387] = {
true,
false,
"mediumpurple",
},
[127799] = {
false,
false,
"blue",
},
[80805] = {
true,
false,
"mediumpurple",
},
[174773] = {
false,
false,
"blue",
},
[167876] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"mediumpurple",
},
[138465] = {
false,
false,
"blue",
},
[135846] = {
false,
false,
"blueviolet",
},
[134629] = {
false,
false,
"blue",
},
[167493] = {
false,
false,
"blue",
},
[170690] = {
true,
false,
"blue",
},
[130485] = {
false,
false,
"white",
},
[127480] = {
false,
false,
"fuchsia",
},
[164929] = {
true,
false,
"blue",
},
[164567] = {
true,
false,
"deepskyblue",
},
[176573] = {
true,
false,
"fuchsia",
},
[155090] = {
true,
false,
"deepskyblue",
},
[168425] = {
true,
false,
"fuchsia",
},
[190128] = {
true,
false,
"yellow",
},
[114629] = {
true,
false,
"blue",
},
[169924] = {
true,
false,
"mediumpurple",
},
[167607] = {
true,
false,
"mediumpurple",
},
[167111] = {
true,
false,
"deepskyblue",
},
[136549] = {
false,
false,
"blue",
},
[131666] = {
false,
false,
"springgreen",
},
[151127] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"yellow",
},
[189234] = {
true,
false,
"fuchsia",
},
[129527] = {
false,
false,
"fuchsia",
},
[168007] = {
true,
false,
"blue",
},
[82597] = {
true,
false,
"fuchsia",
},
[180348] = {
true,
false,
"blue",
},
[176575] = {
true,
false,
"deepskyblue",
},
[59553] = {
true,
false,
"mediumpurple",
},
[169927] = {
true,
false,
"fuchsia",
},
[176959] = {
true,
false,
"deepskyblue",
},
[80935] = {
true,
false,
"deepskyblue",
},
[191164] = {
true,
false,
"blue",
},
[167113] = {
true,
false,
"blue",
},
[131436] = {
false,
false,
"blue",
},
[87329] = {
false,
false,
"blue",
},
[156244] = {
true,
false,
"mediumpurple",
},
[96664] = {
true,
false,
"blue",
},
[127482] = {
false,
false,
"blue",
},
[141283] = {
false,
false,
"blue",
},
[196203] = {
true,
false,
"deepskyblue",
},
[163520] = {
true,
false,
"mediumpurple",
},
[198503] = {
true,
false,
"deepskyblue",
},
[155094] = {
false,
false,
"deepskyblue",
},
[116549] = {
true,
false,
"deepskyblue",
},
[164557] = {
true,
false,
"mediumpurple",
},
[141284] = {
false,
false,
"springgreen",
},
[199595] = {
true,
false,
"mediumpurple",
},
[180432] = {
true,
false,
"blue",
},
[185529] = {
true,
false,
"mediumpurple",
},
[192789] = {
false,
false,
"blue",
},
[156157] = {
true,
false,
"blue",
},
[179842] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"fuchsia",
},
[130488] = {
false,
false,
"fuchsia",
},
[129529] = {
false,
false,
"blue",
},
[95834] = {
true,
false,
"fuchsia",
},
[131445] = {
false,
false,
"blue",
},
[81432] = {
true,
false,
"deepskyblue",
},
[189878] = {
true,
false,
"yellow",
},
[156226] = {
true,
false,
"deepskyblue",
},
[84520] = {
true,
false,
"mediumpurple",
},
[114632] = {
true,
false,
"deepskyblue",
},
[199325] = {
true,
false,
"deepskyblue",
},
[198702] = {
true,
false,
"mediumpurple",
},
[136139] = {
false,
false,
"white",
},
[136735] = {
false,
false,
"fuchsia",
},
[168396] = {
true,
false,
"mediumpurple",
},
[59555] = {
true,
false,
"fuchsia",
},
[133870] = {
false,
false,
"springgreen",
},
[179010] = {
true,
false,
"deepskyblue",
},
[127484] = {
false,
false,
"blueviolet",
},
[191230] = {
true,
false,
"fuchsia",
},
[151773] = {
true,
false,
"blue",
},
[197799] = {
true,
false,
"deepskyblue",
},
[59873] = {
true,
false,
"mediumpurple",
},
[59552] = {
true,
false,
"blue",
},
[188703] = {
true,
false,
"yellow",
},
[114633] = {
true,
false,
"mediumpurple",
},
[80938] = {
true,
false,
"mediumpurple",
},
[88163] = {
true,
false,
"fuchsia",
},
[137830] = {
false,
false,
"blueviolet",
},
[157017] = {
true,
false,
"blue",
},
[175550] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"blue",
},
[164562] = {
true,
false,
"fuchsia",
},
[129367] = {
false,
false,
"springgreen",
},
[198577] = {
true,
false,
"blue",
},
[179388] = {
true,
false,
"deepskyblue",
},
[176521] = {
true,
false,
"blue",
},
[162133] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"blue",
},
[169159] = {
true,
false,
"gold",
},
[164563] = {
true,
false,
"blue",
},
[114634] = {
false,
false,
"white",
},
[156245] = {
true,
false,
"mediumpurple",
},
[179269] = {
true,
false,
"fuchsia",
},
[80936] = {
true,
false,
"blue",
},
[171341] = {
true,
false,
"deepskyblue",
},
[178630] = {
true,
false,
"deepskyblue",
},
[175992] = {
true,
false,
"fuchsia",
},
[170480] = {
true,
false,
"mediumpurple",
},
[104270] = {
true,
false,
"mediumpurple",
},
[127486] = {
false,
false,
"darkgreen",
},
[151649] = {
false,
false,
"white",
},
[165076] = {
true,
false,
"blue",
},
[115402] = {
false,
false,
"deepskyblue",
},
[129788] = {
false,
false,
"springgreen",
},
[133482] = {
false,
false,
"blueviolet",
},
[168318] = {
true,
false,
"mediumpurple",
},
[128434] = {
false,
false,
"fuchsia",
},
[191847] = {
true,
false,
"deepskyblue",
},
[165763] = {
true,
false,
"deepskyblue",
},
[185537] = {
true,
false,
"blue",
},
[171343] = {
true,
false,
"fuchsia",
},
[161241] = {
false,
false,
"springgreen",
},
[115019] = {
true,
false,
"deepskyblue",
},
[168658] = {
true,
false,
"fuchsia",
},
[155221] = {
true,
false,
"deepskyblue",
},
[194990] = {
true,
false,
"deepskyblue",
},
[198709] = {
true,
false,
"mediumpurple",
},
[114316] = {
true,
false,
"deepskyblue",
},
[75506] = {
true,
false,
"deepskyblue",
},
[180474] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[198326] = {
true,
false,
"mediumpurple",
},
[196045] = {
true,
false,
"deepskyblue",
},
[198311] = {
true,
false,
"mediumpurple",
},
[197671] = {
true,
false,
"blue",
},
[134990] = {
false,
false,
"springgreen",
},
[180429] = {
true,
false,
"mediumpurple",
},
[161243] = {
false,
false,
"blueviolet",
},
[187969] = {
true,
false,
"blue",
},
[163128] = {
true,
false,
"deepskyblue",
},
[195930] = {
true,
false,
"mediumpurple",
},
[127488] = {
false,
false,
"springgreen",
},
[115642] = {
true,
false,
"blue",
},
[134390] = {
false,
false,
"blueviolet",
},
[195928] = {
true,
false,
"mediumpurple",
},
[161244] = {
false,
false,
"fuchsia",
},
[114266] = {
true,
false,
"deepskyblue",
},
[154744] = {
true,
false,
"fuchsia",
},
[168594] = {
true,
false,
"mediumpurple",
},
[150160] = {
true,
false,
"mediumpurple",
},
[168934] = {
true,
false,
"fuchsia",
},
[183495] = {
true,
false,
"mediumpurple",
},
[155434] = {
false,
false,
"blueviolet",
},
[195696] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"blue",
},
[172021] = {
false,
false,
"white",
},
[176974] = {
true,
false,
"fuchsia",
},
[155824] = {
true,
false,
"blue",
},
[65317] = {
true,
false,
"mediumpurple",
},
[175861] = {
true,
false,
"fuchsia",
},
[175517] = {
true,
false,
"blue",
},
[167965] = {
true,
false,
"blue",
},
[167612] = {
true,
false,
"blue",
},
[139800] = {
false,
false,
"fuchsia",
},
[131585] = {
false,
false,
"darkgreen",
},
[134137] = {
false,
false,
"springgreen",
},
[164737] = {
true,
false,
"fuchsia",
},
[183497] = {
true,
false,
"blue",
},
[127497] = {
false,
false,
"blue",
},
[132491] = {
false,
false,
"fuchsia",
},
[141938] = {
false,
false,
"fuchsia",
},
[185032] = {
true,
false,
"mediumpurple",
},
[174197] = {
true,
false,
"deepskyblue",
},
[81279] = {
false,
false,
"deepskyblue",
},
[151657] = {
false,
false,
"white",
},
[114319] = {
true,
false,
"blue",
},
[115406] = {
true,
false,
"deepskyblue",
},
[87252] = {
true,
false,
"mediumpurple",
},
[141939] = {
false,
false,
"blueviolet",
},
[150251] = {
true,
false,
"blue",
},
[59546] = {
true,
false,
"blue",
},
},
["extra_icon_show_enrage_border"] = {
0.85098039215686,
0,
0.074509803921569,
},
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        --Priest\n        [\"Vampiric Touch\"] = 21,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 25,\n        \n        --Rogue\n        [\"Marked for Death\"] = 101,\n        [\"Ghostly Strike\"] = 100,\n        [\"Vendetta\"] = 98,\n        [\"Shiv\"] = 97,\n        [\"Flagellation\"] = 96,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 94,\n        [\"Deadly Poison\"] = 93,\n        [\"Sinful Revelation\"] = 92,\n        [\"Between the Eyes\"] = 83,\n        [\"Pistol Shot\"] = 82,\n        -- [\"Se\"] =\n        [\"Serrated Bone Spike\"] = 0,\n        \n        --Druid\n        [\"Sunfire\"] = 100,\n        [\"Moonfire\"] = 99,\n        \n        --Monk\n        [\"Mark of the Crane\"] = 59,\n        \n        --Dungeon Debuffs\n        [\"Droman's Wrath\"] = 1001,\n        \n        --Dungeon Buffs\n        [\"Bolstering\"] = 2001,\n        [\"Slime Coated\"] = 2002,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1670756261,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 490,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "Initialization",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 17,\n        height = 13,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Time"] = 1670473318,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Url"] = "https://wago.io/f5itAXjQq/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_double_right_64",
["Enabled"] = true,
["Revision"] = 149,
["Options"] = {
},
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Adds double arrow as a target indicators option",
["Prio"] = 99,
["Name"] = "Double Arrow Target",
["PlaterCore"] = 1,
["LastHookEdited"] = "Nameplate Created",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Health Update"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    unitFrame.healthBar.lifePercent:SetText(envTable.healthFunc(unitId, envTable.forceMax))\nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    unitFrame.healthBar.lifePercent:SetText(envTable.healthFunc(unitId, envTable.forceMax))\nend\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --[[\n    ###################\n    ##                          ##\n    ##       SETTINGS       ##\n    ##                          ## \n    ###################\n   \n   envTable.forceMax is for enabling maxHP on the bars\n--]]\n    envTable.forceMax = false\n    \n    \n    -- END OF SETTINGS\n    \n    \n    local shortenNumber = function(number, significant)\n        if type(number) ~= \"number\" then\n            number = tonumber(number)\n        end\n        if not number then\n            return\n        end\n        \n        if type(significant) ~= \"number\" then\n            significant = tonumber(significant)\n        end\n        significant = significant or 3\n        \n        local affixes = {\n            \"k\",\n            \"m\",\n            \"b\",\n            \"t\",\n        }\n        affixes[0] = \"\"\n        \n        local log, floor, max, abs = math.log, math.floor, math.max, math.abs\n        \n        local powerTen = floor(log(abs(number)) / log(10)) --get the log base 10\n        powerTen = powerTen < 0 and 0 or powerTen --catch negative powers for numbers with an absolute value below 1\n        local affix = floor(powerTen / 3) --every third power of ten (so thousands) results in a new affix\n        local divNum = number / 1000^affix --get the \"new\" number by division with the floored amounts\n        local before = powerTen%3 + 1 --determine how many digits before the .\n        local after = max(0, significant - before) --and how many digits after\n        \n        return string.format(string.format(\"%%.%df%s\", after, affixes[affix]), divNum)\n    end\n    \n    envTable.healthFunc = function(unit, forceMax)\n        local current, max = UnitHealth(unit), UnitHealthMax(unit)\n        local percent = (current/max)*100\n        \n        if forceMax then\n            return shortenNumber(current)..\"/\"..shortenNumber(max)..\" \"..Round(percent)\n        else\n            return shortenNumber(current)..\" \"..Round(percent)..\"%\"\n            \n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1669366802,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Url"] = "https://wago.io/aFclVsHxa/1",
["Icon"] = 135987,
["Enabled"] = true,
["Revision"] = 158,
["Options"] = {
},
["Author"] = "Rhkqt-Tarren Mill",
["Desc"] = "Sets Health Text to rTags formatting",
["Prio"] = 99,
["Name"] = "HealthScript",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.updateText(unitFrame)\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.updateText(unitFrame)\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- text settings:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    -- positioning\n    local anchor = {\n        side = 2, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = -20, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    --frames:\n    \n    --create the text frame that will show the quest progress\n    if (not  unitFrame.healthBar.questProgressTextFrame) then\n        envTable.questProgressTextFrame = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.questProgressTextFrame, anchor);\n        unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n        envTable.questProgressTextFrame:SetText(\"\")\n    end\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    function envTable.updateText (unitFrame)\n        local text = \"\"\n        if unitFrame and unitFrame.namePlateIsQuestObjective then\n            if unitFrame.QuestAmountCurrent then\n                if unitFrame.QuestAmountTotal then\n                    text = unitFrame.QuestAmountTotal - (unitFrame.QuestAmountCurrent or 0)\n                else\n                    text = unitFrame.QuestAmountCurrent .. \"%\"\n                end\n            end\n        end\n        unitFrame.healthBar.questProgressTextFrame:SetText(text)\n    end\nend",
},
["Time"] = 1669117912,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Url"] = "https://wago.io/uwe9CEwMm/2",
["Icon"] = 132212,
["Enabled"] = true,
["Revision"] = 222,
["Options"] = {
},
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["Name"] = "QuestProgress",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        -- CUSTOM HERE --\n        if healthBar.currentAbsorb and healthBar.currentAbsorb > 0 then\n            if (showHealthAmount or showPercentAmount) then\n                healthBar.lifePercent:SetText(healthBar.lifePercent:GetText() .. \"  -  \" .. Plater.FormatNumber(healthBar.currentAbsorb))\n            elseif showAlways then\n                healthBar.lifePercent:SetText(Plater.FormatNumber(healthBar.currentAbsorb))\n            end\n        end\n        -- CUSTOM END --\n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1669362620,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/VtPjNl8Mg/7",
["Icon"] = 135940,
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "1.0.6",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "Adds absorbs to the health bar as full health value.",
["Prio"] = 99,
["version"] = 7,
["PlaterCore"] = 1,
["Name"] = "Absorb Shields in Healthbar",
["LastHookEdited"] = "Nameplate Added",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options For @scriptname",
["Name"] = "Options Intro",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = "",
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    local mark = unitId and GetRaidTargetIndex(unitId)\n    envTable.namer(unitId, mark, true, false, false, \"Created\")\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    -- Catch all \n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Updated\")\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Added\")\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFFFFFFF\", -- Yellow 5 Point Star\n        [2] = \"FFFFFFFF\", -- Orange Circle\n        [3] = \"FFFFFFFF\", -- Purple Diamond\n        [4] = \"FFFFFFFF\", -- Green Triangle\n        [5] = \"FFFFFFFF\", -- Light Blue Moon\n        [6] = \"FFFFFFFF\", -- Blue Square\n        [7] = \"FFFFFFFF\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    -- Old way was some degen fucking shit this is easier\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,  \n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true, \n        [\"Terror\"] = true, \n        [\"Totem\"] = true, \n        [\"Waycrest\"] = true,\n        --[\"Dummy\"] = true, -- Testing Purposes\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- Override for names, Thanks to Nnoggie for all of the dungeon ones\n    local renameTable = {\n        -- Testing\n        [\"Training Dummy\"] = \"Dum Dum\", \n        --[\"\"] = \"\", --Template\n        \n        --Dragonflight\n        \n        --Vault of the Incarnates\n        [\"Frost Tomb\"] = \"Skull Emoji\",\n        [\"Dathea, Ascended\"] = \"Dathea\",\n        [\"Eranog\"] = \"Eggnog\",\n        [\"Nascent Proto-Dragon\"] = \"Nascent\",\n        [\"Juvenile Frost Proto-Dragon\"] = \"Frost Dragon\",\n        \n        \n        \n        --Dragonflight Dungeons\n        \n        --Ruby Life Pools\n        [\"Thunderhead\"] = \"Thundercunt\",\n        [\"Tempest Channeler\"] = \"Tempest\",\n        [\"Flame Channeler\"] = \"Flame\",\n        [\"Defier Draghar\"] = \"Dragher\",\n        [\"Kyrakka\"] = \"Cracka\",\n        \n        --Algeth'ar Academy\n        [\"Alpha Eagle\"] = \"Alpha\",\n        [\"Crawth\"] = \"Beak Bitch\",\n        [\"Vile Lasher\"] = \"Big Lasher\",\n        \n        \n        --The Azure Vault\n        [\"Hardened Crystal\"] = \"Hard Crystal\",\n        [\"Crystal Fury\"] = \"Furry\",\n        \n        --Brackenhide Hollow\n        [\"Rotburst Totem\"] = \"Rotburst\",\n        [\"Decay Totem\"] = \"Bad Totem\",\n        \n        --Halls of Infusion\n        \n        \n        --Neltharus\n        \n        \n        --The Nokhud Offensive\n        [\"Stormsurge Totem\"] = \"Storm Totem\",\n        [\"Stormcaller Solongo\"] = \"Shlongo\",\n        [\"Stormcaller Zarii\"] = \"Sorry\",\n        [\"Soulharvester Tumen\"] = \"Twomen\",\n        [\"Soulharvester Mandakh\"] = \"Mandick\",\n        [\"Balara\"] = \"Ballerina\",\n        \n        \n        --Uldaman: Legacy of Tyr\n        \n        \n        \n        \n        --Shadowlands\n        \n        --Open World\n        [\"Fallen Knowledge-Seeker\"] = \"Seeker\",\n        \n        \n        \n        --Shadowlands Raids\n        \n        --Castle Nathria\n        [\"Stoneborn Maitre D'\"] = \"Maitre D'\",\n        [\"Rat of Unusual Size\"] = \"Big Rat\",\n        \n        --Sanctum of Domination\n        [\"Sylvanas Windrunner\"] = \"Sylvanas\",\n        \n        --Sepulcher of the First Ones\n        [\"Dausegne\"] = \"Da Sausage\",\n        [\"Anduin Wrynn\"] = \"Anduin\",\n        [\"The Jailer\"] = \"Jailer\",\n        [\"Unmade Steward\"] = \"Simp\",\n        [\"Lihuvim\"] = \"Lithium\",\n        [\"Prototype of War\"] = \"War\",\n        [\"Prototype of Duty\"] = \"Duty\",\n        [\"Prototype of Renewal\"] = \"Renewal\",\n        [\"Prototype of Absolution\"] = \"Absolution\",\n        \n        \n        \n        --Shadowlands Dungeons\n        \n        --De other Side\n        [\"Millhouse Manastorm\"] = \"Milfhouse\",\n        [\"Millificent Manastorm\"] = \"Millificent\",\n        \n        --Mists of Tirna Scithe\n        [\"Droman Oulfarran\"] = \"Simp Tree\",\n        [\"Mistcaller\"] = \"Mute Me\",\n        \n        --Necrotic Wake\n        [\"Stitching Assistant\"] = \"Stitcher\",\n        [\"Separation Assistant\"] = \"Separator\",\n        [\"Blightbone\"] = \"Blightboner\",\n        \n        --Theater of pain\n        [\"Mordretha, the Endless Empress\"] = \"Mordretha\",   \n        \n        --Plaguefall\n        [\"Congealed Slime\"] = \"Purple Slime\",\n        [\"Pestilence Slime\"] = \"Haste Slime\",\n        [\"Gushing Slime\"] = \"Green Slime\",\n        [\"Rotmarrow Slime\"] = \"Bad Slime\",\n        [\"Doctor Ickus\"] = \"Dickus\",\n        [\"Plagueroc\"] = \"Plaguecock\",\n        \n        --Tazavesh: Streets of Wonder\n        [\"Commerce Enforcer\"] = \"Assclapper\",\n        [\"So'azmi\"] = \"Sa'lami\",\n        [\"P.O.S.T. Master\"] = \"S.U.C.C. Master\",\n        [\"Portalmancer Zo'dahh\"] = \"Not The Boss\",\n        \n        --Tazavesh: So'leah's Gambit\n        [\"Murkbrine Scalebinder\"] = \"Fish Dicker\",\n        [\"Invigorating Fish Stick\"] = \"Fish Dick\",\n        [\"Hylbrande\"] = \"Hill Brad\",\n        [\"Burly Deckhand\"] = \"Dickhand\",\n        [\"Stormforged Guardian\"] = \"Don't pull me\",\n        \n        \n        \n        --Legion Dungeons\n        \n        --Return To Karazhan\n        [\"Spectral Apprentice\"] = \"Apprentice\",\n        [\"Shrieking Terror\"] = \"Terror\",\n        \n        --Halls of Valor\n        [\"Solsten\"] = \"Soulstone\",\n        \n        --Court of Stars\n        \n        \n        \n        --Mists of Pandaria Dungeons\n        \n        --Temple of the Jade Serpent\n        [\"Haunting Sha\"] = \"Haunting\",\n        [\"Peril\"] = \"Pearl\",\n        \n        \n        \n        --BFA Dungeons\n        \n        --Operation: Mechagon\n        [\"Rocket Tonk\"] = \"Rocket\",\n        [\"Strider Tonk\"] = \"Strider\",\n        [\"Bomb Tonk\"] = \"Bomb\",\n        [\"Defense Bot Mk I\"] = \"MK-I\",\n        [\"Defense Bot Mk III\"] = \"MK-III\",\n        [\"Mechagon Tinkerer\"] = \"Twinkerer\",\n        \n        \n        \n        --Seasonal Affixes\n        \n        --M+ Shrouded Affix\n        [\"Zul'gamux\"] = \"Zul'gondeez\",\n        \n        --M+ Encrypted Affix\n        [\"Urh Relic\"] = \"CDR Relic\",\n        [\"Wo Relic\"] = \"Speed Relic\",\n        [\"Vy Relic\"] = \"Haste Relic\",\n        [\"Urh Dismantler\"] = \"CDR Boi\",\n        [\"Wo Drifter\"] = \"Speed Boi\",\n        [\"Vy Interceptor\"] = \"Haste Boi\",\n        \n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs, Do i want this?? no idea\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    function envTable.namer(unitId, marker, nameColouring, isBoss, debugMode, debugEntry)\n        if unitId then\n            \n            local name = UnitName(unitId)\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            local unitName\n            -- Testing mode\n            if debugMode then\n                print(\"DebugMode: \"..debugEntry..\" - Checking for dummy name\")\n                if b == \"Dummy\" or c == \"Dummy\" or d == \"Dummy\" or e == \"Dummy\" or f == \"Dummy\" then\n                    local lastName = b:find(\"Dummy\") and b or c:find(\"Dummy\") and c or d:find(\"Dummy\") and d\n                    print(\"DebugMode: \"..debugEntry..\" - Dummy Found!\")\n                    unitName = name ~=nil and lastName\n                end\n            end\n            \n            \n            if nameBlacklist[b] then\n                unitName = name ~=nil and (a or b or c or d or e or f) or nil\n            else\n                unitName = name ~=nil and (f or e or d or c or b or a) or ni\n            end\n            \n            \n            \n            \n            \n            if unitName == nil then\n                unitName = name\n            end\n            \n            \n            if renameTable[name] then\n                unitName = renameTable[name]\n            end\n            \n            if unitId and marker and nameColouring then\n                unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(unitName, markerToHex[marker]))\n            elseif unitId then\n                unitFrame.healthBar.unitName:SetText(unitName)\n            end\n            \n        end   \n    end\nend",
},
["Time"] = 1671260602,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Url"] = "https://wago.io/cC74EIkxK/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_Monk_Ascension",
["Enabled"] = true,
["Revision"] = 814,
["Options"] = {
},
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 99,
["Name"] = "M+ Renamer",
["PlaterCore"] = 1,
["LastHookEdited"] = "Constructor",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if unitFrame.sappableIndicator then\n        unitFrame.sappableIndicator:Hide()\n        unitFrame.sappableIndicator.updateFrame:SetScript(\"OnUpdate\", function() end)\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if unitFrame.sappableIndicator then\n        unitFrame.sappableIndicator:Hide()\n        unitFrame.sappableIndicator.updateFrame:SetScript(\"OnUpdate\", function() end)\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addIndicator(unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Settings:\n    local anchorPoint = \"center\"\n    local anchorRelative = \"right\"\n    local xOffset = 9\n    local yOffset = 0\n    local relativeFrame = unitFrame.healthBar\n    \n    \n    -- functions\n    function envTable.addIndicator(unitFrame)\n        if not unitFrame.sappableIndicator then\n            unitFrame.sappableIndicator=unitFrame:CreateTexture(nil, \"OVERLAY\");\n            unitFrame.sappableIndicator:SetPoint (anchorPoint, relativeFrame, anchorRelative, xOffset, yOffset)\n            unitFrame.sappableIndicator:SetSize(17, 17);\n            unitFrame.sappableIndicator:SetTexture(\"Interface\\\\Addons\\\\CustomFolder\\\\sap\");\n            unitFrame.sappableIndicator:Hide();\n            unitFrame.sappableIndicator.updateFrame = CreateFrame(\"Frame\")\n            unitFrame.sappableIndicator.updateFrame.unitFrame = unitFrame\n        end\n        \n        unitFrame.sappableIndicator.updateFrame:SetScript(\"OnUpdate\", function(self)\n                local unitFrame = self.unitFrame\n                if not unitFrame or not unitFrame.unit then return end\n                if not unitFrame:IsVisible() then return end\n                \n                local isSappable = false\n                local creatureType = UnitCreatureType(unitFrame.unit)\n                for index, value in ipairs({'Humanoid', 'Beast', 'Demon', 'Dragonkin'}) do\n                    if (value == creatureType) then\n                        isSappable = true\n                    end\n                end\n                \n                if (isSappable and unitFrame.PlateFrame.namePlateUnitReaction <= 4 and not UnitAffectingCombat(unitFrame.unit)) then\n                    unitFrame.sappableIndicator:Show()\n                else\n                    unitFrame.sappableIndicator:Hide()\n                end\n                \n        end)\n    end\n    \nend",
},
["Time"] = 1670375663,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["arena"] = true,
["pvp"] = true,
},
["class"] = {
["Enabled"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/Zz1aEIOJR/1",
["Icon"] = 132310,
["Enabled"] = true,
["Revision"] = 319,
["semver"] = "1.0.0",
["Author"] = "Irashi-Antonidas",
["Desc"] = "Adds a \"sap\" indicator to the nameplate if the unit is sappable. (LoadConditions: Rogue, Arena and BG)",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Sappable (Custom Icon)",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["BSborderth"] = 1,
["BSstack_color"] = {
1,
0.023529414087534,
0,
1,
},
["BStimer_color"] = {
1,
1,
1,
1,
},
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.config.BShidefriendly and unitFrame.actorType == \"friendlyplayer\" then\n        if unitFrame.ExtraIconFrame:IsShown() then\n            unitFrame.ExtraIconFrame:Hide()\n        end\n    else\n        if not unitFrame.ExtraIconFrame:IsShown() then\n            unitFrame.ExtraIconFrame:Show()\n        end\n    end      \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    \n    local function BuffSepcialFormat ()\n        local DF = _G [\"DetailsFramework\"]\n        DF.IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge, spellName, isBuff, modRate)\n            \n            local actualSpellName, _, spellIcon = GetSpellInfo (spellId)\n            \n            if forceTexture then\n                spellIcon = forceTexture\n            end\n            \n            local spellName = spellName or actualSpellName or \"unknown_aura\"\n            local modRate = modRate or 1\n            \n            if (spellIcon) then\n                local profile = Plater.db.profile\n                local iconFrame = self:GetIcon()\n                iconFrame.Texture:SetTexture (spellIcon)\n                iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                \n                local size = modTable.config.BSborderth\n                \n                if (not iconFrame.PixelPerfectBorder) then\n                    iconFrame.PixelPerfectBorder = CreateFrame (\"frame\", nil, iconFrame, \"NamePlateFullBorderTemplate\")\n                end\n                \n                iconFrame.Border:Hide()\n                iconFrame.PixelPerfectBorder:SetVertexColor (Plater:ParseColors (borderColor))\n                iconFrame.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n                iconFrame.PixelPerfectBorder:UpdateSizes()\n                \n                iconFrame.Texture:SetSize(profile.extra_icon_width - size/2, profile.extra_icon_height - size/2)\n                iconFrame.Texture:ClearAllPoints()\n                iconFrame.Texture:SetAllPoints()\n                \n                if (startTime) then\n                    CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                    \n                    if (self.options.show_text) then\n                        iconFrame.CountdownText:Show()\n                        \n                        local now = GetTime()\n                        iconFrame.timeRemaining = (startTime + duration - now) / modRate\n                        iconFrame.expirationTime = startTime + duration\n                        \n                        local formattedTime = (iconFrame.timeRemaining > 0) and self.options.decimal_timer and iconFrame.parentIconRow.FormatCooldownTimeDecimal(iconFrame.timeRemaining) or iconFrame.parentIconRow.FormatCooldownTime(iconFrame.timeRemaining) or \"\"\n                        iconFrame.CountdownText:SetText (formattedTime)\n                        \n                        iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                        DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                        DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                        DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                        \n                        if modTable.config.BScbt then\n                            if (iconFrame.timeRemaining/duration < 0.225) then\n                                Plater:SetFontColor (iconFrame.CountdownText, \"red\")\n                            elseif (iconFrame.timeRemaining/duration < 0.45) then\n                                Plater:SetFontColor (iconFrame.CountdownText, \"darkorange\")\n                            else\n                                Plater:SetFontColor (iconFrame.CountdownText, modTable.config.BStimer_color)\n                            end \n                        else\n                            Plater:SetFontColor (iconFrame.CountdownText, modTable.config.BStimer_color)\n                        end\n                        \n                        if self.options.on_tick_cooldown_update then\n                            iconFrame.lastUpdateCooldown = now\n                            iconFrame:SetScript(\"OnUpdate\", self.OnIconTick)\n                        else\n                            iconFrame:SetScript(\"OnUpdate\", nil)\n                        end\n                        \n                    else\n                        iconFrame:SetScript(\"OnUpdate\", nil)\n                        iconFrame.CountdownText:Hide()\n                    end\n                    \n                    iconFrame.Cooldown:SetReverse (self.options.cooldown_reverse)\n                    iconFrame.Cooldown:SetDrawSwipe (self.options.cooldown_swipe_enabled)\n                    iconFrame.Cooldown:SetEdgeTexture (self.options.cooldown_edge_texture)\n                    iconFrame.Cooldown:SetHideCountdownNumbers (self.options.surpress_blizzard_cd_timer)\n                else\n                    iconFrame.timeRemaining = nil\n                    iconFrame.expirationTime = nil\n                    iconFrame:SetScript(\"OnUpdate\", nil)\n                    iconFrame.CountdownText:Hide()\n                end\n                \n                if (descText and self.options.desc_text) then\n                    iconFrame.Desc:Show()\n                    iconFrame.Desc:SetText (descText.text)     \n                    iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                    local Anchor = {\n                        side = modTable.config.Descanchor, \n                        x = modTable.config.Descxoff, \n                        y = modTable.config.Descyoff,\n                    }      \n                    Plater.SetAnchor (iconFrame.Desc, Anchor)\n                    DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                    DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                    DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                else\n                    iconFrame.Desc:Hide()\n                end\n                \n                \n                if (count and count > 1 and self.options.stack_text) then\n                    iconFrame.StackText:Show()\n                    iconFrame.StackText:SetText (count)\n                    iconFrame.StackText:SetTextColor (DF:ParseColors (modTable.config.BSstack_color))\n                    iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                    DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                    DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                    DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                else\n                    iconFrame.StackText:Hide()\n                end\n                \n                PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                iconFrame:Show()\n                \n                --> update the size of the frame\n                self:SetWidth ((self.options.left_padding * 2) + (modTable.config.BSpadding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                \n                --> make information available\n                iconFrame.spellId = spellId\n                iconFrame.startTime = startTime\n                iconFrame.duration = duration\n                iconFrame.count = count\n                iconFrame.debuffType = debuffType\n                iconFrame.caster = caster\n                iconFrame.canStealOrPurge = canStealOrPurge\n                iconFrame.isBuff = isBuff\n                iconFrame.spellName = spellName\n                \n                iconFrame.identifierKey = nil -- only used for \"specific\" add/remove\n                \n                --add the spell into the cache\n                self.AuraCache [spellId or -1] = true\n                self.AuraCache [spellName] = true\n                self.AuraCache.canStealOrPurge = self.AuraCache.canStealOrPurge or canStealOrPurge\n                self.AuraCache.hasEnrage = self.AuraCache.hasEnrage or debuffType == \"\" --yes, enrages are empty-string...\n                \n                --> show the frame\n                self:Show()\n                \n                return iconFrame\n            end\n        end\n    end    \n    \n    -- exchange formatting:\n    \n    function modTable.hookTimeFormat()\n        BuffSepcialFormat ()\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        BuffSepcialFormat ()\n        unitFrame.ExtraIconFrame:SetOption (\"icon_padding\", modTable.config.BSpadding)\n    end\n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    \n    modTable.hookTimeFormat()\n    \nend",
},
["Time"] = 1670754786,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/-FONAlf09/15",
["Icon"] = 134328,
["Enabled"] = true,
["Revision"] = 919,
["semver"] = "1.0.14",
["Author"] = "Driani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["version"] = 15,
["PlaterCore"] = 1,
["Name"] = "Buff Special Options",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Basic Options",
["Name"] = "Basic Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "BShidefriendly",
["Value"] = true,
["Name"] = "Hide Buff Special on Friendly UnitFrame",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide Buff Special at Friendly UnitFrame",
},
{
["Type"] = 4,
["Key"] = "BScbt",
["Value"] = true,
["Name"] = "Text Color By time",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, cooldown text color changed by time left. Below 10 is orange and below 5 is red.",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set Buff Special icon padding",
["Min"] = 0,
["Key"] = "BSpadding",
["Value"] = 1,
["Name"] = "Icon Padding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set Buff Special border thickness",
["Min"] = 0,
["Key"] = "BSborderth",
["Value"] = 1.2,
["Name"] = "Border Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Text Options",
["Name"] = "Buff Special Text Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "BStimer_color",
["Value"] = {
1,
1,
0,
1,
},
["Name"] = "Timer Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set timer text color",
},
{
["Type"] = 1,
["Key"] = "BSstack_color",
["Value"] = {
1,
1,
0,
1,
},
["Name"] = "Stack Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set stack text color",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Player Name Options",
["Name"] = "Buff Special Player Name Text Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 9,
["Desc"] = "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)) / 9(CENTER)",
["Min"] = 1,
["Key"] = "Descanchor",
["Value"] = 4,
["Name"] = "Player Name Text Anchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text y-offset",
["Min"] = -100,
["Key"] = "Descyoff",
["Value"] = -2,
["Name"] = "Player Name Text Y-offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text x-offset",
["Min"] = -100,
["Key"] = "Descxoff",
["Value"] = 0,
["Name"] = "Player Name Text X-offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Load Screen"] = "function (modTable)\n    if (Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") then\n        Plater.db.profile.aura_tracker.track_method = 0x2\n    else\n        Plater.db.profile.aura_tracker.track_method = 0x1\n    end\n    \n    Plater.RefreshDBUpvalues()\n    --Plater.FullRefreshAllPlates()\n    \n    --print(\"Load Screen\", Plater.db.profile.aura_tracker.track_method, Plater.ZoneInstanceType)\n    \nend\n\n\n",
},
["Time"] = 1669361153,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/lLK9gn7lc/5",
["Icon"] = "Interface\\Icons\\Achievement_GuildPerk_Quick and Dead",
["Enabled"] = true,
["Revision"] = 66,
["semver"] = "1.0.4",
["Author"] = "Ariani-Antonidas",
["Desc"] = "Switches to manual buff tracking in arena/pvp and to automatic tracking otherwise.",
["Prio"] = 99,
["version"] = 5,
["PlaterCore"] = 1,
["Name"] = "Arena - Buff-Tracking Mode",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.targetBorderColor = \"#ffffff\"\n    envTable.focusBorderColor = \"#00FFFF\"\n    --envTable.nonTargetBorderColor = \"white\"\n    \n    \n    function envTable.updateBorderColor(unitFrame)\n        if unitFrame.namePlateIsTarget then\n            Plater.SetBorderColor (unitFrame, envTable.targetBorderColor)\n        elseif unitFrame.IsFocus then\n            Plater.SetBorderColor (unitFrame, envTable.focusBorderColor)\n        else\n            Plater.SetBorderColor (unitFrame, envTable.nonTargetBorderColor)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1670473484,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/-ny0jWQDT/2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = true,
["Revision"] = 193,
["semver"] = "1.0.1",
["Author"] = "Driani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Target Border Color",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateBorder (unitFrame, false)\nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    envTable.UpdateBorder (unitFrame, true)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    --self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = false --Plater.db.profile.castbar_icon_show --true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", 0, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 0, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\n    \n    function envTable.UpdateBorder (unitFrame, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        --casting = not casting == false or  ((castBar.casting or castBar.channeling) and not (castBar.interrupted or castBar.failed))\n        \n        if casting then\n            if envTable.ShowIcon and castBar.Icon:IsShown() then\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:SetPoint(\"TOPLEFT\", castBar.Icon, \"TOPLEFT\", 0, 0)\n                    healthBar.border:SetPoint(\"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:SetPoint(\"TOPRIGHT\", castBar.Icon, \"TOPRIGHT\", 0, 0)\n                    healthBar.border:SetPoint(\"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            else\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:SetPoint(\"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                    healthBar.border:SetPoint(\"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:SetPoint(\"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                    healthBar.border:SetPoint(\"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            end\n        else\n            if envTable.IconAnchor == \"left\" then\n                healthBar.border:SetPoint(\"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                healthBar.border:SetPoint(\"BOTTOMRIGHT\", healthBar, \"BOTTOMRIGHT\", 0, 0)\n            elseif envTable.IconAnchor == \"right\" then\n                healthBar.border:SetPoint(\"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                healthBar.border:SetPoint(\"BOTTOMLEFT\", healthBar, \"BOTTOMLEFT\", 0, 0) \n            end\n        end\n    end\n    \n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(unitFrame.castBar, \"Hide\", function() envTable.UpdateBorder(unitFrame, false) end)\n        unitFrame.castBar.borderChangeHooked = true\n    end\n    \nend",
},
["Time"] = 1669580521,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mEN8Q6zUa/10",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["Enabled"] = true,
["Revision"] = 480,
["semver"] = "1.0.9",
["Author"] = "Viash-Thrall",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon + cast bar.",
["Prio"] = 99,
["version"] = 10,
["PlaterCore"] = 1,
["Name"] = "Cast Icon Anchor + Border",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#5d00ff\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1670281828,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/ZqU9hBu43/3",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "1.0.2",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 99,
["version"] = 3,
["PlaterCore"] = 1,
["Name"] = "Pet Threat Highlighter",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
["SPglowfreq"] = 0.59999990463257,
["SPglowxoff"] = 0.5,
["SPpixelborder"] = false,
["SPglowyoff"] = 0.5,
["SPglowparticle"] = 5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    local options1 = {\n        glowType = \"button\",\n        frequency = modTable.config.SPglowfreq\n    }\n    \n    local options2 = {\n        glowType = \"pixel\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        length = modTable.config.SPpixellength,\n        th = modTable.config.SPpixelth,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n        border = modTable.config.SPpixelborder\n    }\n    \n    local options3 = {\n        glowType = \"ants\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        scale = modTable.config.SPantsscale,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n    }\n    \n    modTable.options = (modTable.config.SPglownum == 1 and options1) or (modTable.config.SPglownum == 2 and options2) or (modTable.config.SPglownum == 3 and options3)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if not unitFrame.healthBar:IsShown() then return end\n    \n    local buffSpecialGlow = true\n    local color = modTable.config.SPglowcolor\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        \n        local auraContainer = auraContainers [containerID]\n        \n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                Plater.StartGlow(auraIcon, nil, modTable.options)\n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n        \n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    Plater.StartGlow(auraIcon, nil, modTable.options)\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
},
["Time"] = 1670754014,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/uEnDIKvvP/2",
["Icon"] = 132096,
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "1.0.1",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Steal/Purge Aura Glow",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Common Options",
["Name"] = "Common Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "1(Button) / 2(Pixel) / 3(Ants) ",
["Min"] = 1,
["Key"] = "SPglownum",
["Value"] = 2,
["Name"] = "Glow Type",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set to negative to inverse direction of rotation",
["Min"] = -2,
["Key"] = "SPglowfreq",
["Value"] = 0.5,
["Name"] = "Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "SPglowcolor",
["Value"] = {
1,
1,
0.45490196078431,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set glow color",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel & Ants Glow",
["Name"] = "Options for Pixel & Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Set number of lines",
["Min"] = 1,
["Key"] = "SPglowparticle",
["Value"] = 6,
["Name"] = "Number of Particles",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowxoff",
["Value"] = 1.2,
["Name"] = "X-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowyoff",
["Value"] = 1.2,
["Name"] = "Y-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel Glow",
["Name"] = "Options for Pixel Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "SPpixelborder",
["Value"] = false,
["Name"] = "Pixel Add Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable to true to create border under lines",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set pixel line length",
["Min"] = 0.01,
["Key"] = "SPpixellength",
["Value"] = 6,
["Name"] = "Pixel Line Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Set pixel line thickness",
["Min"] = 0.01,
["Key"] = "SPpixelth",
["Value"] = 2,
["Name"] = "Pixel Line Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Ants Glow",
["Name"] = "Options for Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Set ants glow scale",
["Min"] = 0.01,
["Key"] = "SPantsscale",
["Value"] = 0.8,
["Name"] = "Ants Glow Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateCastBarName(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --percent of total cast bar size, default: 60% spell name\n    local spellNameSize = 0.60\n    \n    --target name length limit\n    local targetNameMaxLength = 7\n    \n    --spell name length limit\n    local spellNameMaxLength = 14\n    \n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return table.concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    --update function\n    function envTable.UpdateCastBarName(unitId, castBar)\n        --do nothing if interrupted\n        if castBar.IsInterrupted then\n            return\n            \n        end\n        \n        --get the target's unitId \n        local targetUnitId = unitId .. \"target\"\n        \n        --does the unit exists?\n        if (UnitExists(targetUnitId)) then\n            \n            --get the target name\n            local targetName = UnitName(targetUnitId)\n            \n            \n            --does the target name exists?\n            if (targetName) then\n                \n                if strlenutf8(targetName) > targetNameMaxLength then\n                    targetName = strtrim(utf8sub(targetName, 0, targetNameMaxLength))\n                end\n                \n                \n                --get the current spell name\n                local spellName = castBar.SpellName\n                \n                if spellName and strlenutf8(spellName) > spellNameMaxLength then\n                    spellName = strtrim(utf8sub(spellName, 0, spellNameMaxLength))\n                end\n                \n                --reset the text in the cast bar\n                castBar.Text:SetText(spellName)\n                \n                --paint the target name with the player's class color\n                local targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                \n                --castbar width\n                local castBarWidth = castBar:GetWidth()\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth * spellNameSize)\n                \n                --set the new text in the castbar spell name fontstring\n                local currentText = castBar.Text:GetText() or \"\"\n                castBar.Text:SetText(currentText .. \" \" .. targetNameByColor .. \"\")\n                DetailsFramework:TruncateText (castBar.Text, castBarWidth)                \n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1670281866,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/jsGuJ8TUI/2",
["Icon"] = 2126355,
["Enabled"] = true,
["Revision"] = 195,
["semver"] = "1.0.1",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the cast target name with the spell name",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Cast target on spell name [Fix]",
["LastHookEdited"] = "Cast Start",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["UID"] = "0x637cb5a32d0a93c",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        \n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            \n            if prio == 1 then\n                Plater.SetNameplateScale(unitFrame, 0.9)\n                --Plater.SetNameplateColor (unitFrame, \"blue\")\n            elseif prio == 2 then\n                Plater.SetNameplateScale(unitFrame, 0.8)\n                --Plater.SetNameplateColor (unitFrame, \"yellow\")\n            end    \n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        \n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            \n            if prio == 1 then\n                Plater.SetNameplateScale(unitFrame, 0.9)\n                --Plater.SetNameplateColor (unitFrame, \"blue\")\n            elseif prio == 2 then\n                Plater.SetNameplateScale(unitFrame, 0.8)\n                --Plater.SetNameplateColor (unitFrame, \"yellow\")\n            end    \n        end\n    end\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    -- 1 = mid prio, 2 = low prio\n    -- [\"0\"] = 2, --Template\n    \n    modTable[\"npcIDs\"] = {\n        \n        --TEST\n        --[\"160325\"] = 1, --Testing Dummy\n        \n        --                                                          DUNGEONS\n        -- Temple of the Jade Serpent\n        [\"58319\"] = 2, --Lesser Sha\n        [\"62358\"] = 2, --Corrupt Droplet\n        \n        \n        --The Nokhud Offensive\n        [\"195579\"] = 2, --Primal Gust\n        \n        \n        --Court of Stars\n        [\"105703\"] = 2, --Mana Wyrm\n        [\"104295\"] = 1, --Blazing Imp\n        \n        \n        --Shadowmoon Burial Grounds\n        [\"77006\"] = 2, --Corpse Skitterling\n        [\"75451\"] = 1, --Defiled Spirit\n        \n        \n        --Algeth'ar Academy\n        [\"196642\"] = 2, --Hungry Lasher\n        [\"197398\"] = 1, --Hungry Lasher\n        [\"196694\"] = 1, --Arcane Forager\n        [\"192329\"] = 1, --Territorial Eagle\n        \n        \n        --The Azure Vault\n        [\"191313\"] = 2, -- Volatile Sapling\n        [\"187242\"] = 1, --Tarasek Delver\n        \n        \n        --Halls of Valor\n        \n        \n        --Ruby Life Pools\n        [\"190205\"] = 1, --Scorchling\n        [\"197509\"] = 2, --Primal Thundercloud\n        [\"187894\"] = 1, --Infused Whelp\n        \n        --Karazhan\n        \n        --Tazavesh\n        [\"178163\"] = 2, --Murkbrine Shorerunner\n        \n        --Theater of Pain\n        [\"163089\"] = 2, --Disgusting Refuse\n        \n        --Necrotic Wake\n        [\"166264\"] = 2, --Spare Parts\n        [\"171500\"] = 2, --Shuffling Corpse\n        [\"165138\"] = 2, --Blight bag\n        \n        --Sanguine Depths\n        [\"171455\"] = 2, --Stonewall Gargon\n        [\"168457\"] = 2, --Stonewall Gargon\n        [\"166589\"] = 2, --Animate Weapon\n        \n        \n        --Plaguefall\n        [\"168969\"] = 2, --Gushing Slime\n        \n        \n        --De Other Side\n        [\"168986\"] = 2, --Skeletal Raptor\n        \n        \n        --Halls of Atonement\n        [\"167892\"] = 1, --Tormented Soul\n        \n        \n        --                                                            RAIDS\n        \n        --Sepulcher of the First Ones\n        [\"183669\"] = 2, --Fiendish Soul\n        \n        \n        --Castle Nathria\n        [\"169925\"] = 2, --Begrudging Waiter\n        \n        \n        --Misc\n        [\"144300\"] = 2, -- \n        [\"189707\"] = 2, --Chaotic Motes\n        \n    }\nend",
},
["Time"] = 1669883272,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 1041231,
["Enabled"] = true,
["Revision"] = 839,
["Options"] = {
},
["Author"] = "Causese-Valdrakken",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["Name"] = "Priority based scaling",
["PlaterCore"] = 1,
["LastHookEdited"] = "Initialization",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit is a player, ignore\n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1670473323,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/P35nCfDqx/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "1.0.0",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color NPC",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
["castBarColorSelf"] = {
1,
0,
0.94117653369904,
1,
},
["castBarColorInterrupt"] = {
1,
1,
0,
1,
},
["stratas"] = "MEDIUM",
},
["HooksTemp"] = {
},
["UID"] = "0x636726a724a7104",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.reflectableSpells = {\n        [167385] = true, -- Uber Strike for testing\n        --[] = true, --\n        -- -- -- Raids\n        \n        -- -- Vault of the Incarnates\n        [381315] = true, -- Awakened Earth - Terros\n        [391322] = true, -- Explosive reaction - Terros\n        [372315] = true, -- Frost Spike - The Primal Council\n        [372394] = true, -- Lightning Bolt - The Primal Council\n        [376851] = true, -- Aeriel Buffet - Dathea, Ascended\n        [385812] = true, -- Aeriel Slash - Dathea, Ascended\n        [375424] = true, -- Raging Tempest - Dathea, Ascended\n        [375653] = true, -- Static Jolt - Broodkeeper Diurna\n        \n        -- -- Sepulcher of the First Ones\n        \n        [360162] = true, -- Split Resolution - Vigilant Guardian\n        [361001] = true, -- Wave of Disintegration - Vigilant Guardian\n        [359778] = true, -- Ephemera Dust - Skolex, the Insatiable Ravener\n        [359976] = true, -- Riftmaw *normal only* - Skolex, the Insatiable Ravener\n        [364030] = true, -- Debilitating Ray - Artificer Xy'mox 2.0\n        [365801] = true, -- Relic Collapse - Artificer Xy'mox 2.0\n        [362885] = true, -- Stasis Trap *normal only* - Artificer Xy'mox 2.0\n        [363607] = true, -- Domination Bolt - Dausegne, the Fallen Oracle\n        [361513] = true, -- Obliteration Arc - Dausegne, the Fallen Oracle\n        [360959] = true, -- Staggering Barrage - Dausegne, the Fallen Oracle\n        [366234] = true, -- Animastorm  - Prototype Pantheon\n        [362383] = true, -- Anima Bolt - Prototype Pantheon\n        [360259] = true, -- Gloom Bolt - Prototype Pantheon\n        [360618] = true, -- Necrosis - Prototype Pantheon\n        [364865] = true, -- Sinful Projection  - Prototype Pantheon\n        [365041] = true, -- Windswept Wings - Prototype Pantheon\n        [361579] = true, -- Withering Nova - Prototype Pantheon\n        [364073] = true, -- Degenerate - Lihuvim, Principal Architect\n        [360006] = true, -- Cloud of Carrion - Lords of Dread\n        \n        -- -- Sanctum of Domination\n        \n        [350803] = true, -- Piercing Lens (add) - Eye of the Jailer\n        [348969] = true, -- Immediate Extermination - Eye of the Jailer\n        [350283] = true, -- Soulful Blast - The Nine\n        [354231] = true, -- Soul Manacles - Soulrender Domazain\n        [350801] = true, -- Unleashed Tyranny - Soulrender Domazain\n        [353603] = true, -- Diviner's Probe - Fatescribe Roh-Kalo\n        [353931] = true, -- Twist Fate - Fatescribe Roh-Kalo\n        [353398] = true, -- Anomalous Blast - Fatescribe Roh-Kalo\n        [352141] = true, -- Banshee's Cry - Kel'thuzad\n        [352650] = true, -- Ranger's Heartseeker - Sylvanas Windrunner\n        [358183] = true, -- Banshee's Blades - Sylvanas Windrunner\n        \n        -- -- Castle Nathria\n        \n        [334852] = true, -- Petrifying Howl - Huntsman Altimor\n        [335114] = true, -- Sinseeker - Huntsman Altimor\n        [328885] = true, -- Greater Castigation - Sun King's Salvation\n        [331573] = true, -- Unconscionable Guilt - Lady Inerva Darkvein\n        [342321] = true, -- Concentrated Anima - Lady Inerva Darkvein\n        [342320] = true, -- Lightly Concentrated Anima - Lady Inerva Darkvein\n        [330968] = true, -- Throw Food - The Council of Blood\n        [346800] = true, -- Waltz of Blood - The Council of Blood\n        [346654] = true, -- Drain Essence - The Council of Blood\n        [331634] = true, -- Dark Recital - The Council of Blood\n        [326005] = true, -- Indignation - Sire Denathrius\n        [326994] = true, -- Blood Price - Sire Denathrius\n        [326851] = true, -- Blood Price - Sire Denathrius\n        \n        -- -- -- New Mythic+\n        \n        -- -- Algeth'ar Academy\n        \n        [374352] = true, -- Energy Bomb - Echo of Doragosa\n        [387975] = true, -- Arcane Missles - Invoker\n        [388862] = true, -- Surge - Manafiend\n        \n        -- -- Court of Stars\n        \n        [211401] = true, -- Drifting Embers - Blazing Imp\n        [211412] = true, -- Drifting Embers - Blazing Imp\n        [211406] = true, -- Firebolt - Blazing Imp\n        [373364] = true, -- Vampiric Claws - Gerenth\n        [209413] = true, -- Suppress  - Construct\n        [212784] = true, -- Eye Storm - Inquisitor\n        \n        -- -- Halls of Valor\n        \n        [193668] = true, -- Savage Blade - Skovald\n        [192288] = true, -- Searing Light - Olmyr\n        [198959] = true, -- Etch - Runecarver\n        [198962] = true, -- Shattered Rune - Runecarver\n        [198595] = true, -- Thunderous Bolt - Thundercaller\n        \n        -- -- Ruby life pools\n        \n        [372683] = true, -- Cold Claws - Whelpling\n        [372808] = true, -- Frigid Shard - Chillworn\n        [384194] = true, -- Cinderbolt - Cinderweaver\n        [384197] = true, -- Cinderbolt - Cinderweaver\n        \n        -- -- Shadowmoon Burial Grounds\n        \n        [398206] = true, -- Death Blast - Exhumed Spirit\n        [156776] = true, -- Rending Voidlash - Enslaver\n        [153524] = true, -- Plague Spit - Bat\n        \n        -- -- Temple of the Jade Serpent\n        \n        [397801] = true, -- Hydrolance - Wise Mari\n        [114571] = true, -- Agony - Lorewalker Stonestep\n        [106823] = true, -- Serpent Strike - Flameheart\n        [397888] = true, -- Hydrolance - Waterspeaker\n        [397914] = true, -- Defiling Mist - Mistweaver\n        \n        -- -- Azure Vault\n        \n        [374789] = true, -- Infused Strike - Leymor\n        [384978] = true, -- Dragon Strike - Umbrelskul\n        [389804] = true, -- Heavy Tome - Curator\n        \n        -- -- Nokhud Offensive\n        \n        [384761] = true, -- Wind Burst - Raging tempest\n        [382670] = true, -- Gale Arrow - Teera & Maruuk\n        [376827] = true, -- Conductive Strike - Khan\n        [376829] = true, -- Thunder Strike - Khan\n        [386012] = true, -- Stormbolt - Stormspeaker\n        [387127] = true, -- Chain lightning - Thunderbeast\n        [387125] = true, -- Thunderstrike - Thunderbeast\n        [386026] = true, -- Surge - Squall\n        \n        \n        -- -- Tazavesh: Streets/Gambit\n        \n        [345770] = true, -- Impound Contraband  \n        [347632] = true, -- Energy Blade\n        [347635] = true, -- Energy Star\n        [358919] = true, -- Static Mace\n        [357196] = true, -- Hyperlight Bolt\n        [355888] = true, -- Hard Light Baton\n        [353836] = true, -- Hyperlight Bolt\n        [355915] = true, -- Glyph of Restraint\n        [355930] = true, -- Spark Burn\n        [356031] = true, -- Stasis Beam\n        [356324] = true, -- Empowered Glyph of Restraint\n        [354297] = true, -- Hyperlight Bolt\n        [356843] = true, -- Hyperlight Salvo/Brackish Bolt (?)\n        [355641] = true, -- Scintillate\n        [355225] = true, -- Waterbolt\n        \n        -- -- Return to Karazhan: Upper/Lower\n        \n        [228254] = true, -- Soul Leech\n        [228086] = true, -- Pyrotechnics\n        [29928]  = true, -- Immolate\n        [29492]  = true, -- Searing Pain\n        [241788] = true, -- Shadow Blast\n        [228277] = true, -- Shackles of Servitude\n        [241798] = true, -- KIss of Death\n        [230050] = true, -- Force Blade\n        [228700] = true, -- Arcane Barrage\n        [374743] = true, -- Fel Fireball\n        [227800] = true, -- Holy Shock - Maiden\n        [227809] = true, -- Holy Bolt - Maiden\n        [228852] = true, -- Shared Suffering - Attumen the Huntsman\n        [227615] = true, -- Inferno Bolt - Shade of Medivh\n        [227768] = true, -- Piercing Missiles - Shade of Medivh\n        [229083] = true, -- Burning Blast - Viz'aduum the Watcher\n        \n        -- -- Iron Docks\n        \n        [172771] = true, -- Incendiary Slug\n        [173514] = true, -- Lava Blast\n        [173480] = true, -- Lava Barrage\n        [165122] = true, -- Blood Bolt - Ahri'ok Dugru\n        [163740] = true, -- Tainted Blood - Ahri'ok Dugru\n        [163376] = true, -- Malfunctioning Jumper Cables 9000 XL - Neesa Nox\n        [168955] = true, -- Shattering Blade - Koramar\n        \n        -- -- Mechagon: Junkyard/Workshop\n        \n        [298669] = true, -- Taze - Trixie & Naeno / Blossom Blast - Machinist's Garden (?)\n        [302274] = true, -- Fulminating Zap - HK-8 Aerial Oppression Unit\n        [273185] = true, -- Shield Bash - Trash\n        [299438] = true, -- Sledgehammer - Trash\n        [300764] = true, -- Slimebolt - Trash\n        [300687] = true, -- Consuming Slime - Trash\n        [300211] = true, -- Zap - Trash\n        [301088] = true, -- Detonate / Arcing Zap - Defense Bot Mk III (?)\n        [294195] = true, -- Arcing Zap\n        [293827] = true, -- Giga-Wallop / Giga-Wallop - Mechagon Tinkerer (?)\n        [291878] = true, -- Pulse Blast - King Mechagon\n        [291928] = true, -- Giga-Zap - King Mechagon\n        \n        -- -- Grimrail Depot\n        \n        [164192] = true, -- 50,000 Volts\n        [176025] = true, -- Lava Wreath\n        [166341] = true, -- Thunder Zone\n        \n        -- -- -- Old Mythic+\n        \n        -- -- De Other Side\n        \n        [322736] = true, -- Piercing Barb - Hakkar the Soulflayer\n        [323166] = true, -- Corrupted Blood - Hakkar the Soulflayer\n        [320008] = true, -- Frostbolt - The Manastorms\n        [320230] = true, -- Explosive Contrivance - Dealer Xy'exa\n        [323687] = true, -- Arcane Lightning - Dealer Xy'exa\n        [325258] = true, -- Master of Death - Mueh'zala\n        [327646] = true, -- Soulcrusher - Mueh'zala\n        [332705] = true, -- Smite\n        [332707] = true, -- Shadow Word: Pain\n        [332605] = true, -- Hex\n        [334076] = true, -- Shadowcore\n        [332196] = true, -- Discharge\n        [328707] = true, -- Scribe\n        [333641] = true, -- Reaver\n        [332234] = true, -- Essential Oil\n        [333711] = true, -- Decript Bite\n        [323544] = true, -- Blood Nova\n        \n        -- -- Halls of Atonement\n        \n        [322977] = true, -- Sinlight Visions - Halkias\n        [328322] = true, -- Villainous Bolt - Ecehlon\n        [323538] = true, -- Bolt of Power - High Adjucator Aleez\n        [328791] = true, -- Ritual of Woe - Lord Chamberlain\n        [338003] = true, -- Wicked Bolt\n        [325700] = true, -- Collect Sins\n        [326829] = true, -- Wicked Bolt\n        \n        -- -- Mists of Tirna Scithe\n        \n        [323057] = true, -- Spirit Bolt - Ingra Maloch\n        [324923] = true, -- Bramble Burst\n        [326319] = true, -- Spirit Bolt\n        [322767] = true, -- Spirit Bolt\n        [322557] = true, -- Soul Split\n        [331718] = true, -- Spear Flurry\n        [325223] = true, -- Anima Injection\n        [325418] = true, -- Volatile Acid\n        [322486] = true, -- Overgrowth\n        \n        -- -- Plaguefall;\n        \n        [324527] = true, -- Plaguestomp - Globrog\n        [329110] = true, -- Slime Injection - Doctor Ickus\n        [328475] = true, -- Enveloping Webbing\n        [327995] = true, -- Doom Shroom\n        [327552] = true, -- Doom Shroom\n        [328002] = true, -- Hurl Spores\n        [328180] = true, -- Gripping Infection\n        [328094] = true, -- Pestilence Bolt\n        [334926] = true, -- Wretched Phlegm\n        [320512] = true, -- Corroded Claws\n        \n        -- -- Sanguine Depths\n        \n        [322554] = true, -- Castigate - Executor Tarvold\n        [326712] = true, -- Dark Bolt\n        [321249] = true, -- Shadow Claws\n        [326827] = true, -- Dread Bindings\n        [326837] = true, -- Gloom Burst\n        [326952] = true, -- Fiery Cantrip\n        [322169] = true, -- Growing Mistrust\n        [321038] = true, -- Wrack Soul\n        \n        -- -- Spires of Ascension\n        \n        [324368] = true, -- Attenuated Barrage - Kin-Tara\n        [324608] = true, -- Charged Stomp - Oryphrion\n        [334053] = true, -- Purifying Blast - Oryphrion\n        [317661] = true, -- Insidious Venom\n        [323804] = true, -- Dark Seeker\n        \n        -- -- Necrotic Wake\n        \n        [320637] = true, -- Fetid Gas - Blightbone\n        [328146] = true, -- Fetid Gas - Blightbone\n        [328667] = true, -- Frostbolt Volley - Amarth, the Harvester\n        [320788] = true, -- Frozen Binds - Nalthor the Rimebinder\n        [322274] = true, -- Enfeeble - Nalthor the Rimebinder\n        [334748] = true, -- Drain Fluids\n        [320462] = true, -- Necrotic Bolt\n        [320170] = true, -- Necrotic Bolt\n        [320171] = true, -- Necrotic Bolt\n        [333479] = true, -- Spew Disease\n        [323347] = true, -- Clinging Darkness\n        \n        -- -- Theater of Pain\n        \n        [320120] = true, -- Plague Bolt - An Affront of Challengers\n        [320300] = true, -- Necromantic Bolt - An Affront of Challengers\n        [319669] = true, -- Spectral Reach - Kul'tharok\n        [324079] = true, -- Reaping Scythe - Mordretha, the Endless Empress\n        [324589] = true, -- Death Bolt - Mordretha, the Endless Empress\n        [323608] = true, -- Dark Devastation - Mordretha, the Endless Empress\n        [330784] = true, -- Necrotic Bolt\n        [330703] = true, -- Decaying Filth\n        [333299] = true, -- Curse of Desolation\n        [330875] = true, -- Spirit Frost\n        [330810] = true, -- Bind Soul\n        [332550] = true  -- Soul Touch\n    };\n    \n    envTable.interruptSpells = {\n        6552 -- Pummel\n    };\n    \n    envTable.castingStrata = modTable.config.stratas;\n    envTable.isWarrior = select(3, UnitClass(\"player\")) == 1;\n    \n    -- Function to apply the reflectable cast bar effects. Returns true if the effects were applied,\n    -- false otherwise.\n    envTable.ApplyReflectable = function (unitFrame, casterId)\n        local spellId = unitFrame.castBar.SpellID;\n        \n        -- IF  You are a warrior\n        -- AND The spell being cast is reflectable\n        -- AND The target is you\n        if envTable.isWarrior and envTable.reflectableSpells[spellId] and UnitIsUnit(casterId .. \"target\", \"player\") then\n            local _, duration = GetSpellCooldown(23920);\n            \n            -- IF Spell reflect is off CD\n            if duration == 0 then\n                Plater.SetCastBarColor(unitFrame, modTable.config.castBarColorSelf);\n                Plater.SetCastBarBorderColor(unitFrame, modTable.config.castBarColorSelf);\n                return true; -- Effect was applied\n            end\n        end\n        \n        return false; -- No effects\n    end\n    \n    -- Function to apply the interruptible cast bar effects. Returns true if the effects were\n    -- applied, false otherwise.\n    envTable.ApplyInterruptible = function (unitFrame, casterId)\n        -- IF  The spell being cast is interruptible\n        -- AND The caster is an interruptible target\n        if unitFrame.castBar.CanInterrupt and UnitCanAttack(\"player\", casterId) then\n            -- Iterate through all the interrupt spells available to your current class.\n            for _, interruptId in ipairs(envTable.interruptSpells) do\n                local _, duration = GetSpellCooldown(interruptId);\n                -- IF An interrupt is off CD\n                if duration == 0 then\n                    unitFrame:SetFrameStrata(envTable.castingStrata);\n                    Plater.SetCastBarColor(unitFrame, modTable.config.castBarColorInterrupt);\n                    Plater.SetCastBarBorderColor(unitFrame, modTable.config.castBarColorInterrupt);\n                    return true; -- Effect was applied\n                end\n            end\n        end\n        \n        return false; -- No effects\n    end\nend",
["Cast Start"] = "function (self, casterId, unitFrame, envTable, modTable)\n    if envTable.ApplyReflectable(unitFrame, casterId) then\n    elseif envTable.ApplyInterruptible(unitFrame, casterId) then\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    Plater.SetCastBarColor(unitFrame);\n    Plater.SetCastBarBorderColor(unitFrame);\n    Plater.RefreshNameplateStrata(unitFrame);\nend\n\n\n",
},
["Time"] = 1671261619,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["71"] = true,
["Enabled"] = true,
["73"] = true,
["72"] = true,
},
},
["url"] = "https://wago.io/ACU9YCmh7/5",
["Icon"] = 132361,
["Enabled"] = true,
["Revision"] = 284,
["semver"] = "1.0.4",
["Author"] = "Ragebucket-Sen'jin",
["Desc"] = "A helpful collection of cast bar coloring conditions to make it obvious for when you can reflect or interrupt a spell.",
["Prio"] = 99,
["version"] = 5,
["PlaterCore"] = 1,
["LastHookEdited"] = "Cast Stop",
["Options"] = {
{
["Type"] = 5,
["Key"] = "unused1",
["Value"] = "Reflectable Cast Settings",
["Name"] = "Section 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "castBarColorSelf",
["Value"] = {
0,
0.89803928136826,
1,
1,
},
["Name"] = "Cast Bar Color: Targeting you, Spell Reflection off CD",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of cast bar for reflectable spells targeting you. Only applies if you can cast Spell Reflection.",
},
{
["Type"] = 6,
["Key"] = "unused2",
["Value"] = 0,
["Name"] = "Blank 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "unused3",
["Value"] = "Interruptible Cast Settings",
["Name"] = "Section 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 3,
["Key"] = "stratas",
["Value"] = "MEDIUM",
["Name"] = "Casting Strata",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "When an enemy is casting a spell we can interrupt, change the strata of the unit frame to this configuration option. The strata will revert to the default after the cast ends.",
},
{
["Type"] = 1,
["Key"] = "castBarColorInterrupt",
["Value"] = {
1,
0,
0.015686275437474,
1,
},
["Name"] = "Cast Bar Color: Can interrupt, interrupt off CD",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar for spells you can interrupt. This color is only applied if your interrupt is off cooldown.",
},
},
["Name"] = "Spell Reflect cast bar",
},
{
["OptionsValues"] = {
["EXEbdrcolor"] = {
1,
0.37647062540054,
0,
1,
},
["EXEhbcon"] = false,
["EXEalert"] = 0,
["EXEhicolor"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
0,
},
["onlyNPC"] = true,
["EXEbdron"] = true,
},
["HooksTemp"] = {
},
["UID"] = "0x6150129e178c7fc5",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    do        \n        function envTable.UnitInExecuteRange (unitFrame)\n            if (modTable.config.onlyNPC and UnitIsPlayer(unitFrame.unit)) or\n            (modTable.config.TrackAggro and\n                ((unitFrame.namePlateThreatIsTanking and not Plater.PlayerIsTank) or\n                    (not unitFrame.namePlateThreatIsTanking and Plater.PlayerIsTank))) then\n                if unitFrame.executeRangeColored then\n                    unitFrame.executeRangeColored = false\n                end\n                return \n            end             \n            \n            if (modTable.config.EXEhbcon) then\n                Plater.SetNameplateColor (unitFrame, modTable.config.EXEhbcolor)\n                unitFrame.executeRangeColored = true\n            end\n            \n            if (modTable.config.EXEbdron) then\n                Plater.SetBorderColor (unitFrame, modTable.config.EXEbdrcolor)\n                unitFrame.executeRangeColored = true\n            end\n        end\n        \n        function envTable.UnitInExecuteAlertRange (unitFrame, divisorPercent)\n            if (modTable.config.EXEhdoff) then\n                unitFrame.healthBar.healthCutOff:Hide()          \n                unitFrame.healthBar.ExecuteGlowUp:Hide()\n                unitFrame.healthBar.ExecuteGlowDown:Hide()\n                unitFrame.healthBar.executeRange:Hide()\n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (modTable.config.EXEhdcolor))\n            healthBar.healthCutOff.ShowAnimation:Play()\n            \n            if (Plater.db.profile.health_cutoff_extra_glow) then\n                healthBar.ExecuteGlowUp.ShowAnimation:Play()\n                healthBar.ExecuteGlowDown.ShowAnimation:Play()\n            end\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (modTable.config.EXEhicolor))\n            \n            if (modTable.EXEenabled) or (modTable.uEXEenabled) then\n                healthBar.healthCutOff:ClearAllPoints()     \n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                \n                healthBar.executeRange:ClearAllPoints()\n                if (divisorPercent == modTable.EXEpercent) then\n                    healthBar.executeRange:SetTexCoord (0, modTable.EXEpercent, 0, 1)\n                    healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                    healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n                elseif (divisorPercent == modTable.SER) then\n                    healthBar.executeRange:SetTexCoord (0, modTable.SER, 0, 1)\n                    healthBar.executeRange:SetPoint (\"left\", healthBar.healthCutOff, \"center\")\n                    healthBar.executeRange:SetPoint (\"right\", healthBar, \"right\", 0, 0)\n                end\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n            end\n        end\n    end\nend",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateEXETalent()\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if UnitIsTapDenied (unitId) or unitFrame.IsSelf or unitFrame.PlayerCannotAttack or not unitFrame.healthBar:IsShown() then return end \n    \n    if (modTable.EXEenabled) or (modTable.uEXEenabled) then  \n        \n        local percent = unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax\n        local execute = modTable.EXEpercent\n        if (modTable.EXEenabled) and (percent <= execute) then\n            if not unitFrame.coloredByScript then\n                envTable.UnitInExecuteRange(unitFrame)\n            end\n            if not unitFrame.healthBar.healthCutOff:IsShown() then\n                envTable.UnitInExecuteAlertRange (unitFrame, execute)\n            end\n        elseif (modTable.uEXEenabled) and (percent >= modTable.SER and percent < 1) then\n            if not unitFrame.coloredByScript then\n                envTable.UnitInExecuteRange(unitFrame)\n            end\n            if not unitFrame.healthBar.healthCutOff:IsShown() then\n                envTable.UnitInExecuteAlertRange (unitFrame, modTable.SER)\n            end\n        else\n            if unitFrame.executeRangeColored then\n                if modTable.config.EXEhbcon then\n                    Plater.RefreshNameplateColor (unitFrame)\n                end                \n                if modTable.config.EXEbdron then\n                    Plater.SetBorderColor (unitFrame)\n                end                \n                unitFrame.executeRangeColored = false\n            end\n            \n            if (modTable.EXEenabled) and (percent > execute and percent <= execute + modTable.EXEalert) then\n                if not unitFrame.healthBar.healthCutOff:IsShown() then\n                    envTable.UnitInExecuteAlertRange (unitFrame, execute)\n                end\n            else\n                if unitFrame.healthBar.healthCutOff:IsShown() then\n                    unitFrame.healthBar.healthCutOff:Hide() \n                    unitFrame.healthBar.ExecuteGlowUp:Hide()\n                    unitFrame.healthBar.ExecuteGlowDown:Hide()\n                    unitFrame.healthBar.executeRange:Hide()\n                end\n            end\n        end\n        -- dirty hax\n        unitFrame.healthBar.healthCutOff:SetAlpha(modTable.config.EXEhdalpha / 100)\n    else\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    function modTable.UpdateEXETalent()\n        modTable.EXEenabled = false\n        modTable.uEXEenabled = false\n        modTable.EXEpercent = 0\n        modTable.EXEalert = modTable.config.EXEalert/100\n        modTable.SER = 1\n        \n        local _, class = UnitClass (\"player\")\n        local spec = GetSpecialization()\n        local specID = GetSpecializationInfo (spec) or 0\n        if not (spec or class or specID) or specID == 0 then return end\n        \n        if (class == \"MAGE\") then\n            if (specID == 62) then \n                local using_Bombardment = IsPlayerSpell(384581)\n                if (using_Bombardment) then\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.35\n                end\n            elseif (specID == 63) then \n                local using_Firestarter = IsPlayerSpell(205026)\n                local using_Touch = IsPlayerSpell(269644)\n                if (using_Firestarter) then\n                    modTable.uEXEenabled = true\n                    modTable.SER = 0.9\n                end\n                if (using_Touch) then\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.3\n                end\n            end\n        elseif (class == \"WARLOCK\") then\n            if (specID == 265) then \n                local using_Souldrain = IsPlayerSpell(198590)\n                if (using_Souldrain) then\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.2\n                end\n            elseif (specID == 267) then \n                local using_Shadowburn = IsPlayerSpell(17877)\n                if (using_Shadowburn) then\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.2\n                end\n            end\n        elseif (class == \"PRIEST\") then\n            local using_ToF = IsPlayerSpell(390972)\n            local using_SWD = IsPlayerSpell(32379)\n            if (using_ToF) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.2\n            elseif (using_SWD) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.2\n            end\n        elseif (class == \"WARRIOR\") then\n            modTable.EXEenabled = true\n            modTable.EXEpercent = 0.2    \n            if ((specID == 72 and IsPlayerSpell(206315)) or IsPlayerSpell(281001)) then\n                modTable.EXEpercent = 0.35\n            end\n        elseif (class == \"HUNTER\") then\n            local using_KillShot = IsPlayerSpell(53351)\n            local using_KillerInstinct = IsPlayerSpell(273887)\n            if (using_KillerInstinct) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.35\n            elseif (using_KillShot) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.2\n            end\n            \n            if (specID == 254) then\n                local using_CarefulAim = IsPlayerSpell(260228)\n                if (using_CarefulAim) then\n                    modTable.uEXEenabled = true\n                    modTable.SER = 0.7\n                end\n            end\n        elseif (class == \"ROGUE\") then\n            if (specID == 259) then \n                local using_Blindside = IsPlayerSpell(328085)\n                if (using_Blindside) then\n                    modTable.EXEenabled = true\n                    modTable.EXEpercent = 0.35\n                end\n            end\n        elseif (class == \"PALADIN\") then\n            if IsPlayerSpell(24275) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.2\n            end\n        elseif (class == \"MONK\") then\n            if IsPlayerSpell(322109) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.15\n            end\n        elseif (class == \"DEATHKNIGHT\") then\n            local using_Soulreaper = IsPlayerSpell(343294)\n            if (using_Soulreaper) then\n                modTable.EXEenabled = true\n                modTable.EXEpercent = 0.35\n            end\n        end\n        \n        local EXECUTE = EXECUTE or CreateFrame(\"frame\", \"EXECUTE\", UIParent)\n        EXECUTE:RegisterEvent(\"PLAYER_EQUIPMENT_CHANGED\")\n        EXECUTE:RegisterEvent(\"SOULBIND_ACTIVATED\")\n        EXECUTE:SetScript(\"OnEvent\", function(self, event, ...) \n                modTable.UpdateEXETalent()\n        end)\n    end\nend",
["Player Logon"] = "function (modTable)\n    modTable.UpdateEXETalent()\nend",
},
["Time"] = 1670809382,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/uCoprJFNs/3",
["Icon"] = 135358,
["Enabled"] = true,
["Revision"] = 3471,
["semver"] = "1.0.2",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Prio"] = 98,
["version"] = 3,
["PlaterCore"] = 1,
["LastHookEdited"] = "Nameplate Updated",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Execute Color Options",
["Name"] = "Execute Color Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "EXEhbcon",
["Value"] = true,
["Name"] = "Enable Execute Healthbar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable Execute Healthbar Color",
},
{
["Type"] = 1,
["Key"] = "EXEhbcolor",
["Value"] = {
0.3921568627451,
0.15294117647059,
1,
1,
},
["Name"] = "Execute Healthbar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Healthbar Color",
},
{
["Type"] = 4,
["Key"] = "EXEbdron",
["Value"] = false,
["Name"] = "Enable Execute Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable Execute Border Color",
},
{
["Type"] = 1,
["Key"] = "EXEbdrcolor",
["Value"] = {
0.3921568627451,
0.15294117647059,
1,
1,
},
["Name"] = "Execute Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Border Color",
},
{
["Type"] = 4,
["Key"] = "onlyNPC",
["Value"] = true,
["Name"] = "Only on NPC",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Apply these features only on NPC",
},
{
["Type"] = 4,
["Key"] = "TrackAggro",
["Value"] = false,
["Name"] = "Track Aggro Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use threat colors if you are tank without aggro or dps with aggro",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Execute Divisor Options",
["Name"] = "Execute Divisor Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "EXEhdoff",
["Value"] = false,
["Name"] = "Disable Execute Health Divisor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Disable Execute Health Divisor",
},
{
["Type"] = 1,
["Key"] = "EXEhdcolor",
["Value"] = {
1,
1,
1,
0.8500000089407,
},
["Name"] = "Execute Health Divisor Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Health Divisor Color",
},
{
["Type"] = 1,
["Key"] = "EXEhicolor",
["Value"] = {
0.27843137254902,
0,
1,
0.25,
},
["Name"] = "Execute Health Indicator Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Execute Health Indicator Color",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set +% of health to show Execute Divisor before entering execute range.",
["Min"] = 0,
["Key"] = "EXEalert",
["Value"] = 13,
["Name"] = "Preview Divisor %",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Force set health Divisor alpha value.",
["Min"] = 0,
["Key"] = "EXEhdalpha",
["Value"] = 50,
["Name"] = "Divisor Alpha %",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["Name"] = "Advanced Execute Range [Fixed]",
},
},
["auras_per_row_amount2"] = 4,
["aura_width"] = 25,
["ghost_auras"] = {
["enabled"] = true,
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["range_check_enabled"] = false,
["indicator_rare"] = false,
["extra_icon_timer_size"] = 11,
["target_highlight_color"] = {
0.9921568627451,
1,
0.97254901960784,
},
["extra_icon_stack_outline"] = "OUTLINE",
["resources"] = {
["scale"] = 0.79999995231628,
},
["click_space"] = {
nil,
21,
},
["extra_icon_auras"] = {
328501,
328986,
204490,
},
["aura2_grow_direction"] = 3,
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["castbar_target_anchor"] = {
["y"] = -1.5,
["x"] = -13,
},
["pet_width_scale"] = 0.9999999403953552,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["useCastbarColor"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1675976853,
["__TrashAt"] = 1683497516,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Revision"] = 831,
["semver"] = "",
["url"] = "",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
268030,
257784,
337943,
320822,
333292,
341840,
324987,
333478,
178072,
330438,
329423,
350287,
334928,
348428,
330532,
358980,
351073,
358026,
357144,
351603,
356023,
330513,
334076,
237946,
237952,
312262,
242733,
362628,
316443,
356031,
356011,
356001,
355642,
355644,
355782,
355057,
356133,
357260,
357284,
347015,
355139,
336451,
364240,
364241,
361923,
368063,
356407,
363024,
355584,
334664,
340300,
366288,
232120,
228554,
228009,
228025,
228019,
227977,
228278,
228280,
228567,
29339,
169341,
162415,
340037,
373513,
373618,
167232,
227646,
375606,
386549,
385568,
385393,
388211,
211464,
215433,
371983,
373405,
391599,
387627,
375653,
388392,
387862,
392457,
396812,
383823,
371624,
393309,
393296,
391268,
393429,
374623,
390548,
391019,
387615,
152818,
225100,
210261,
212784,
392486,
397889,
395859,
385331,
388804,
156718,
398206,
198959,
106856,
106864,
397394,
367500,
377488,
377612,
385574,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Very Important [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["__TrashAt"] = 1724364031,
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            self.FrameOverlay.LeapArrow1:Show()\n            self.FrameOverlay.LeapArrow2:Show()\n            self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n\n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719716101,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 107,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["__TrashAt"] = 1725579060,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/2\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(16, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = fadeInDuration\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["Name"] = "Cast - Heroic Leap [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["SpellIds"] = {
447141,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1719710916,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 79,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["__TrashAt"] = 1725579060,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["SpellIds"] = {
343470,
423228,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n   self.Text:Hide() \nend\n\n\n",
["Time"] = 1719711114,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 154,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["__TrashAt"] = 1725579060,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    print(envTable.dotAnimation1.dotTexture:GetAlpha())\n    print(envTable.dotAnimation1.dotTexture:GetVertexColor())\n    print(envTable.dotAnimation1.dotTexture:IsShown())\n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["Name"] = "Cast - Ongoing Cast [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["SpellIds"] = {
431364,
423327,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719693487,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1249,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["__TrashAt"] = 1725579060,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    self.Text:Hide()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Heal Cut [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["SpellIds"] = {
450756,
451097,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
},
["NpcNames"] = {
},
},
},
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark6",
["aura_width2"] = 25,
["last_news_time"] = 1660430782,
["indicator_spec"] = false,
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0.8000030517578125,
["first_run3"] = true,
["cast_statusbar_spark_alpha"] = 0.5,
["target_shady_enabled"] = false,
["hover_highlight_alpha"] = 0.5,
["cast_statusbar_bgcolor"] = {
0.21176470588235,
0.21176470588235,
0.21176470588235,
0.90000000596046,
},
["aura_stack_color"] = {
nil,
0,
0.062745098039216,
},
["health_statusbar_bgtexture"] = "Details Flat",
["indicator_raidmark_anchor"] = {
["y"] = 7.819999694824219,
["x"] = 0,
["side"] = 12,
},
["aura_show_enrage"] = true,
["aura_tracker"] = {
["buff_tracked"] = {
["227931"] = true,
["365338"] = true,
["389808"] = true,
["343502"] = false,
["209859"] = true,
[404705] = false,
["297133"] = true,
["343503"] = true,
["163689"] = true,
["233210"] = true,
["338510"] = false,
},
["buff"] = {
273607,
283928,
311975,
343208,
197862,
66235,
344548,
189949,
343196,
317929,
259895,
290494,
327993,
322540,
332672,
321708,
305395,
41450,
200327,
290583,
320407,
236801,
194223,
333920,
74001,
212753,
175395,
197874,
200816,
196718,
173898,
315948,
122783,
322108,
343150,
296497,
344363,
205202,
255016,
289626,
337851,
228048,
341857,
23333,
198144,
292152,
321702,
29166,
197061,
215776,
209194,
272682,
212640,
216451,
79542,
187827,
124974,
207812,
212295,
34976,
196555,
129035,
316849,
265314,
69369,
321745,
316828,
278454,
285272,
279043,
203048,
198817,
316834,
344878,
320379,
335255,
231627,
328767,
198111,
125174,
317138,
322110,
284508,
236439,
328682,
325208,
185422,
317138,
213602,
323048,
},
["debuff"] = {
315341,
207756,
280322,
340075,
316220,
280321,
319504,
256495,
190533,
345569,
347037,
},
["debuff_tracked"] = {
["323059"] = false,
[404705] = false,
["335372"] = false,
},
["debuff_banned"] = {
["331653"] = true,
["294934"] = true,
["255909"] = true,
["353354"] = true,
["324260"] = true,
["331016"] = false,
["358379"] = true,
["5760"] = true,
["394021"] = true,
["256148"] = true,
["352534"] = true,
["204242"] = true,
["391568"] = true,
["294909"] = true,
["273836"] = true,
["356329"] = true,
["279416"] = true,
["314113"] = true,
["356372"] = false,
["286581"] = true,
["345466"] = true,
["206760"] = true,
["392388"] = true,
["354052"] = true,
["394328"] = true,
["360277"] = true,
["389788"] = false,
["169623"] = true,
["6343"] = true,
["295367"] = true,
["321330"] = true,
},
["buff_banned"] = {
["318486"] = true,
["323961"] = true,
["333553"] = true,
["396113"] = true,
["396106"] = true,
["236502"] = true,
["5760"] = true,
["396098"] = true,
["286145"] = true,
["343613"] = false,
["284471"] = true,
["327416"] = false,
["302564"] = true,
["292664"] = true,
["61574"] = true,
["303380"] = true,
["343553"] = true,
["396109"] = true,
["216777"] = true,
["268710"] = true,
["317602"] = true,
["61573"] = true,
["206150"] = true,
["209746"] = true,
["284882"] = true,
["333575"] = true,
["333579"] = true,
["266499"] = true,
["311571"] = true,
},
},
["extra_icon_caster_font"] = "Expressway",
["cast_statusbar_color"] = {
nil,
1,
nil,
0.96000000089407,
},
["update_throttle"] = 0.199999988079071,
["indicator_extra_raidmark"] = false,
["extra_icon_timer_font"] = "Expressway",
["not_affecting_combat_alpha"] = 1,
["target_highlight_alpha"] = 0.3499999940395355,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["extra_icon_show_offensive_border"] = {
nil,
0.65098039215686,
0.10196078431373,
},
["target_shady_combat_only"] = false,
["extra_icon_use_blizzard_border_color"] = false,
["target_shady_alpha"] = 0,
["aura_sort"] = true,
["tap_denied_color"] = {
0.46666666666667,
0.46666666666667,
0.46666666666667,
},
["target_highlight_height"] = 15,
["health_animation_time_dilatation"] = 1.669999957084656,
["show_health_prediction"] = false,
["aura_grow_direction"] = 1,
["range_check_power_bar_alpha"] = 0.8999999761581421,
["health_statusbar_bgcolor"] = {
0.21176472306252,
0.21176472306252,
0.21176472306252,
1,
},
["extra_icon_auras_mine"] = {
["Serrated Bone Spike"] = true,
["209859"] = false,
["Violent Detonation"] = false,
["Plague Bomb"] = false,
},
["extra_icon_timer_outline"] = "OUTLINE",
["cast_statusbar_color_interrupted"] = {
0.8,
0.30196078431373,
0.30196078431373,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 9,
["cast_statusbar_color_channeling"] = {
1,
nil,
0.035294117647059,
0.96000000089407,
},
["number_region_first_run"] = true,
["castbar_target_font"] = "Expressway",
["version"] = 73,
["indicator_faction"] = false,
["patch_version"] = 37,
["focus_as_target_alpha"] = true,
["extra_icon_height"] = 19,
["range_check_alpha_friendlies"] = 1,
["indicator_raidmark_scale"] = 0.8499999642372131,
["dps"] = {
["colors"] = {
["notontank"] = {
0.50196078431373,
0.50196078431373,
},
["aggro"] = {
0.86666666666667,
0.43529411764706,
},
["noaggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
},
},
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.54117647058824,
0.43137254901961,
},
["anothertank"] = {
0.50196078431373,
0.50196078431373,
},
["aggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
["noaggro"] = {
0.86666666666667,
0.43529411764706,
},
["nocombat"] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
["pulling"] = {
nil,
0.91372549019608,
0.22745098039216,
},
},
},
["castbar_target_text_size"] = 9,
["extra_icon_show_purge_border"] = {
nil,
0.92549019607843,
},
["auto_toggle_friendly_enabled"] = true,
["cast_statusbar_spark_width"] = 11,
},
["Default"] = {
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"214840",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["version"] = -1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = false,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Name"] = "Auto Set Skull",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Name"] = "Unit - Show Energy [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Countdown",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate On You [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Important by Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Shining Green [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Special Ability [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["NpcNames"] = {
},
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heroic Leap [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Width Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Spark Color [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Stun [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE Hit All [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Debuff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Simple Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ongoing Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Voidzone [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - AoE With Range [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura - Is Cast Bar [P]",
["NpcNames"] = {
},
},
},
["aura2_x_offset"] = 0,
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1547392935,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Name"] = "Color Automation [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1541606242,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Name"] = "Hide Neutral Units [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["Time"] = 1596791840,
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Name"] = "Reorder Nameplate [Plater]",
["version"] = -1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["version"] = -1,
["Time"] = 1554138845,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Name"] = "Don't Have Aura [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["version"] = -1,
["Time"] = 1547409079,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Name"] = "Extra Border [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Time"] = 1552354619,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Name"] = "Current Target Color [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Author"] = "Ditador-Azralon",
["Time"] = 1597097268,
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Name"] = "Cast Bar Icon Settings [P]",
["version"] = -1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["version"] = -1,
["Time"] = 1547406548,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Name"] = "Execute Range [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Author"] = "Kastfall-Azralon",
["Time"] = 1620377377,
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Name"] = "Attacking Specific Unit [Plater]",
["version"] = -1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["LastHookEdited"] = "",
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Time"] = 1621935143,
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Name"] = "Combo Points [Plater]",
["version"] = -1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["version"] = -1,
["Time"] = 1548278227,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Name"] = "Players Targeting a Target [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 356,
["semver"] = "",
["LastHookEdited"] = "",
["Options"] = {
},
["Author"] = "Ditador-Azralon",
["Time"] = 1608663128,
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Aura Reorder [Plater]",
["version"] = -1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["HooksTemp"] = {
},
},
},
["aura_x_offset"] = 0,
["saved_cvars_last_change"] = {
["nameplateShowFriends"] = "Interface/AddOns/WeakAuras/AuraEnvironment.lua:374",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua\"]:72: in function `SetValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:264: in function `SetValueDerived'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:110: in function `ApplyValue'\n[string \"@Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua\"]:86: in function <...AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua:78>\n[string \"=(tail call)\"]: ?\n[string \"=(tail call)\"]: ?\n[string \"=[C]\"]: in function `securecallfunction'\n[string \"@Interface/AddOns/Blizzard_Menu/Menu.lua\"]:868: in function `Pick'\n[string \"@Interface/AddOns/Blizzard_Menu/DropdownButton.lua\"]:343: in function `Pick'\n[string \"@Interface/AddOns/Blizzard_Menu/DropdownButton.lua\"]:363: in function `Increment'\n[string \"@Interface/AddOns/Blizzard_SharedXML/Mainline/SharedUIPanelTemplates.lua\"]:1691: in function `Increment'\n[string \"@Interface/AddOns/Blizzard_SharedXML/Mainline/SharedUIPanelTemplates.lua\"]:1679: in function <...izzard_SharedXML/Mainline/SharedUIPanelTemplates.lua:1678>\n[string \"=(tail call)\"]: ?\n",
["nameplateShowOnlyNames"] = "Interface/AddOns/WeakAuras/AuraEnvironment.lua:374",
},
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["ui_parent_scale_tune"] = 1.559999942779541,
["cast_statusbar_spark_alpha"] = 0.8299999833106995,
["aura2_y_offset"] = 5,
["login_counter"] = 468,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1670897483,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n        end)\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340966,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 21,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 687,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.168627455830574,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1669340967,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 137,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = true,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Options"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            texture:Hide()\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        textureStretched:Hide()  \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        print(\"no envTable.NextPercent\")\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670623964,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 498,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670202019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 468,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 5,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 798,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1693070951,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["__TrashAt"] = 1724369504,
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["__TrashAt"] = 1724369504,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["__TrashAt"] = 1724369504,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            self.FrameOverlay.LeapArrow1:Show()\n            self.FrameOverlay.LeapArrow2:Show()\n            self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n\n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719716101,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 107,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/2\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(16, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = fadeInDuration\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["SpellIds"] = {
447141,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1725476525,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1719710916,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 79,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1725476525,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n   self.Text:Hide() \nend\n\n\n",
["Time"] = 1719711114,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 154,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    print(envTable.dotAnimation1.dotTexture:GetAlpha())\n    print(envTable.dotAnimation1.dotTexture:GetVertexColor())\n    print(envTable.dotAnimation1.dotTexture:IsShown())\n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Ongoing Cast [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1725476525,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719693487,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1249,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    self.Text:Hide()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["SpellIds"] = {
450756,
451097,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Heal Cut [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1725476525,
},
},
["pet_width_scale"] = 0.949999988079071,
["plate_config"] = {
["global_health_height"] = 12,
["friendlyplayer"] = {
["actorname_text_font"] = "2002",
["actorname_text_spacing"] = 14,
["only_thename"] = true,
["actorname_text_size"] = 15,
["actorname_use_class_color"] = true,
["spellpercent_text_size"] = 9.099967956542969,
},
["global_health_width"] = 112,
["friendlynpc"] = {
["actorname_text_spacing"] = 9,
},
["enemyplayer"] = {
["actorname_text_spacing"] = 11,
},
["enemynpc"] = {
["cast"] = {
nil,
21,
},
["cast_incombat"] = {
nil,
22,
},
["health"] = {
nil,
16,
},
["percent_text_size"] = 12,
},
},
["aura_y_offset"] = 5,
["use_ui_parent"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Hide Neutral Units"] = 1,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Execute Range"] = 1,
["Extra Border"] = 2,
},
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["update_throttle"] = 0.1200000047683716,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["minor_width_scale"] = 0.8999999761581421,
["range_check_alpha"] = 0.6499999761581421,
["resources_settings"] = {
["chr"] = {
["Player-1175-0CED0F19"] = "HolyPower",
["Player-1175-0CEDCED5"] = "ComboPoints",
["Player-1175-0CFE73BA"] = "ArcaneCharges",
["Player-1175-0D025A47"] = "Chi",
["Player-1175-0CFDF51F"] = "Runes",
},
},
["health_animation_time_dilatation"] = 2.619999885559082,
["npc_cache"] = {
[203831] = {
"Crystalline Guardian",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[189893] = {
"Infused Whelp",
"Ruby Life Pools",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[187593] = {
"Primal Flame",
"Vault of the Incarnates",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[195138] = {
"Detonating Crystal",
"The Azure Vault",
},
[117198] = {
"Highlord Kruul",
"Artifact - Acquisition - Tank",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
},
[198081] = {
"Quarry Earthshaper",
"Vault of the Incarnates",
},
[194373] = {
"Brackenhide Gnoll",
"Brackenhide Hollow",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[205628] = {
"Twisted Elementium",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205629] = {
"Crazed Experiment",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[118032] = {
"Tormenting Eye",
"Artifact - Acquisition - Tank",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[196679] = {
"Frozen Shroud",
"Vault of the Incarnates",
},
[201155] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
},
[197831] = {
"Quarry Stonebreaker",
"Vault of the Incarnates",
},
[46261] = {
"Enraged Fire Elemental",
"Stormwind Stockade",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[191313] = {
"Bubbling Sapling",
"The Azure Vault",
},
[197835] = {
"Kaurdyth",
"Vault of the Incarnates",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[194896] = {
"Primal Stormshield",
"The Nokhud Offensive",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[196559] = {
"Volatile Sapling",
"The Azure Vault",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
},
[219066] = {
"Inflicted Civilian",
"The Rookery",
"enUS",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
},
[46263] = {
"Slag Fury",
"Stormwind Stockade",
},
[226484] = {
"Larva",
"Earthcrawl Mines",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[196946] = {
"Lurking Lunker",
"Vault of the Incarnates",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[201934] = {
"Shadowflame Amalgamation",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[188252] = {
"Melidrussa Chillworn",
"Ruby Life Pools",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[46264] = {
"Lord Overheat",
"Stormwind Stockade",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[205644] = {
"Oozing Sludge",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
},
[196694] = {
"Arcane Forager",
"Algeth'ar Academy",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[186338] = {
"Maruuk",
"The Nokhud Offensive",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[205651] = {
"Bubbling Slime",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[187238] = {
"Witherling",
"Brackenhide Hollow",
},
[192481] = {
"Decaying Slime",
"Brackenhide Hollow",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[225601] = {
"Mereldar Citizen",
"The Dawnbreaker",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[118044] = {
"Nether Horror",
"Artifact - Acquisition - Tank",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[198878] = {
"Primalist Tempestmaker",
"Vault of the Incarnates",
},
[194147] = {
"Volcanius",
"Vault of the Incarnates",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[205656] = {
"Sundered Chemist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
},
[197857] = {
"Gutstabber",
"Brackenhide Hollow",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[188011] = {
"Primal Terrasentry",
"Ruby Life Pools",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
},
[216275] = {
"Brann's Epic Egg",
"Earthcrawl Mines",
"enUS",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[186227] = {
"Monstrous Decay",
"Brackenhide Hollow",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
},
[191215] = {
"Tarasek Legionnaire",
"Vault of the Incarnates",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
},
[200936] = {
"Living Flame",
"Vault of the Incarnates",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[201320] = {
"Rashok",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[187638] = {
"Flamescale Tarasek",
"Vault of the Incarnates",
},
[187894] = {
"Infused Whelp",
"Ruby Life Pools",
},
[216155] = {
"Skittering Ambusher",
"Earthcrawl Mines",
"enUS",
},
[186616] = {
"Granyth",
"The Nokhud Offensive",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[199916] = {
"Decaying Slime",
"Brackenhide Hollow",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[195697] = {
"Thunderbeast Rider",
"The Nokhud Offensive",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
},
[205672] = {
"Flame Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
},
[187772] = {
"Opalfang",
"Vault of the Incarnates",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[190586] = {
"Earth Breaker",
"Vault of the Incarnates",
},
[200944] = {
"Nokhud Fighter",
"The Nokhud Offensive",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[192761] = {
"Iskakx",
"Vault of the Incarnates",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[190205] = {
"Scorchling",
"Ruby Life Pools",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[196855] = {
"Braekkas",
"Vault of the Incarnates",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
},
[186242] = {
"Skulking Gutstabber",
"Brackenhide Hollow",
},
[192764] = {
"Flame Guardian",
"Vault of the Incarnates",
},
[228953] = {
"Skittering Intruder",
"Earthcrawl Mines",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[195579] = {
"Primal Gust",
"The Nokhud Offensive",
},
[208239] = {
"Skittering Menace",
"Earthcrawl Mines",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[198266] = {
"Pouncing Broodswarmer",
"Vault of the Incarnates",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
},
[208241] = {
"Ankle Biter",
"Earthcrawl Mines",
"enUS",
},
[192769] = {
"Thondrozus",
"Vault of the Incarnates",
},
[208242] = {
"Nerubian Darkcaster",
"Earthcrawl Mines",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
},
[208243] = {
"Nerubian Slasher",
"Earthcrawl Mines",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
},
[189318] = {
"Infected Bear",
"Brackenhide Hollow",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[117933] = {
"Inquisitor Variss",
"Artifact - Acquisition - Tank",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Earthcrawl Mines",
"enUS",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
},
[196482] = {
"Overgrown Ancient",
"Algeth'ar Academy",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[205820] = {
"Crawling Goo",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[222700] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[191243] = {
"Wild Lasher",
"Brackenhide Hollow",
},
[197509] = {
"Primal Thundercloud",
"Ruby Life Pools",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[210810] = {
"Menial Laborer",
"Khaz Algar (Surface)",
"enUS",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[118065] = {
"Smoldering Infernal",
"Artifact - Acquisition - Tank",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
},
[202375] = {
"Zskarn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
},
[184986] = {
"Kurog Grimtotem",
"Vault of the Incarnates",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
},
[190485] = {
"Erkhart Stormvein",
"Ruby Life Pools",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[193555] = {
"Nokhud Villager",
"The Nokhud Offensive",
},
[199182] = {
"Jumping Spiderling",
"Vault of the Incarnates",
},
[46375] = {
"Rowdy Troublemaker",
"Stormwind Stockade",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[193558] = {
"Primalist Flamecaller",
"Vault of the Incarnates",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
},
[46248] = {
"Riverpaw Basher",
"Stormwind Stockade",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[192794] = {
"Nokhud Beastmaster",
"The Nokhud Offensive",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[197398] = {
"Hungry Lasher",
"Algeth'ar Academy",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[223357] = {
"Sureki Conscript",
"City of Threads",
"enUS",
},
[222974] = {
"Hungry Scarab",
"City of Threads",
"enUS",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
},
[205968] = {
"Fragment of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[190496] = {
"Terros",
"Vault of the Incarnates",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[197147] = {
"Qalashi Honor Guard",
"Vault of the Incarnates",
},
[205971] = {
"Fragment of Fire",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[46250] = {
"Riverpaw Poacher",
"Stormwind Stockade",
},
[197148] = {
"Qalashi Lavabearer",
"Vault of the Incarnates",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[203927] = {
"Failed Prototype",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
},
[46379] = {
"Vicious Thug",
"Stormwind Stockade",
},
[193572] = {
"Nokhud Warsmith",
"The Nokhud Offensive",
},
[213905] = {
"Animated Darkness",
"The Dawnbreaker",
"enUS",
},
[196642] = {
"Hungry Lasher",
"Algeth'ar Academy",
},
[197793] = {
"Awakened Juggernaut",
"Vault of the Incarnates",
},
[195875] = {
"Desecrated Bakar",
"The Nokhud Offensive",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[194469] = {
"Wither Slasher",
"Brackenhide Hollow",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[199715] = {
"Nokhud Battleguard",
"The Nokhud Offensive",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[199716] = {
"Nokhud Brute",
"The Nokhud Offensive",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[187139] = {
"Crystal Thrasher",
"The Azure Vault",
},
[192803] = {
"War Ohuna",
"The Nokhud Offensive",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[46260] = {
"Searing Destroyer",
"Stormwind Stockade",
},
[218643] = {
"Queensguard Zirix",
"Earthcrawl Mines",
"enUS",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
},
[46381] = {
"Shifty Thief",
"Stormwind Stockade",
},
[199718] = {
"Nokhud Huntmaster",
"The Nokhud Offensive",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[189233] = {
"Caustic Spiderling",
"Vault of the Incarnates",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[199719] = {
"Nokhud Wardog",
"The Nokhud Offensive",
},
[193709] = {
"Primalist Earthwarden",
"Vault of the Incarnates",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[194622] = {
"Scorchling",
"Ruby Life Pools",
},
[187242] = {
"Tarasek Looter",
"The Azure Vault",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
},
[205673] = {
"Sundered Devourer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198310] = {
"Flame Tarasek",
"Vault of the Incarnates",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[189363] = {
"Infected Lasher",
"Brackenhide Hollow",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[46382] = {
"Petty Criminal",
"Stormwind Stockade",
},
[189492] = {
"Raszageth",
"Vault of the Incarnates",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
},
[194991] = {
"Oathsworn Vanguard",
"Vault of the Incarnates",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[190245] = {
"Broodkeeper Diurna",
"Vault of the Incarnates",
},
[187192] = {
"Rageclaw",
"Brackenhide Hollow",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
},
[46262] = {
"Rumbling Earth",
"Stormwind Stockade",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
},
[192329] = {
"Territorial Eagle",
"Algeth'ar Academy",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[200945] = {
"Nokhud Warmonger",
"The Nokhud Offensive",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[216329] = {
"Congealed Droplet",
"City of Threads",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
},
[201773] = {
"Eternal Blaze",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[196102] = {
"Conjured Lasher",
"10.0 Dragon Isles",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[197298] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[185691] = {
"Vicious Hyena",
"Brackenhide Hollow",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[201774] = {
"Essence of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[186206] = {
"Cruel Bonecrusher",
"Brackenhide Hollow",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[46383] = {
"Randolph Moloch",
"Stormwind Stockade",
},
[203939] = {
"Animation Fluid",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[194999] = {
"Volatile Spark",
"Vault of the Incarnates",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
},
[187231] = {
"Wither Biter",
"Brackenhide Hollow",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
},
[194467] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
},
[187159] = {
"Shrieking Whelp",
"The Azure Vault",
},
[187967] = {
"Sennarth",
"Vault of the Incarnates",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[194745] = {
"Rotfang Hyena",
"Brackenhide Hollow",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216584] = {
"Nerubian Captain",
"Earthcrawl Mines",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[197801] = {
"Awakened Terrasentry",
"Vault of the Incarnates",
},
[220193] = {
"Sureki Venomblade",
"Khaz Algar (Surface)",
"enUS",
},
[189813] = {
"Dathea, Ascended",
"Vault of the Incarnates",
},
[184693] = {
"Living Flame",
"Vault of the Incarnates",
},
[223646] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[216583] = {
"Chittering Fearmonger",
"Earthcrawl Mines",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
},
[203826] = {
"Colossal Draconic Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[226620] = {
"Rat",
"Earthcrawl Mines",
"enUS",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
},
[195821] = {
"Nokhud Saboteur",
"The Nokhud Offensive",
},
[186615] = {
"The Raging Tempest",
"The Nokhud Offensive",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[200948] = {
"Nokhud Apprentice",
"The Nokhud Offensive",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[188100] = {
"Shrieking Whelp",
"The Azure Vault",
},
[197982] = {
"Storm Warrior",
"Ruby Life Pools",
},
[190510] = {
"Vault Guard",
"The Azure Vault",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205671] = {
"Shadow Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[200761] = {
"Wild Ohuna",
"The Nokhud Offensive",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["indicator_scale"] = 0.9999999403953552,
["saved_cvars"] = {
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateShowOnlyNames"] = "1",
},
["number_region_first_run"] = true,
["pet_height_scale"] = 0.949999988079071,
["stacking_nameplates_enabled"] = false,
["first_run3"] = true,
["aura_tracker"] = {
["buff_tracked"] = {
[209859] = true,
},
},
["health_selection_overlay_alpha"] = 0.09999999403953552,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["minor_height_scale"] = 0.949999988079071,
["patch_version"] = 37,
["not_affecting_combat_alpha"] = 0.5999999642372131,
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Fixate On You"] = 11,
["Aura - Is Cast Bar [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Alert + Timer [P]"] = 4,
["Add - Explode on Die [P]"] = 1,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Shining Green [P]"] = 3,
["Cast - AoE With Range [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Voidzone [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Cast - Stop Casting"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Add - Warning [P]"] = 5,
["Countdown"] = 11,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Shield Interrupt"] = 2,
["Cast - Very Important"] = 15,
["Explosion Affix M+"] = 14,
["Unit - Show Energy"] = 11,
},
},
["Quazii Plater"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["aura_sort"] = true,
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateLargeTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplatePersonalShowInCombat"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplatePersonalShowWithTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateResourceOnTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelfScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowSelf"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelfTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateGlobalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelfBottomInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateTargetRadialPosition"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["ShowNamePlateLoseAggroFlash"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplateSelfAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
["nameplatePersonalShowAlways"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:1574: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1052: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:870: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:870>\n[string \"=[C]\"]: in function `pcall'\n[string \"@Interface/AddOns/Details/Libs/DF/panel.lua\"]:2522: in function <Interface/AddOns/Details/Libs/DF/panel.lua:2519>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Details/Libs/DF/fw.lua\"]:4694: in function `CoreDispatch'\n[string \"@Interface/AddOns/Details/Libs/DF/button.lua\"]:734: in function <Interface/AddOns/Details/Libs/DF/button.lua:670>\n",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["indicator_raidmark_scale"] = 1.200000047683716,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["extra_icon_caster_size"] = 10,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Accidental Presidency",
["spellpercent_text_font"] = "Accidental Presidency",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["power_percent_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Accidental Presidency",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["power_percent_text_font"] = "Accidental Presidency",
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["percent_text_enabled"] = true,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["actorname_use_friends_color"] = false,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["percent_text_outline"] = "NONE",
["percent_text_font"] = "Accidental Presidency",
["percent_text_size"] = 10,
["percent_show_health"] = true,
["health_incombat"] = {
120,
12,
},
["health"] = {
120,
12,
},
["mana"] = {
nil,
4,
},
["spellname_text_font"] = "Accidental Presidency",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["only_thename"] = true,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Accidental Presidency",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["quest_color_enemy"] = {
1,
0.369,
0,
},
["power_percent_text_font"] = "Accidental Presidency",
["percent_text_outline"] = "NONE",
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_show_health"] = true,
["health_incombat"] = {
100,
1,
},
["health"] = {
100,
1,
},
["percent_text_enabled"] = true,
["actorname_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_enabled"] = true,
},
["global_health_height"] = 12,
["global_health_width"] = 120,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "ViklunD's SexFont",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["all_names"] = true,
["percent_show_health"] = false,
["level_text_alpha"] = 0.2999999821186066,
["mana"] = {
120,
1,
},
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["big_actorname_text_font"] = "Accidental Presidency",
["percent_show_percent"] = false,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_size"] = 10,
["quest_color_enabled"] = true,
["health_incombat"] = {
nil,
12,
},
["health"] = {
120,
},
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["spellname_text_font"] = "Accidental Presidency",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "ViklunD's SexFont",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 0.4000015258789063,
["side"] = 5,
},
["level_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["actorname_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 1,
["side"] = 3,
},
["spellname_text_size"] = 10,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
12,
},
["health"] = {
120,
},
["big_actorname_text_font"] = "Accidental Presidency",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["percent_text_show_decimals"] = false,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["first_run2"] = true,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["plater_resources_grow_direction"] = "center",
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-5764-000166DE"] = "HolyPower",
["Player-4184-00949549"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-4609-0014C179"] = "HolyPower",
["Player-4184-00948CDA"] = "Chi",
["Player-4184-00949207"] = "HolyPower",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-5764-000944AE"] = "Chi",
["Player-3725-0A9FE377"] = "Chi",
["Player-11-0E532B0D"] = "Chi",
["Player-11-0E532B17"] = "ComboPoints",
["Player-5764-0002671B"] = "HolyPower",
["Player-11-0E532B15"] = "HolyPower",
["Player-3296-009336A2"] = "HolyPower",
["Player-4184-009493C8"] = "Runes",
["Player-4609-0014B1D9"] = "Essence",
["Player-1175-0CEDCED5"] = "ComboPoints",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[212400] = {
"Void Touched Elemental",
"The Stonevault",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"The Waterworks",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[204109] = {
"Cavernous Shrieker",
"The Waterworks",
"enUS",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[218693] = {
"Eclipsing Grasp",
"11.0 - Priory Scenario",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[225601] = {
"Webbed Victim",
"The Dawnbreaker",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[216275] = {
"Brann's Epic Egg",
"The Waterworks",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[203878] = {
"Kobold Mystic",
"The Waterworks",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[214379] = {
"Living Shadow",
"11.0 - Priory Scenario",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[133436] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[214381] = {
"Writhing Shade",
"11.0 - Priory Scenario",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[223724] = {
"Backfill Barrel",
"City of Threads",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[210810] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[136006] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[213684] = {
"Void Chunk",
"The Rookery",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[204127] = {
"Kobold Taskfinder",
"The Waterworks",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[214263] = {
"Waxface",
"The Waterworks",
"enUS",
},
[211777] = {
"Spitfire Fusetender",
"The Waterworks",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[219066] = {
"Afflicted Civilian",
"The Rookery",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[229729] = {
"Nullbot",
"Awakening The Machine",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[136005] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[223646] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[229739] = {
"Malfunctioning Pylon",
"Awakening The Machine",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[138063] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[138064] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[223357] = {
"Sureki Conscript",
"City of Threads",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[222974] = {
"Hungry Scarab",
"City of Threads",
"enUS",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[214920] = {
"Tasting Room Attendant",
"Cinderbrew Meadery",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[216329] = {
"Congealed Droplet",
"City of Threads",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[214668] = {
"Venture Co. Patron",
"Cinderbrew Meadery",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[213905] = {
"Animated Darkness",
"The Dawnbreaker",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[133345] = {
"Feckless Assistant",
"The MOTHERLODE!!",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[229769] = {
"Medbot",
"Awakening The Machine",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[218520] = {
"Nightcaller Velys",
"11.0 - Priory Scenario",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[218521] = {
"Hazzk the Ascended",
"11.0 - Priory Scenario",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[218511] = {
"Forming Whispers",
"11.0 - Priory Scenario",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[229778] = {
"Automatic Ironstrider",
"Awakening The Machine",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[218527] = {
"Shadesworn Crusher",
"11.0 - Priory Scenario",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[217249] = {
"Waterworks Opportunist",
"The Waterworks",
"enUS",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[203951] = {
"Kobold Skullface",
"The Waterworks",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[229782] = {
"Awakened Phalanx",
"Awakening The Machine",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[220065] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[220193] = {
"Sureki Venomblade",
"City of Threads",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[217126] = {
"Over-Indulged Patron",
"Cinderbrew Meadery",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
},
[220707] = {
"Staglette",
"11.0 - Priory Scenario",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[203877] = {
"Kobold Thwacker",
"The Waterworks",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[214382] = {
"Whispering Monstrosity",
"11.0 - Priory Scenario",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[214368] = {
"The Broken Queen",
"11.0 - Priory Scenario",
"enUS",
},
[222700] = {
"Umbral Weave",
"City of Threads",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
},
["aura_grow_direction"] = 3,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["Enabled"] = false,
["Revision"] = 95,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Options"] = {
},
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1553450458,
["Icon"] = 1990989,
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = false,
["Revision"] = 185,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Options"] = {
},
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825362,
["Icon"] = 1966587,
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = false,
["Revision"] = 94,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1613211428,
["Icon"] = 878211,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Name"] = "Combo Points [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 197,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled and unitFrame.ActorType == \"enemyplayer\") then\n        \n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n        \n    else\n        envTable.BorderFrame:Hide() \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Extra Border [Plater]",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1613211728,
["Icon"] = 133689,
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1722754264,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 94,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Reorder Nameplate [Plater]",
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 107,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Options"] = {
},
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825317,
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["LastHookEdited"] = "Constructor",
},
{
["Enabled"] = false,
["Revision"] = 139,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Ahwa-Azralon",
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = true\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --second execute range (UseCustomExecutePercent must be enabled)\n    envTable.SecondRangeStart = 0.999\n    envTable.SecondRangeEnd = 0.8\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame, divisorPercent)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        local percent = healthBar.CurrentHealth / healthBar.CurrentHealthMax\n        \n        if (percent <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.ExecutePercent)\n            envTable.InExecuteRange = true\n            \n        elseif (percent < envTable.SecondRangeStart and percent >= envTable.SecondRangeEnd) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.SecondRangeEnd)\n            envTable.InExecuteRange = true\n            \n        else\n            if (envTable.InExecuteRange) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                Plater.RefreshNameplateColor (unitFrame)\n                Plater.SetBorderColor (unitFrame)\n                envTable.InExecuteRange = false\n            end\n        end\n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Advanced Execute Range",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825289,
["Icon"] = 135358,
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1699162519,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 360,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 237,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Script for the Jaina encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Unexploded Ordinance\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.UnexplodedOrdinance) then\n        \n        --make the life percent be bigger than the regular size\n        --so it's better to see the health percent of the barrel\n        local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n        Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize + envTable.UnexplodedOrdinanceTextSizeIncrease)\n    end\n    \n    if (envTable.IncreaseSize [unitFrame.namePlateNpcId]) then\n        local currentHeight = unitFrame.healthBar:GetHeight()\n        Plater.SetNameplateSize (unitFrame, nil, currentHeight + envTable.IncreaseSize [unitFrame.namePlateNpcId])\n    end\n    \nend\n\n\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame, nil, envTable.UnexplodedOrdinanceCastBarHeight)\n        Plater:SetFontSize (unitFrame.castBar.percentText, envTable.UnexplodedOrdinanceTimerSize)\n    end\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the health percent text size\n    local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n    Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Override the color\n    if (envTable.Colors [unitFrame.namePlateNpcId]) then\n        Plater.SetNameplateColor (unitFrame, envTable.Colors [unitFrame.namePlateNpcId])\n    end    \n    \n    --Show the name of the unit in the Ice Block nameplate\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.IceBlock) then\n        --find which player this block are holding\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i\n            if (UnitExists (unit)) then\n                for debuffId = 1, 40 do\n                    local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (unit, debuffId)\n                    \n                    --cancel the loop if there's no more debuffs on the player\n                    if (not name) then \n                        break \n                    end                    \n                    \n                    --check if who casted this debuff is the unit shown on this nameplate\n                    if (UnitIsUnit (caster or \"\", unitId)) then\n                        local unitName = UnitName (unit)\n                        \n                        --color the text by the class\n                        unitName = Plater.SetTextColorByClass (unit, unitName)\n                        \n                        --add the role icon\n                        if (Details) then\n                            local role = UnitGroupRolesAssigned (unit)\n                            unitName = Details:AddRoleIcon (unitName, role, 12)\n                        end\n                        \n                        unitFrame.unitName:SetText (unitName)\n                        unitFrame.castBar.Text:SetText (unitName)\n                        break\n                    end\n                    \n                end\n            else\n                break\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors [148631] = \"orange\" --Unexploded Ordinance\n    envTable.Colors [148522] = \"white\" --Ice Block\n    \n    --increase the nameplate height for these units\n    envTable.IncreaseSize = {}\n    envTable.IncreaseSize [148522] = 4 --Ice Block (increase in 4 pixels)\n    \n    --increase the size of the life percent for the nameplate of the barrel\n    envTable.UnexplodedOrdinanceTextSizeIncrease = 3\n    \n    --increase the castbar size for the unexploded ordinance explosion cast\n    envTable.UnexplodedOrdinanceCast = true\n    envTable.UnexplodedOrdinanceSpellID = 288221 --12058 --(debug)\n    envTable.UnexplodedOrdinanceCastBarHeight = 18\n    envTable.UnexplodedOrdinanceTimerSize = 18\n    \n    --npcIDs\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.UnexplodedOrdinance = 148631\n    envTable.NpcIDs.IceBlock = 148522\nend\n\n--tests 126023 --harbor saurid - dazar'alor harbor\n--tests 3127 venomtail scorpid - durotar\n--tests 12058 dustwind storm witch - durotar\n--Load Condition: EncounterID 2281\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame)\n        Plater:SetFontSize (unitFrame.castBar.percentText, Plater.db.profile.plate_config.enemynpc.spellpercent_text_size)\n    end\nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Jaina Encounter [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2281,
["Enabled"] = true,
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1723224887,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_jaina",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 81,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Script for Stormwall Blockade encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.Colors.TemptingSiren) then\n            Plater.SetNameplateColor (unitFrame, envTable.Colors.TemptingSiren)\n        end\n        \n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.NameplateHeight.TemptingSiren) then\n            \n            Plater.SetNameplateSize (unitFrame, nil, envTable.NameplateHeight.TemptingSiren)\n            \n        end\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors.TemptingSiren = \"orange\"\n    \n    --npcID\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.TemptingSiren = 146436\n    \n    --nameplate height for each unit\n    envTable.NameplateHeight = {}\n    envTable.NameplateHeight.TemptingSiren = 18\n    \n    \n    \nend\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Stormwall Encounter [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2280,
["Enabled"] = true,
},
["spec"] = {
},
},
["Time"] = 1551887545,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_stormwall_blockade",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 58,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Herith�gue-Proudmoore",
["Desc"] = "Change the border of the focus target.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.BorderThickness = 3\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.UpdateBorder (unitFrame, unit)\n        local plateFrame = unitFrame:GetParent()\n        \n        if (UnitIsUnit (\"focus\", unit)) then\n            Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            local borderSize = envTable.BorderThickness\n            unitFrame.healthBar.border:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.border:UpdateSizes()        \n            \n        else\n            Plater.SetBorderColor (unitFrame)\n            Plater.UpdatePlateBorderThickness (unitFrame.PlateFrame)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Focus Target Border",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1552962607,
["Icon"] = 133006,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 48,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1613211434,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Don't Have Aura [Plater]",
["Icon"] = 136207,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 55,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
["Enabled"] = true,
["117"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Tint nameplates of Reaping Soul units (Mythic Dungeon Affix) depending on its target and role of the player",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --can detect the reaping souls aggro?\n    if (envTable.detectAggro and Plater.IsInCombat()) then\n        \n        --is this npc a reaping soul?\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            \n            --check if the mob is attacking the player\n            if (UnitIsUnit (unitFrame.targetUnitID, \"player\")) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateAggroColor)\n                \n            else\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateNoAggroColor)\n            end\n            \n        end\n        \n    end\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when the nameplate is added and the npcID matches, cache the color for the nameplate\n    if (envTable.detectAggro) then\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            local profile = Plater.db.profile\n            local role = Plater:GetPlayerRole()\n            \n            if (role == \"TANK\") then\n                envTable.NameplateAggroColor = profile.tank.colors.aggro\n                envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            else\n                envTable.NameplateAggroColor = profile.dps.colors.aggro\n                envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            end\n            \n        end\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --npcs affected by this script\n    \n    envTable.npcIDs = {\n        [148716] = true, --risen soul\n        [148893] = true, --tormented soul\n        [148894] = true, --lost soul\n        \n        [127278] = true, --skittering feeder (tests and debug, also need to disable the load conditions)\n    }\n    \n    --detect aggro, if true it will see which group member the soul is attacking and override the color\n    envTable.detectAggro = true\n    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "M+ Bwonsamdi Reaping",
["PlaterCore"] = 1,
["LastHookEdited"] = "Constructor",
["Time"] = 1579030189,
["Icon"] = 2446016,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 36,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Show the name of the unit current target ",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --max length of the text\n    envTable.TextMaxLength = 100\n    \n    --update the spell name text\n    function envTable.UpdateSpellNameText (unitFrame)\n        \n        local castBar = unitFrame.castBar\n        local textString = castBar.Text\n        local spellName = castBar.SpellName\n        \n        if (unitFrame.targetUnitID) then\n            local targetName = UnitName (unitFrame.targetUnitID)\n            \n            if (targetName) then\n                textString:SetText (spellName .. \" > \" .. targetName) \n                \n                if (envTable.TextMaxLength) then\n                    Plater.LimitTextSize (textString, envTable.TextMaxLength)\n                end\n                \n            else\n                textString:SetText (spellName)\n            end\n        else\n            textString:SetText (spellName)\n        end\n    end\nend",
},
["Prio"] = 99,
["Name"] = "Cast Target",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1620347099,
["Icon"] = 413580,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 43,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Only show nameplates while in combat, see the constructor for more options.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Zone Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckIfCanShowNameplate (unitFrame)\n        if (Plater.IsInCombat()) then\n            \n            if (not unitFrame.healthBar:IsShown()) then\n                Plater.ShowHealthBar (unitFrame)\n                Plater.EnableHighlight (unitFrame)\n            end\n            \n        else\n            \n            if (unitFrame.healthBar:IsShown()) then\n                Plater.HideHealthBar (unitFrame)\n                Plater.DisableHighlight (unitFrame)\n            end\n            \n        end        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Only in Combat",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825361,
["Icon"] = 135473,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add an exclamation icon on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local npcColor = Plater.GetNpcColor (unitFrame)\n    if (npcColor) then\n        unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n        unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)        \n        unitFrame.NpcColorCodeTexture:Show()\n        \n    else\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.IconTexture = [[Interface\\AddOns\\Plater\\media\\exclamation_64]]\n    envTable.Alpha = 0.8\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetTexture (envTable.IconTexture)\n        \n        --texture side | anchor to which frame | frame side | x offset | y offset\n        unitFrame.NpcColorCodeTexture:SetPoint (\"right\", unitFrame.healthBar, \"right\", -2, 0)\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Npc Colors Icon",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1553450716,
["Icon"] = "Interface\\AddOns\\Plater\\media\\exclamation_64",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 68,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a color tag on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateColorTag (unitFrame)   \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateTexture (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Alpha = 0.75\n    \n    envTable.Anchor = {\n        side = 11, --right side inside the nameplate\n        x = -3,\n        y = 0\n    }\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetColorTexture (1, 1, 1, 1)\n        \n    end\n    \n    function  envTable.UpdateColorTag (unitFrame)\n        local npcColor = Plater.GetNpcColor (unitFrame)\n        if (npcColor) then\n            unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n            unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)           \n            unitFrame.NpcColorCodeTexture:Show()        \n        end\n    end\n    \n    function  envTable.UpdateTexture (unitFrame)\n        Plater.SetAnchor (unitFrame.NpcColorCodeTexture, envTable.Anchor)\n        unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight() - 4, unitFrame.healthBar:GetHeight() - 4)\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n        envTable.UpdateColorTag (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Npc Colors Tag",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1553450705,
["Icon"] = "Interface\\AddOns\\Plater\\media\\radio_64",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 44,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Change the color of the aura timer by it's time left",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        warning = \"yellow\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 4.9,\n        warning = 8,\n    }\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auras = unitFrame.BuffFrame.PlaterBuffList\n    \n    for _, auraIcon in ipairs (auras) do\n        if (auraIcon:IsVisible()) then\n            if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                \n            elseif (auraIcon.RemainingTime < envTable.Timers.warning) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.warning)\n                \n            else\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n            end \n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Paint Aura Timers",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1613211753,
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 130,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "????????-Illidan",
["PlaterCore"] = 1,
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1722754264,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Show yellow star for elite; Silver star for rares",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.UpdateIndicator (unitFrame, unitId)\n        local unitClassification = UnitClassification (unitId)\n        local unitName = UnitName (unitId)\n        unitName = unitName or UNKNOWN\n        \n        if (unitClassification == \"rareelite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. \"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t \" .. unitName)\n            \n        elseif (unitClassification == \"rare\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. unitName)\n            \n        elseif (unitClassification == \"elite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t\" .. unitName)\n            \n        end\n    end\n    \nend\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Rarity in the Name",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825364,
["Icon"] = "Interface\\AddOns\\Plater\\media\\star_full_64",
["HooksTemp"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 77,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["PlaterCore"] = 1,
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 99,
["Time"] = 1711787342,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Aggro Indicator",
["Icon"] = 132344,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 20,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Edit the Constructor script setting the font you want in the FONT = \"\", then /reload.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --added this event just to run the constructor script\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert here the font you want to change then /reeload\n    --after the reload, check if the font has changed and disable this script\n    \n    local FONT = \"Accidental Presidency\"\n    \n    local profile = Plater.db.profile\n    local actorTables = profile.plate_config\n    \n    for plateType, plateTable in pairs (actorTables) do\n        \n        plateTable.actorname_text_font = FONT\n        plateTable.spellname_text_font = FONT\n        plateTable.spellpercent_text_font = FONT\n        plateTable.level_text_font = FONT\n        plateTable.percent_text_font = FONT\n        plateTable.big_actortitle_text_font = FONT\n        plateTable.big_actorname_text_font = FONT\n        plateTable.power_percent_text_font = FONT\n        \n    end\n    \n    profile.castbar_target_font = FONT\n    profile.aura_timer_text_font = FONT    \n    profile.aura_stack_font = FONT    \n    \nend\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Change All Fonts",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551825316,
["Icon"] = 134331,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 50,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the power bar for specific units",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.PowerBarAnchor = {side = 4, x = 0, y = -10}\n    \n    function envTable.UpdatePowerBar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        Plater.SetAnchor (unitFrame.powerBar, envTable.PowerBarAnchor)\n        \n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\") then\n        \n        local arenaEnemies = GetNumArenaOpponentSpecs()\n        local found = false\n        for i = 1, arenaEnemies do\n            local guid = UnitGUID (\"arena\" .. i)\n            print (guid)\n            if (guid == unitFrame.namePlateUnitGUID) then\n                \n                local spec = GetArenaOpponentSpec (i)\n                print (spec)\n                if (spec) then\n                    local id, name, description, icon, role, class = GetSpecializationInfoByID (spec)\n                    print (name)\n                    if (role == \"HEALER\") then\n                        envTable.UpdatePowerBar (unitFrame)\n                    end\n                    print (role)\n                end\n                \n                break\n            end\n        end\n        \n        return\n    end\n    \n    --show for enemy players\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        envTable.UpdatePowerBar (unitFrame)\n        return\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Power Bar",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1553450521,
["Icon"] = 1375677,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 140,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 1\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", -1, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 1, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\nend",
},
["Prio"] = 99,
["Name"] = "Cast Icon Anchor",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1620346604,
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 65,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Adds a pixels perfect border around the cast bar spell icon.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, 0)\n            icon:SetPoint (\"bottomright\", castBar, \"bottomleft\", -1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, 0)\n            icon:SetPoint (\"bottomleft\", castBar, \"bottomright\", 1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Icon Border",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1620346604,
["Icon"] = 133004,
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 98,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1699163950,
["Icon"] = 133004,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 46,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "????????-Illidan",
["PlaterCore"] = 1,
["Desc"] = "Debuff timer show decimal values",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --minimum time left to take effect\n    envTable.MinTime = 9.999\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then\n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then            \n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end        \n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1613211431,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Decimal Debuff Timer",
["Icon"] = 609811,
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 86,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Name"] = "Buff Special Mod",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1699162520,
["Icon"] = 136139,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 29,
["Options"] = {
},
["LastHookEdited"] = "Player Talent Update",
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds two arrows into the target indicators options.",
["Hooks"] = {
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --after editing this script, save it and /reload\n    \n    --adds two target indicators in arrow format\n    --to change the texture you may replace the path with another texture path\n    --or you can copy and paste more options here\n    \n    Plater.TargetIndicators    [\"SmallArrow\"] = {\n        path = [[Interface\\MONEYFRAME\\Arrow-Right-Up]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 12,\n        height = 12,\n        x = 8,\n        y = 0,\n        blend = \"ADD\",\n    }\n    \n    Plater.TargetIndicators    [\"BigArrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 18,\n        height = 16,\n        x = 24,\n        y = 0,\n        blend = \"ADD\",\n        color = \"yellow\",\n    }\n    \n    \n    \nend\n\n\n",
},
["OptionsValues"] = {
},
["Name"] = "Arrow Target Indicators",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Time"] = 1551887544,
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_right_64",
["HooksTemp"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 12,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Unit Name Over Target Shading",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1620348420,
["Icon"] = 237377,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 25,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Set the spark height to the same size of the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Adjust Spark Size",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1620348421,
["Icon"] = "Interface\\AddOns\\Plater\\images\\spark6",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 71,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["PlaterCore"] = 1,
["Desc"] = "Show power bar for some units.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --power bar options:\n    \n    --for which units it should\n    envTable.ShowForEnemyPlayers = true\n    envTable.ShowForEnemyNpcs = false\n    \n    --specific npcs, can be the npc name or npcId\n    --this list work even if the ShowForEnemyNpcs is false\n    envTable.SpecificNpcs = {\n        [\"the rock\"] = true, --npc name\n        [225] = true, --npcId\n    }\n    \n    --anchor the power bar to\n    envTable.Anchor = {\n        side = 13, --inside the healthbar, bottom side\n        x = 0, \n        y = 0,\n    }\n    \n    --power bar height\n    envTable.Height = 1\n    \n    --power bar percent text\n    envTable.PercentTextEnabled = false\n    envTable.PercentTextAnchor = {\n        side = 7, --top right\n        x = 2, \n        y = 0,\n    }\n    \n    \n    --private\n    function envTable.ShowPowerbar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        envTable.UpdatePowerbar (unitFrame)\n    end\n    \n    function envTable.UpdatePowerbar (unitFrame)\n        local powerBar = unitFrame.powerBar\n        Plater.SetAnchor (powerBar, envTable.Anchor, unitFrame.healthBar)\n        powerBar:SetSize (unitFrame.healthBar:GetWidth(), envTable.Height)\n        \n        envTable.SavePowerBarSize (unitFrame, envTable.Height)\n        \n        if (envTable.PercentTextEnabled) then\n            powerBar.percentText:Show()\n            --copy the font from the health percent\n            Plater:SetFontFace (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_font)\n            Plater:SetFontSize (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_size)\n            Plater.SetAnchor (powerBar.percentText, envTable.PercentTextAnchor)\n        else\n            powerBar.percentText:Hide()\n        end\n    end\n    \n    function envTable.CanShowPowerBarForUnit (unitFrame)\n        --check if the is in the special list to force show\n        local forceShowPowerBar = envTable.SpecificNpcs [unitFrame.namePlateNpcId] or envTable.SpecificNpcs [unitFrame.namePlateUnitName] or envTable.SpecificNpcs [unitFrame.namePlateUnitNameLower]\n        if (forceShowPowerBar) then\n            envTable.ShowPowerbar (unitFrame)\n            \n            --check if the unit is a enemy player\n        elseif (unitFrame.ActorType == \"enemyplayer\") then\n            if (envTable.ShowForEnemyPlayers) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n            \n            --check if the unit is a enemy npc\n        elseif (unitFrame.ActorType == \"enemynpc\") then\n            if (envTable.ShowForEnemyNpcs) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n        end\n    end\n    \n    function envTable.SavePowerBarSize (unitFrame, height)\n        local plateConfigs = Plater.db.profile.plate_config [unitFrame.ActorType]\n        plateConfigs.mana[1] = plateConfigs.health[1]\n        plateConfigs.mana[2] = height\n        plateConfigs.mana_incombat[1] = plateConfigs.health_incombat[1]\n        plateConfigs.mana_incombat[2] = height\n    end\nend\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShowPowerBarForUnit (unitFrame)    \nend",
},
["Prio"] = 99,
["Time"] = 1620346758,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Power Bar",
["Icon"] = "Interface/Addons/Plater/Media/fire_64",
["OptionsValues"] = {
},
},
{
["OptionsValues"] = {
["showIcon"] = false,
["useFullSize"] = false,
["iconOnLeftSide"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1620347016,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 352,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast Bar Icon Settings [P]",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Name"] = "Icon Size Offset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Name"] = "Texture Width",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Name"] = "Texture Position",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local name = unitFrame.healthBar.unitName:GetText()\n    \n    if (name) then\n        unitFrame.healthBar.unitName:SetText(name:gsub('(%S+) ',function(t) return t:sub(0,0)..'' end))\n    end\nend\n\n\n\n\n\n\n\n",
},
["Time"] = 1722754374,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/Rcm39UnZV/2",
["Icon"] = "INTERFACE\\ICONS\\Ability_Spy",
["Enabled"] = true,
["Revision"] = 451,
["semver"] = "1.0.1",
["Author"] = "Zenshoes-Area 52",
["Desc"] = "Abbreviates names on nameplates",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Abbreviated Names",
["LastHookEdited"] = "Nameplate Updated",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1711812508,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 43,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color",
["LastHookEdited"] = "Constructor",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Cast Update",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local spec = GetSpecialization()\n    envTable.spec = spec\n    if envTable.class ~= 9 then\n        envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n    else\n        -- Special warlock logic because warlocks are special\n        if envTable.spec == 1 or envTable.spec == 3 then -- Aff & Destro\n            if IsSpellKnown(19647, true) then -- Felhunter\n                envTable.kickId = 119910\n            else -- Look for Grimoire of Sacrifice\n                local i, found = 1, false\n                local buff = UnitBuff(\"player\", i)\n                while buff do\n                    if buff == \"Grimoire of Sacrifice\" then\n                        found = true\n                        buff = nil\n                    else\n                        i = i + 1\n                        buff = UnitBuff(\"player\", i)\n                    end\n                end\n                if found == true then\n                    envTable.kickId = 132409\n                else \n                    envTable.kickId = nil\n                end\n            end\n        elseif spec == 2 then -- Demo\n            if IsSpellKnown(89766, true) then -- Felguard\n                envTable.kickId = 119914\n            elseif IsSpellKnown(19647, true) then -- Felhunter\n                envTable.kickId = 119910\n            else \n                envTable.kickId = nil \n            end\n        end\n    end\n    \n    -- Check for cast\n    local name, _, _, _, _, _, _, notInterruptible = UnitCastingInfo(unitId)\n    if name == nil then    \n        -- Check for channel\n        name, _, _, _, _, _, notInterruptible = UnitChannelInfo(unitId)\n        if name == nil then return end\n    end\n    envTable.notInterruptible = notInterruptible\n    \n    local InterruptCooldown = nil\n    if envTable.kickId ~= nil then\n        InterruptCooldown = GetSpellCooldown(envTable.kickId)\n    else\n        InterruptCooldown = 1\n    end\n    \n    if envTable.notInterruptible then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n    elseif InterruptCooldown > 0 then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n    else\n        --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Check if the unit is still casting (did someone else interrupt?)\n    local name = UnitCastingInfo(unitId) or UnitChannelInfo(unitId)\n    \n    if self.IsInterrupted then\n        Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n        return\n    end\n    \n    local InterruptCooldown = nil\n    if envTable.kickId ~= nil then\n        InterruptCooldown = GetSpellCooldown(envTable.kickId)\n    else\n        InterruptCooldown = 1\n    end\n    \n    if envTable.notInterruptible then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 0, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"protectedColor\"])\n    elseif InterruptCooldown > 0 then\n        --Plater.SetCastBarBorderColor (unitFrame, 1, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"cooldownColor\"])\n    else\n        --Plater.SetCastBarBorderColor(unitFrame, 0, 1, 0)\n        Plater.SetCastBarBorderColor(unitFrame, modTable.config[\"readyColor\"])\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local spec = GetSpecialization()\n    envTable.spec = spec\nend\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1723225142,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 132219,
["Enabled"] = false,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Verlijke-Mal'Ganis",
["Desc"] = "Changes the color of the nameplate castbar based on the current cooldown of the player's interrupt.",
["Prio"] = 99,
["Name"] = "Interrupt CD Indicator (Quazi)",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Kick Ready Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar when your kick is ready to be used.",
},
},
},
},
["last_news_time"] = 1702345503,
["aura_width2"] = 16,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["aura_height2"] = 12,
["health_statusbar_bgcolor"] = {
0.0431372,
0.0431372,
0.0431372,
1,
},
["buff_frame_anchor_and_size_migrated"] = true,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            self.FrameOverlay.LeapArrow1:Show()\n            self.FrameOverlay.LeapArrow2:Show()\n            self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Stop()\n        texture:Hide()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1722356313,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = false,
["Revision"] = 119,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["__TrashAt"] = 1725476302,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["Name"] = "Cast - Heroic Leap [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Rename Spell",
["Value"] = true,
["Key"] = "bRenameSpell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Name"] = "Spell Name",
["Value"] = "Heroic Leap",
["Key"] = "spellName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color",
["Value"] = false,
["Key"] = "bUseCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["SpellIds"] = {
447141,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1719710916,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 79,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["__TrashAt"] = 1725476302,
["NpcNames"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[412129] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[427176] = {
true,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[426860] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[201226] = {
true,
"orangered",
"",
},
[377204] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[257426] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
true,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[375943] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[333488] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[426893] = {
true,
"orangered",
"",
},
[199151] = {
true,
"blue",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[200913] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[257756] = {
true,
"orchid",
"",
},
[427342] = {
true,
"orchid",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[324323] = {
true,
"orangered",
"",
},
[331718] = {
true,
"orangered",
"",
},
[388392] = {
true,
"darkorange",
"",
},
[255567] = {
true,
"orangered",
"",
},
[427025] = {
true,
"orangered",
"",
},
[226296] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[381525] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[426645] = {
true,
"orangered",
},
[87618] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[448640] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[320822] = {
true,
"orchid",
"",
},
[387950] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[226304] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[426905] = {
false,
"white",
"",
},
[449090] = {
true,
"orangered",
"",
},
[383823] = {
true,
"orchid",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[384868] = {
true,
"orangered",
"",
},
[432198] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[188404] = {
true,
"orangered",
"",
},
[369828] = {
true,
"orchid",
"",
},
[382277] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[372225] = {
true,
"orchid",
"",
},
[88308] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[373742] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[385958] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[265721] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[372087] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[412505] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[268202] = {
true,
"orchid",
"",
},
[265019] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[427616] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[340160] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[391118] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[443500] = {
true,
"orangered",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["castbar_target_anchor"] = {
["side"] = 11,
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Fixate On You"] = 11,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Blink by Time Left"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Fixate"] = 11,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - On Going Cast [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Aura - Buff Alert"] = 15,
["Cast - Important Target [P]"] = 2,
["Aura - Is Cast Bar [P]"] = 1,
["Unit - Important"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Color Change"] = 1,
["Auto Set Skull"] = 11,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Add - Warning [P]"] = 5,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Explosion Affix M+"] = 14,
["Aura Border Color"] = 1,
["Countdown"] = 11,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Tank Interrupt"] = 12,
["Cast - Voidzone [P]"] = 2,
["Unit Power"] = 1,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["plater_resources_padding"] = 2,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["cast_statusbar_texture"] = "Solid",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["extra_icon_height"] = 10,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 2.083333379899463,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "PlaterBackground",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Solid",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Extra Border"] = 2,
["Monk Statue"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.09999999403953552,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110002,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Accidental Presidency",
["not_affecting_combat_alpha"] = 0.7999999523162842,
["extra_icon_stack_font"] = "Accidental Presidency",
["aura_height"] = 12,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["aura2_x_offset"] = 2.099990844726563,
["target_indicator"] = "NONE",
["cast_statusbar_spark_offset"] = -13,
["plater_resources_personal_bar"] = false,
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["show_healthbars_on_not_attackable"] = true,
["target_shady_alpha"] = 0.59999996423721,
["aura_alpha"] = 0.84999996423721,
["castbar_target_font"] = "Accidental Presidency",
["ui_parent_cast_strata"] = "DIALOG",
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372223] = "nil",
[427176] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422541] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[448105] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "nil",
[384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396665] = "nil",
[377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388392] = "nil",
[450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Jump.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[209628] = "nil",
[441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199151] = "nil",
[416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411994] = "nil",
[434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427616] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateOtherTopInset"] = "0.085",
["nameplateSelfAlpha"] = "0.75",
["nameplateSelfBottomInset"] = "0.2",
["NamePlateHorizontalScale"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "1",
["nameplateSelfTopInset"] = "0.5",
["ShowClassColorInNameplate"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateMinAlphaDistance"] = "-158489.31924611",
},
["plater_resources_scale"] = 0.8,
["castbar_target_outline"] = "NONE",
["login_counter"] = 18857,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["blizzard_nameplate_font_size"] = 10,
["target_highlight_height"] = 18,
["pet_height_scale"] = 0.9999999403953552,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["version"] = 3,
["aura_stack_font"] = "Accidental Presidency",
["patch_version"] = 37,
["no_spellname_length_limit"] = true,
["target_shady_enabled"] = false,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["target_highlight_alpha"] = 1,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["aura_tracker"] = {
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
["329181"] = false,
[163689] = true,
[227931] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["281242"] = true,
["342938"] = true,
["324652"] = false,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
["debuff_banned"] = {
["331653"] = true,
["330911"] = true,
["327980"] = true,
["284678"] = true,
["281242"] = true,
["299151"] = true,
["340007"] = true,
},
},
["aura_x_offset"] = 0,
["plater_resources_show"] = false,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1694734826,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["Revision"] = 663,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = false,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["SpellIds"] = {
376851,
396044,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
377991,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
},
["Prio"] = 99,
["Name"] = "Cast - Small Alert [Plater]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1711469681,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 112,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Prio"] = 99,
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Enabled"] = true,
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["SpellIds"] = {
261265,
261266,
271590,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1711469713,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 635,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Name"] = "Aura - Buff Alert [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1702402951,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 838,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 91,
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
387145,
384365,
152964,
398150,
152801,
397878,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
253517,
377488,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Very Important [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1711469714,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 371,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
["animSpeed"] = 0.199999988079071,
["arrowAlpha"] = 1,
["desaturateArrow"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1723835260,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = 1958262,
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 915,
["semver"] = "",
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
426893,
427616,
445457,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Quazii FRONTALS",
["PlaterCore"] = 1,
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 269,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["SpellIds"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = 1029718,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1711469721,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 140,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Prio"] = 99,
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["Enabled"] = true,
["Desc"] = "Show the energy amount above the nameplate",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1721885424,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = false,
["Revision"] = 268,
["semver"] = "",
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["NpcNames"] = {
},
["Author"] = "Tecno-Azralon",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Options"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1541606626,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 45,
["Options"] = {
},
["Author"] = "抹了油的大叔-白银之手",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Name"] = "NameplaterColor with Special Buff ID",
["PlaterCore"] = 1,
["SpellIds"] = {
277242,
},
["Desc"] = "NameplaterColor with Special Buff ID",
["Enabled"] = false,
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["useNameplateColor"] = true,
["castBarHeight"] = 6,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1721885422,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 551,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Icon"] = 2175503,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["Name"] = "Explosion Affix M+ [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
273577,
382712,
389446,
},
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Time"] = 1694734704,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["NpcNames"] = {
"141851",
},
["Enabled"] = false,
["Revision"] = 72,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
["Icon"] = 135024,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Color Change [Plater]",
["Prio"] = 99,
},
{
["ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Time"] = 1620152446,
["Temp_ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 48,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
["Icon"] = 133006,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["Name"] = "Aura - Border Color [Plater]",
["Prio"] = 99,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 375,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Warning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Critical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["version"] = -1,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["Time"] = 1550589160,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
"surf darter",
},
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Revision"] = 5,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "New Script",
["OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Enabled"] = false,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1721885421,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 1385,
["Options"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Icon"] = "INTERFACE\\ICONS\\Spell_Fire_FelFlameStrike",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
258153,
258313,
274569,
278020,
261635,
272700,
268030,
265368,
264520,
265407,
278567,
278602,
258128,
257791,
258938,
265089,
272183,
256060,
257397,
269972,
270901,
270492,
263215,
268797,
262554,
255041,
252781,
250368,
258777,
278504,
266106,
257732,
268309,
269302,
263202,
257784,
278755,
272180,
263066,
267273,
265912,
274438,
268317,
268375,
276767,
264105,
265876,
270464,
278961,
265468,
256897,
280604,
268702,
255824,
253583,
250096,
278456,
262092,
257270,
267818,
265091,
262540,
263318,
263959,
257069,
256849,
267459,
253544,
268008,
267981,
272659,
264396,
257736,
264390,
257426,
274400,
272609,
269843,
269029,
272827,
269266,
263912,
264923,
258864,
256955,
265540,
260793,
270003,
270507,
257337,
268415,
275907,
268865,
260669,
260280,
253239,
265541,
250258,
256709,
277596,
276268,
265372,
263905,
265781,
257170,
268846,
270514,
258622,
258199,
256627,
257870,
259711,
258917,
263891,
268027,
268348,
269313,
272711,
271174,
268260,
269399,
268239,
264574,
261563,
257288,
257757,
267899,
255741,
264757,
260894,
263583,
276292,
272874,
264101,
264407,
271456,
262515,
275192,
270084,
257785,
267237,
266951,
267433,
255577,
255371,
270891,
267357,
258338,
257169,
270927,
273995,
260926,
264027,
267257,
253721,
265019,
260924,
263309,
266206,
268187,
260067,
274507,
276068,
263278,
258317,
256594,
268391,
268230,
260852,
267763,
268706,
264734,
288693,
288694,
270590,
290787,
72286,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["Name"] = "M+ Important Spells [Plater]",
["Prio"] = 99,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1694734765,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 695,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["NpcNames"] = {
},
["Enabled"] = false,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Name"] = "Cast - Ultra Important [P]",
["Prio"] = 99,
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
211464,
361180,
156718,
358320,
386757,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
426905,
253544,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734910,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Enabled"] = false,
["Revision"] = 67,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["Name"] = "Auto Set Skull",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734694,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 212,
["Options"] = {
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["Name"] = "Countdown",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
["fontColor"] = {
1,
1,
1,
1,
},
["fontSize"] = 12,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1721885435,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["url"] = "",
["Icon"] = 136048,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["Revision"] = 246,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["Name"] = "Unit - Show Energy [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["timerList"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1694734898,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Enabled"] = false,
["Revision"] = 1216,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Alert + Timer [P]",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1694734852,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["Revision"] = 885,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = false,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Cast - Important Target [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Width",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Frame Height",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameHeight",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 33,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["semver"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1694734860,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Revision"] = 549,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Cast - Glowing [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
373201,
384353,
265376,
193941,
411002,
},
["Desc"] = "Show a different animation for the cast bar.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734866,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["url"] = "",
["Icon"] = 134229,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["Revision"] = 39,
["Options"] = {
},
["NpcNames"] = {
},
["Enabled"] = false,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["Name"] = "Cast - Effect After Cast [P]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
191284,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734891,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["Revision"] = 163,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.3,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["NpcNames"] = {
},
["Enabled"] = false,
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Name"] = "Cast - Circle AoE [P]",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = false,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["Name"] = "Add - Important [P]",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
194745,
190426,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Options"] = {
},
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1694734836,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 888,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["SpellIds"] = {
392640,
397888,
381517,
209033,
385029,
374563,
377341,
369675,
369411,
278961,
202108,
88186,
},
["Prio"] = 99,
["Name"] = "Cast - Quick Flash [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1721885429,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["url"] = "",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 163,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Add - Warning [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["SpellIds"] = {
},
["Desc"] = "Change the color of  add",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694740636,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["Revision"] = 113,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Name"] = "Nameplate Scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["Enabled"] = false,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Name"] = "Add - Non Elite Trash [P]",
["Desc"] = "",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1721885427,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["Revision"] = 103,
["semver"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = false,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["SpellIds"] = {
373688,
391050,
},
["Prio"] = 99,
["Name"] = "Cast - Shield Interrupt [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1694734893,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["Revision"] = 508,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["NpcNames"] = {
},
["Enabled"] = false,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Name"] = "Cast - Stop Casting [P]",
["Desc"] = "Just stop casting",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
},
["Enabled"] = false,
["Revision"] = 106,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Name"] = "Shake Amplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["version"] = -1,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["Desc"] = "",
["semver"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1721885432,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = true,
["Revision"] = 25,
["semver"] = "",
["Icon"] = 236209,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Name"] = "Aura While Casting [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734841,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["url"] = "",
["Icon"] = 4038101,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["Revision"] = 74,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["NpcNames"] = {
},
["Enabled"] = false,
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Cast - On Going Cast [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
388886,
209676,
377912,
},
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1723902758,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1671,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["UID"] = "0x6602f3de1af11f4f",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Icon"] = 1305153,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["PlaterCore"] = 1,
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
215433,
392924,
397889,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
450756,
451097,
431333,
426283,
449455,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
424419,
424420,
423051,
444743,
437721,
440687,
441627,
430805,
432959,
426295,
426145,
427157,
448248,
334748,
442210,
338353,
},
["Prio"] = 99,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = false,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["NpcNames"] = {
},
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important by Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 6,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = false,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["NpcNames"] = {
},
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shining Green [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = false,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Special Ability [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = false,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["version"] = -1,
["Name"] = "Cast - Heroic Leap [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = false,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Spark Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Width Scale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Key"] = "sparkHeightScale",
["Value"] = 1,
["Name"] = "Spark Height Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["Desc"] = "Change the spark color to differentiate a cast from another.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = false,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Stun [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Desc"] = "Healing effect that cannot be interrupted.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = false,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE Hit All [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.2,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.05,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.9,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = false,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Debuff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Desc"] = "Show a different animation for the cast bar.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Simple Interrupt [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 25,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 30,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Desc"] = "Play a very fast flash when the cast start.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = false,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Name"] = "Dots X Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Max Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - Ongoing Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = false,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Heal Cut [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = false,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Voidzone [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE With Range [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.3,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 0.8,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = false,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["NpcNames"] = {
},
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Is Cast Bar [P]",
["version"] = -1,
["Options"] = {
},
["Desc"] = "Show a castbar for the aura duration.",
},
},
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["castbar_framelevel"] = 0,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["click_space_friendly"] = {
92,
1,
},
["aura_show_tooltip"] = true,
["aura_cooldown_reverse"] = false,
["extra_icon_timer_size"] = 10,
["indicator_rare"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[149740] = {
true,
false,
"fuchsia",
},
[213806] = {
true,
false,
"fuchsia",
},
[136186] = {
false,
false,
"honeydew",
},
[95842] = {
true,
false,
"fuchsia",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[40634] = {
true,
false,
"fuchsia",
},
[130436] = {
false,
false,
"aqua",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[210108] = {
true,
false,
"fuchsia",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[134024] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[196045] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[207939] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[129227] = {
false,
false,
"maroon",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"aqua",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
false,
false,
"honeydew",
},
[90997] = {
true,
false,
"aqua",
},
[207186] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[132126] = {
false,
false,
"honeydew",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"fuchsia",
},
[139422] = {
false,
false,
"lightskyblue",
},
[166276] = {
true,
false,
"fuchsia",
},
[168578] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[213338] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[91006] = {
true,
false,
"fuchsia",
},
[205158] = {
true,
false,
"fuchsia",
},
[45919] = {
true,
false,
"aqua",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[134701] = {
false,
false,
"maroon",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[206697] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[132532] = {
false,
false,
"palegreen",
},
[164501] = {
false,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[224732] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[133436] = {
false,
false,
"lightskyblue",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[195842] = {
true,
false,
"fuchsia",
},
[215407] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"fuchsia",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[130404] = {
false,
false,
"peru",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[194315] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[136005] = {
false,
false,
"blue",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[136006] = {
false,
false,
"blue",
},
[169893] = {
true,
false,
"magenta",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[213885] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[138061] = {
false,
false,
"magenta",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[138063] = {
false,
false,
"blue",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[138064] = {
false,
false,
"blue",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
false,
false,
"goldenrod",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[135258] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[113537] = {
true,
false,
"aqua",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[133345] = {
false,
false,
"goldenrod",
},
[195876] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[195877] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[164804] = {
true,
false,
"aqua",
},
[195878] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"fuchsia",
},
[220815] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"aqua",
},
[104270] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[207198] = {
true,
false,
"fuchsia",
},
[134629] = {
false,
false,
"navajowhite",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[130485] = {
false,
false,
"peru",
},
[160495] = {
true,
false,
"magenta",
},
[138338] = {
true,
false,
"fuchsia",
},
[187897] = {
true,
false,
"aqua",
},
[216342] = {
true,
false,
"fuchsia",
},
[211290] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[136549] = {
true,
false,
"aqua",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[131818] = {
false,
false,
"plum",
},
[207969] = {
true,
false,
"fuchsia",
},
[200137] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[190407] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[133685] = {
true,
false,
"fuchsia",
},
[136139] = {
false,
false,
"peru",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[136295] = {
false,
false,
"peru",
},
[131436] = {
true,
false,
"aqua",
},
[133482] = {
false,
false,
"maroon",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[135474] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[228540] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184301] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[134418] = {
false,
false,
"dodgerblue",
},
[197912] = {
true,
false,
"fuchsia",
},
[129529] = {
false,
false,
"goldenrod",
},
[223253] = {
true,
false,
"fuchsia",
},
[130488] = {
false,
false,
"lightsalmon",
},
[141285] = {
false,
false,
"lightgreen",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[133432] = {
false,
false,
"lightskyblue",
},
[43873] = {
true,
false,
"aqua",
},
[184023] = {
true,
false,
"fuchsia",
},
[98792] = {
true,
false,
"aqua",
},
[126919] = {
true,
false,
"fuchsia",
},
[139949] = {
false,
false,
"honeydew",
},
[208165] = {
true,
false,
"fuchsia",
},
[196798] = {
true,
false,
"fuchsia",
},
[40167] = {
true,
false,
"fuchsia",
},
[133870] = {
true,
false,
"fuchsia",
},
[91001] = {
true,
false,
"aqua",
},
[95771] = {
true,
false,
"fuchsia",
},
[196671] = {
true,
false,
"aqua",
},
[163458] = {
true,
false,
"fuchsia",
},
[206698] = {
true,
false,
"fuchsia",
},
[210156] = {
true,
false,
"fuchsia",
},
[136934] = {
false,
false,
"navajowhite",
},
[208193] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[206064] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[135239] = {
false,
false,
"paleturquoise",
},
[98521] = {
true,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[163503] = {
true,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[189265] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"peru",
},
[194317] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[189266] = {
true,
false,
"aqua",
},
[208438] = {
true,
false,
"aqua",
},
[197698] = {
true,
false,
"aqua",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"magenta",
},
[47238] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[200126] = {
true,
false,
"fuchsia",
},
[204206] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[189340] = {
true,
false,
"aqua",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[131318] = {
false,
false,
"fuchsia",
},
[168318] = {
true,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[59555] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[166275] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[137713] = {
false,
false,
"paleturquoise",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[184132] = {
true,
false,
"fuchsia",
},
[134331] = {
false,
false,
"lightskyblue",
},
[164552] = {
true,
false,
"fuchsia",
},
[125977] = {
false,
false,
"plum",
},
[190294] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[194894] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[130661] = {
false,
false,
"lightgreen",
},
[216293] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[134012] = {
false,
false,
"lightsalmon",
},
[134417] = {
false,
false,
"lightskyblue",
},
[98370] = {
true,
false,
"fuchsia",
},
[136353] = {
false,
false,
"royalblue",
},
[134284] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"fuchsia",
},
[220195] = {
true,
false,
"fuchsia",
},
[213934] = {
true,
false,
"aqua",
},
[59552] = {
true,
false,
"fuchsia",
},
[137716] = {
false,
false,
"blue",
},
[113998] = {
true,
false,
"aqua",
},
[212403] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[133430] = {
false,
false,
"cornflowerblue",
},
[133593] = {
false,
false,
"honeydew",
},
[205363] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[188067] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[190405] = {
true,
false,
"fuchsia",
},
[122971] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[174802] = {
true,
false,
"fuchsia",
},
[123227] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[129553] = {
true,
false,
"fuchsia",
},
[216338] = {
true,
false,
"aqua",
},
[134364] = {
false,
false,
"honeydew",
},
[75459] = {
true,
false,
"fuchsia",
},
[205151] = {
true,
false,
"aqua",
},
},
["cast_statusbar_spark_width"] = 25,
["indicator_elite"] = false,
},
["Whiiskeyz || Plater"] = {
["target_highlight"] = false,
["aura_sort"] = true,
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateOverlapV"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["ShowNamePlateLoseAggroFlash"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemyMinus"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["NamePlateClassificationScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriendlyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplatePersonalHideDelaySeconds"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowDebuffsOnFriendly"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplatePersonalShowInCombat"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplatePersonalShowWithTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMinAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateResourceOnTarget"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateLargerScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriendlyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelfScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateTargetBehindMaxDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemies"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["NamePlateVerticalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelectedAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowSelf"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelfTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMotionSpeed"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateGlobalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemyMinions"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriendlyNPCs"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelectedScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowAll"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMinAlphaDistance"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMotion"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplatePersonalShowAlways"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateMinScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["NamePlateHorizontalScale"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateOtherTopInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateOccludedAlphaMult"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelfBottomInset"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemyTotems"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriendlyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateSelfAlpha"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowEnemyGuardians"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriendlyPets"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["ShowClassColorInNameplate"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
["nameplateShowFriends"] = "[string \"=[C]\"]: in function `SetCVar'\n[string \"@Interface/AddOns/Plater/Plater.lua\"]:2311: in function `RestoreProfileCVars'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:908: in function `DoProfileImport'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:771: in function `ConfirmImportProfile'\n[string \"@Interface/AddOns/Plater/Plater_OptionsPanel.lua\"]:1160: in function <Interface/AddOns/Plater/Plater_OptionsPanel.lua:1160>\n[string \"=[C]\"]: in function `xpcall'\n[string \"@Interface/AddOns/Plater/libs/DF/fw.lua\"]:4427: in function `CoreDispatch'\n[string \"@Interface/AddOns/Plater/libs/DF/button.lua\"]:737: in function <Interface/AddOns/Plater/libs/DF/button.lua:673>\n",
},
["url"] = "https://wago.io/whiiskeyzplater/44",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["indicator_raidmark_scale"] = 0.69999998807907,
["cast_statusbar_spark_alpha"] = 0.71999996900558,
["aura2_y_offset"] = 15.899993896484,
["aura_timer_text_anchor"] = {
["y"] = -7,
["x"] = -1,
["side"] = 1,
},
["castbar_framelevel"] = 0,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Accidental Presidency",
["spellpercent_text_font"] = "Accidental Presidency",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Accidental Presidency",
["show_guild_name"] = true,
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 5,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["cast_incombat"] = {
120,
},
["spellname_text_outline"] = "OUTLINE",
["only_thename"] = true,
["big_actorname_text_color"] = {
0.5,
1,
0.5,
},
["spellname_text_font"] = "Accidental Presidency",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["only_names"] = true,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color"] = {
0.5,
1,
0,
1,
},
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["big_actorname_text_font"] = "Accidental Presidency",
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana"] = {
nil,
4,
},
["spellname_text_size"] = 9,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["big_actorname_text_outline"] = "OUTLINE",
["actorname_friend_color"] = {
0.70980392156863,
},
["percent_text_ooc"] = true,
["big_actortitle_text_color"] = {
1,
0.8,
0,
},
["level_text_alpha"] = 1,
["percent_text_size"] = 8,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["buff_frame_y_offset"] = 0,
["actorname_text_anchor"] = {
["y"] = 2,
},
["quest_enabled"] = true,
["percent_show_health"] = true,
["actorname_text_font"] = "Accidental Presidency",
["quest_color_enabled"] = true,
["health_incombat"] = {
120,
12,
},
["health"] = {
100,
3,
},
["relevance_state"] = 4,
["mana_incombat"] = {
nil,
4,
},
["percent_text_enabled"] = true,
["actorname_use_friends_color"] = false,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellpercent_text_font"] = "Accidental Presidency",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 5,
},
["spellname_text_outline"] = "OUTLINE",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 1,
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["big_actorname_text_size"] = 10,
["percent_show_health"] = true,
["percent_text_ooc"] = true,
["actorname_text_anchor"] = {
["y"] = 2,
},
["spellname_text_size"] = 9,
["health_incombat"] = {
nil,
12,
},
["health"] = {
100,
3,
},
["actorname_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
["percent_text_size"] = 8,
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_enabled"] = true,
},
["enemynpc"] = {
["quest_color_enemy"] = {
nil,
0.47450983524323,
0.11372549831867,
},
["spellpercent_text_font"] = "Accidental Presidency",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
100,
8,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 5,
},
["cast_incombat"] = {
nil,
10,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = -2,
["x"] = 2,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color"] = {
0.5,
1,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_color"] = {
1,
0.8,
0,
},
["percent_text_size"] = 8,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["big_actorname_text_color"] = {
0.5,
1,
0.5,
},
["spellname_text_font"] = "Accidental Presidency",
["only_names"] = true,
["level_text_alpha"] = 1,
["spellname_text_size"] = 9,
["health"] = {
100,
3,
},
["health_incombat"] = {
nil,
10,
},
["relevance_state"] = 4,
["actorname_text_anchor"] = {
["y"] = 2,
["side"] = 8,
},
["actorname_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
},
["global_health_width"] = 120,
["enemyplayer"] = {
["actorname_use_friends_color"] = true,
["spellpercent_text_font"] = "Accidental Presidency",
["actorname_friend_color"] = {
0.70980392156863,
1,
1,
1,
},
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 9,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["fixed_class_color"] = {
0,
1,
0,
},
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 5,
},
["spellname_text_outline"] = "OUTLINE",
["click_through"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = -2,
["x"] = -2,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color"] = {
0.5,
1,
0,
1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
120,
1,
},
["only_thename"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["spellname_text_font"] = "Accidental Presidency",
["only_names"] = true,
["mana"] = {
nil,
1,
},
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 1,
["spellname_text_size"] = 9,
["spellpercent_text_enabled"] = false,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["relevance_state"] = 4,
["actorname_guild_color"] = {
0.498039,
1,
0.2,
1,
},
["quest_enabled"] = true,
["actorname_text_anchor"] = {
["y"] = 2,
["side"] = 8,
},
["actorname_text_font"] = "Accidental Presidency",
["quest_color_enabled"] = true,
["health_incombat"] = {
nil,
12,
},
["health"] = {
100,
7,
},
["only_damaged"] = false,
["percent_text_size"] = 8,
["big_actorname_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_text_size"] = 10,
},
["global_health_height"] = 14,
},
["health_selection_overlay"] = "Graphite",
["aura_y_offset"] = 15.899993896484,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["first_run2"] = true,
["border_thickness"] = 1.5,
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-120-06E4562E"] = "Runes",
["Player-4184-00457B98"] = "Essence",
["Player-1175-0CFE73BA"] = "ArcaneCharges",
["Player-3684-0DE2C381"] = "HolyPower",
["Player-970-0085ED6B"] = "Essence",
["Player-4184-00487EBB"] = "HolyPower",
["Player-3684-0DFC5199"] = "ComboPoints",
["Player-3684-0DF7B56B"] = "Essence",
["Player-96-09E89B5E"] = "Chi",
["Player-3684-0DE27D79"] = "SoulShards",
["Player-4184-0041715C"] = "Chi",
["Player-3684-0DF4A452"] = "ComboPoints",
["Player-3684-0DE210A6"] = "ArcaneCharges",
["Player-3684-0DE449B3"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.8699998855591,
["npc_cache"] = {
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[109908] = {
"Nightmare Abomination",
"Darkheart Thicket",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
"enUS",
},
[99360] = {
"Vilethorn Blossom",
"Darkheart Thicket",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[201792] = {
"Ahnzon",
"Dawn of the Infinite",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[75451] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
},
[40923] = {
"Unstable Corruption",
"Throne of the Tides",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
},
[192464] = {
"Raging Ember",
"Neltharus",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[82039] = {
"Rockspine Stinger",
"The Everbloom",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[75966] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[111068] = {
"Archmage Galeorn",
"Black Rook Hold",
"enUS",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[208198] = {
"Whiiskeyz",
"Scarlet Monastery",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[198995] = {
"Chronikar",
"Dawn of the Infinite",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[198997] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Operation: Mechagon",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[207438] = {
"Headless Horseman",
"Scarlet Monastery",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[205265] = {
"Time-Displaced Trooper",
"Dawn of the Infinite",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[39616] = {
"Naz'jar Invader",
"Throne of the Tides",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[205790] = {
"Time-Lost Smack-o-Tron",
"Dawn of the Infinite",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
"enUS",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[102962] = {
"Nightmare Abomination",
"Darkheart Thicket",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[204262] = {
"Necrofrost",
"Dawn of the Infinite",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[81864] = {
"Dreadpetal",
"The Everbloom",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[205366] = {
"Time-Lost Wakethrasher",
"Dawn of the Infinite",
"enUS",
},
[84550] = {
"Xeri'tac",
"The Everbloom",
"enUS",
},
[168932] = {
"Doomguard",
"Brackenhide Hollow",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[198996] = {
"Manifested Timeways",
"Dawn of the Infinite",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[98681] = {
"Rook Spinner",
"Black Rook Hold",
"enUS",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[169429] = {
"Shivarra",
"Brackenhide Hollow",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[101476] = {
"Molten Charskin",
"Neltharion's Lair",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[186242] = {
"Skulking Gutstabber",
"Brackenhide Hollow",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[213607] = {
"Deep Sea Murloc",
"Throne of the Tides",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129758] = {
"Irontide Grenadier",
"Freehold",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[194745] = {
"Rotfang Hyena",
"Brackenhide Hollow",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[197857] = {
"Gutstabber",
"Brackenhide Hollow",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[189555] = {
"Arcane Attendant",
"The Azure Vault",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[206068] = {
"Temporal Fusion",
"Dawn of the Infinite",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[133436] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[206070] = {
"Chronaxie",
"Dawn of the Infinite",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[204536] = {
"Blight Chunk",
"Dawn of the Infinite",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[98970] = {
"Latosius",
"Black Rook Hold",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[107288] = {
"Vilethorn Sapling",
"Darkheart Thicket",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[100991] = {
"Strangling Roots",
"Darkheart Thicket",
"enUS",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[91002] = {
"Rotdrool Grabber",
"UNKNOWN",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[204030] = {
"Goblin Sapper",
"Dawn of the Infinite",
"enUS",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[206063] = {
"Temporal Deviation",
"Dawn of the Infinite",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[196203] = {
"Algeth'ar Nurse",
"Algeth'ar Academy",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[189314] = {
"Encroaching Hornswog",
"10.0 Dragon Isles",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[136006] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
"enUS",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
},
[102019] = {
"Stormforged Obliterator",
"Halls of Valor",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
"enUS",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[86547] = {
"Venom Sprayer",
"The Everbloom",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[195399] = {
"Curious Swoglet",
"Halls of Infusion",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[196117] = {
"Crystal Construct",
"The Azure Vault",
},
[208521] = {
"Pumpkin Soldier",
"Scarlet Monastery",
"enUS",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[138063] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[138064] = {
"Posh Vacationer",
"The MOTHERLODE!!",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Freehold",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[192481] = {
"Decaying Slime",
"Brackenhide Hollow",
},
[86552] = {
"Gorged Burster",
"The Everbloom",
"enUS",
},
[189472] = {
"Qalashi Lavabearer",
"Neltharus",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[190128] = {
"Zul'gamux",
"Operation: Mechagon",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[213770] = {
"Ink of Ozumat",
"Throne of the Tides",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[91008] = {
"Rockbound Pelter",
"Neltharion's Lair",
},
[133593] = {
"Expert Technician",
"The MOTHERLODE!!",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[203799] = {
"Horde Axe Thrower",
"Dawn of the Infinite",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[186664] = {
"Stonevault Ambusher",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[135258] = {
"Irontide Marauder",
"Siege of Boralus",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
"enUS",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[194467] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[201756] = {
"Whiiskeyz",
"Dawn of the Infinite",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[194469] = {
"Wither Slasher",
"Brackenhide Hollow",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[99664] = {
"Restless Soul",
"Black Rook Hold",
"enUS",
},
[45932] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
},
[133345] = {
"Feckless Assistant",
"The MOTHERLODE!!",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[77006] = {
"Corpse Skitterling",
"Shadowmoon Burial Grounds",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[203678] = {
"Grommash Hellscream",
"Dawn of the Infinite",
"enUS",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[198933] = {
"Iridikron",
"Dawn of the Infinite",
"enUS",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[187154] = {
"Arcane Curator",
"The Azure Vault",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
},
[210336] = {
"Misty Pineshrew",
"Emerald Dream",
},
[104273] = {
"Jazshariu",
"Court of Stars",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
},
[84554] = {
"Venom-Crazed Pale One",
"The Everbloom",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[187192] = {
"Rageclaw",
"Brackenhide Hollow",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[104274] = {
"Baalgar the Watchful",
"Court of Stars",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[136005] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[104275] = {
"Imacu'tya",
"Court of Stars",
},
[126845] = {
"Captain Jolly",
"Freehold",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[169426] = {
"Infernal",
"Brackenhide Hollow",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[169421] = {
"Felguard",
"Brackenhide Hollow",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[101437] = {
"Burning Geode",
"UNKNOWN",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[45572] = {
"Howling Gale",
"The Vortex Pinnacle",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[201790] = {
"Loszkeleth",
"Dawn of the Infinite",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[169425] = {
"Felhound",
"Brackenhide Hollow",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"UNKNOWN",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[137458] = {
"Rotting Spore",
"The Underrot",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
},
[196712] = {
"Nullification Device",
"Halls of Infusion",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[169428] = {
"Wrathguard",
"Brackenhide Hollow",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[212681] = {
"Vicious Snap Dragon",
"Throne of the Tides",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
"enUS",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[169430] = {
"Ur'zul",
"Brackenhide Hollow",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
"enUS",
},
[39960] = {
"Deep Murloc Drudge",
"Throne of the Tides",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
},
["spell_animation_list"] = {
["30451"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 30451,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["31935"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 31935,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["31661"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 31661,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["285452"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 285452,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["222024"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["info"] = {
["spellid"] = 222024,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
},
["2098"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 2098,
["class"] = "ROGUE",
["time"] = 1539293610,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.079999998211861,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 1.5,
["fade_in"] = 0,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 2.710000038147,
},
},
["228600"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 228600,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["203782"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 203782,
["class"] = "DEMONHUNTER",
["time"] = 1539716639,
["desc"] = "",
},
},
["107270"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 107270,
["class"] = "MONK",
["time"] = 1539296490,
["desc"] = "",
},
},
["162243"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 162243,
["class"] = "DEMONHUNTER",
["time"] = 1539717356,
["desc"] = "",
},
},
["117418"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
["info"] = {
["spellid"] = 117418,
["class"] = "MONK",
["time"] = 1539296387,
["desc"] = "",
},
},
["204157"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 204157,
["class"] = "DEMONHUNTER",
["time"] = 1539716637,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["184575"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 184575,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["324540"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["info"] = {
["spellid"] = 324540,
["class"] = "WARLOCK",
["time"] = 1539292087,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["264178"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["info"] = {
["spellid"] = 264178,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["185099"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.18999999761581,
["absolute_sineX"] = false,
["scaleY"] = 0.84999847412109,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 185099,
["class"] = "MONK",
["time"] = 1539712435,
["desc"] = "",
},
},
["55090"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 3.9020702838898,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.7999999523163,
},
["info"] = {
["spellid"] = 55090,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["198030"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.31999999284744,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 198030,
["class"] = "DEMONHUNTER",
["time"] = 1539717136,
["desc"] = "",
},
},
["148135"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
["info"] = {
["spellid"] = 148135,
["class"] = "MONK",
["time"] = 1539295958,
["desc"] = "",
},
},
["189112"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.34999999403954,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["duration"] = 0.40000000596046,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
["info"] = {
["spellid"] = 189112,
["class"] = "DEMONHUNTER",
["time"] = 1539715467,
["desc"] = "",
},
},
["85948"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 85948,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["35395"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 35395,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
},
["280720"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 280720,
["class"] = "ROGUE",
["time"] = 1539292087,
["desc"] = "",
},
},
["49998"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["scaleY"] = 1,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 49998,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["155166"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 155166,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
},
["228354"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 228354,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["8042"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 285452,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["27285"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 27285,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["53351"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 53351,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["228598"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 228598,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["108853"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 108853,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["205523"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 205523,
["class"] = "MONK",
["time"] = 1539295885,
["desc"] = "",
},
},
["245388"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.03,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 245388,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 5,
["fade_in"] = 0.01,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 2,
},
},
["6343"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.1,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 6343,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["199547"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 199547,
["class"] = "DEMONHUNTER",
["time"] = 1539717795,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["17364"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 17364,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["206930"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 222026,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["86040"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["info"] = {
["spellid"] = 86040,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["228478"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 228478,
["class"] = "DEMONHUNTER",
["time"] = 1539716636,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["199804"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 0.88999938964844,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["info"] = {
["spellid"] = 199804,
["class"] = "ROGUE",
["time"] = 1539293872,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0499999523163,
["scale_upY"] = 1.0499999523163,
["scale_downX"] = 1,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["116858"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0499999523163,
["duration"] = 0.099999994039536,
["scale_downX"] = 0.94999998807907,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.0499999523163,
["cooldown"] = 0.75,
["scale_downY"] = 0.94999998807907,
},
["info"] = {
["spellid"] = 116858,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = 4.9699974060059,
["amplitude"] = 0.59999996423721,
["fade_in"] = 0.049999997019768,
["duration"] = 0.099999994039536,
["cooldown"] = 0.25,
["frequency"] = 2.8999998569489,
},
},
["197834"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 197834,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
},
["5374"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 5374,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
},
["11366"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 11366,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["199552"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 199552,
["class"] = "DEMONHUNTER",
["time"] = 1539717392,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["265157"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.096889182925224,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["info"] = {
["spellid"] = 265157,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 0.50999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 39.995635986328,
},
},
["32645"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 32645,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
},
["222026"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 222026,
["class"] = "DEATHKNIGHT",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["scaleY"] = -1,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
["196278"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 196278,
["class"] = "WARLOCK",
["time"] = 0,
["desc"] = "",
},
},
["46968"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
["info"] = {
["spellid"] = 46968,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["100780"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 100780,
["class"] = "MONK",
["time"] = 1539295910,
["desc"] = "",
},
},
["188443"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 188443,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
},
["196819"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 196819,
["class"] = "ROGUE",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["scaleY"] = 1,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
},
["20243"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 20243,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
},
["185763"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["info"] = {
["spellid"] = 185763,
["class"] = "ROGUE",
["time"] = 1539275610,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
["7268"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 7268,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["53595"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 53595,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
["257045"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 1,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 257045,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["100784"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["info"] = {
["spellid"] = 100784,
["class"] = "MONK",
["time"] = 1539296312,
["desc"] = "",
},
},
["187874"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
["info"] = {
["spellid"] = 187874,
["class"] = "SHAMAN",
["time"] = 0,
["desc"] = "",
},
},
["2643"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 2643,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["52174"] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
["info"] = {
["spellid"] = 52174,
["class"] = "WARRIOR",
["time"] = 0,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
},
["44425"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = 1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 44425,
["class"] = "MAGE",
["time"] = 0,
["desc"] = "",
},
},
["187708"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["scaleY"] = 0.6,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["info"] = {
["spellid"] = 187708,
["class"] = "HUNTER",
["time"] = 0,
["desc"] = "",
},
},
["275779"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["scaleY"] = -1,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 275779,
["class"] = "PALADIN",
["time"] = 0,
["desc"] = "",
},
},
["185438"] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["info"] = {
["spellid"] = 185438,
["class"] = "ROGUE",
["time"] = 1539204014,
["desc"] = "",
},
["2"] = {
["enabled"] = true,
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["animation_type"] = "scale",
},
},
},
["indicator_scale"] = 0.99999994039536,
["aura_grow_direction"] = 3,
["castbar_icon_size"] = "same as castbar plus healthbar",
["health_selection_overlay_alpha"] = 0.29999998211861,
["minor_height_scale"] = 0.99999994039536,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1679733197,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 365,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.50196078431373,
0.50196078431373,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Attacking Specific Unit [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 95,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1553450458,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Hide Neutral Units [Plater]",
["Icon"] = 1990989,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 188,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1668849050,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Players Targeting a Target [Plater]",
["Icon"] = 1966587,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1552354619,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Current Target Color [Plater]",
["Icon"] = 878211,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Combo Points [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 193,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled and unitFrame.ActorType == \"enemyplayer\") then\n        \n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n        \n    else\n        envTable.BorderFrame:Hide() \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1670250956,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Extra Border [Plater]",
["Icon"] = 133689,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1668591946,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 95,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Reorder Nameplate [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 110,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1669755985,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Color Automation [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1608663128,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 356,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 236,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Script for the Jaina encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Unexploded Ordinance\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.UnexplodedOrdinance) then\n        \n        --make the life percent be bigger than the regular size\n        --so it's better to see the health percent of the barrel\n        local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n        Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize + envTable.UnexplodedOrdinanceTextSizeIncrease)\n    end\n    \n    if (envTable.IncreaseSize [unitFrame.namePlateNpcId]) then\n        local currentHeight = unitFrame.healthBar:GetHeight()\n        Plater.SetNameplateSize (unitFrame, nil, currentHeight + envTable.IncreaseSize [unitFrame.namePlateNpcId])\n    end\n    \nend\n\n\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame, nil, envTable.UnexplodedOrdinanceCastBarHeight)\n        Plater:SetFontSize (unitFrame.castBar.percentText, envTable.UnexplodedOrdinanceTimerSize)\n    end\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the health percent text size\n    local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n    Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Override the color\n    if (envTable.Colors [unitFrame.namePlateNpcId]) then\n        Plater.SetNameplateColor (unitFrame, envTable.Colors [unitFrame.namePlateNpcId])\n    end    \n    \n    --Show the name of the unit in the Ice Block nameplate\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.IceBlock) then\n        --find which player this block are holding\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i\n            if (UnitExists (unit)) then\n                for debuffId = 1, 40 do\n                    local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (unit, debuffId)\n                    \n                    --cancel the loop if there's no more debuffs on the player\n                    if (not name) then \n                        break \n                    end                    \n                    \n                    --check if who casted this debuff is the unit shown on this nameplate\n                    if (UnitIsUnit (caster or \"\", unitId)) then\n                        local unitName = UnitName (unit)\n                        \n                        --color the text by the class\n                        unitName = Plater.SetTextColorByClass (unit, unitName)\n                        \n                        --add the role icon\n                        if (Details) then\n                            local role = UnitGroupRolesAssigned (unit)\n                            unitName = Details:AddRoleIcon (unitName, role, 12)\n                        end\n                        \n                        unitFrame.unitName:SetText (unitName)\n                        unitFrame.castBar.Text:SetText (unitName)\n                        break\n                    end\n                    \n                end\n            else\n                break\n            end\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame)\n        Plater:SetFontSize (unitFrame.castBar.percentText, Plater.db.profile.plate_config.enemynpc.spellpercent_text_size)\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors [148631] = \"orange\" --Unexploded Ordinance\n    envTable.Colors [148522] = \"white\" --Ice Block\n    \n    --increase the nameplate height for these units\n    envTable.IncreaseSize = {}\n    envTable.IncreaseSize [148522] = 4 --Ice Block (increase in 4 pixels)\n    \n    --increase the size of the life percent for the nameplate of the barrel\n    envTable.UnexplodedOrdinanceTextSizeIncrease = 3\n    \n    --increase the castbar size for the unexploded ordinance explosion cast\n    envTable.UnexplodedOrdinanceCast = true\n    envTable.UnexplodedOrdinanceSpellID = 288221 --12058 --(debug)\n    envTable.UnexplodedOrdinanceCastBarHeight = 18\n    envTable.UnexplodedOrdinanceTimerSize = 18\n    \n    --npcIDs\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.UnexplodedOrdinance = 148631\n    envTable.NpcIDs.IceBlock = 148522\nend\n\n--tests 126023 --harbor saurid - dazar'alor harbor\n--tests 3127 venomtail scorpid - durotar\n--tests 12058 dustwind storm witch - durotar\n--Load Condition: EncounterID 2281\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1551894760,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Jaina Encounter [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_jaina",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2281,
["Enabled"] = true,
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 81,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Script for Stormwall Blockade encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.Colors.TemptingSiren) then\n            Plater.SetNameplateColor (unitFrame, envTable.Colors.TemptingSiren)\n        end\n        \n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.NameplateHeight.TemptingSiren) then\n            \n            Plater.SetNameplateSize (unitFrame, nil, envTable.NameplateHeight.TemptingSiren)\n            \n        end\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors.TemptingSiren = \"orange\"\n    \n    --npcID\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.TemptingSiren = 146436\n    \n    --nameplate height for each unit\n    envTable.NameplateHeight = {}\n    envTable.NameplateHeight.TemptingSiren = 18\n    \n    \n    \nend\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1551887545,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Stormwall Encounter [Plater]",
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_stormwall_blockade",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2280,
["Enabled"] = true,
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 58,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Herith�gue-Proudmoore",
["Desc"] = "Change the border of the focus target.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.BorderThickness = 3\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.UpdateBorder (unitFrame, unit)\n        local plateFrame = unitFrame:GetParent()\n        \n        if (UnitIsUnit (\"focus\", unit)) then\n            Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            local borderSize = envTable.BorderThickness\n            unitFrame.healthBar.border:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.border:UpdateSizes()        \n            \n        else\n            Plater.SetBorderColor (unitFrame)\n            Plater.UpdatePlateBorderThickness (unitFrame.PlateFrame)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend\n\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1552962607,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Focus Target Border",
["Icon"] = 133006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 48,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1666641455,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Don't Have Aura [Plater]",
["Icon"] = 136207,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 56,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Tint nameplates of Reaping Soul units (Mythic Dungeon Affix) depending on its target and role of the player",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --can detect the reaping souls aggro?\n    if (envTable.detectAggro and Plater.IsInCombat()) then\n        \n        --is this npc a reaping soul?\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            \n            --check if the mob is attacking the player\n            if (UnitIsUnit (unitFrame.targetUnitID, \"player\")) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateAggroColor)\n                \n            else\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateNoAggroColor)\n            end\n            \n        end\n        \n    end\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when the nameplate is added and the npcID matches, cache the color for the nameplate\n    if (envTable.detectAggro) then\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            local profile = Plater.db.profile\n            local role = Plater:GetPlayerRole()\n            \n            if (role == \"TANK\") then\n                envTable.NameplateAggroColor = profile.tank.colors.aggro\n                envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            else\n                envTable.NameplateAggroColor = profile.dps.colors.aggro\n                envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            end\n            \n        end\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --npcs affected by this script\n    \n    envTable.npcIDs = {\n        [148716] = true, --risen soul\n        [148893] = true, --tormented soul\n        [148894] = true, --lost soul\n        \n        [127278] = true, --skittering feeder (tests and debug, also need to disable the load conditions)\n    }\n    \n    --detect aggro, if true it will see which group member the soul is attacking and override the color\n    envTable.detectAggro = true\n    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1666641458,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "M+ Bwonsamdi Reaping",
["Icon"] = 2446016,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
["Enabled"] = true,
["117"] = true,
},
},
},
{
["Enabled"] = false,
["Revision"] = 37,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show the name of the unit current target ",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --max length of the text\n    envTable.TextMaxLength = 100\n    \n    --update the spell name text\n    function envTable.UpdateSpellNameText (unitFrame)\n        \n        local castBar = unitFrame.castBar\n        local textString = castBar.Text\n        local spellName = castBar.SpellName\n        \n        if (unitFrame.targetUnitID) then\n            local targetName = UnitName (unitFrame.targetUnitID)\n            \n            if (targetName) then\n                textString:SetText (spellName .. \" > \" .. targetName) \n                \n                if (envTable.TextMaxLength) then\n                    Plater.LimitTextSize (textString, envTable.TextMaxLength)\n                end\n                \n            else\n                textString:SetText (spellName)\n            end\n        else\n            textString:SetText (spellName)\n        end\n    end\nend",
},
["Prio"] = 99,
["Time"] = 1668850016,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Target",
["Icon"] = 413580,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 47,
["Options"] = {
},
["LastHookEdited"] = "Zone Changed",
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Only show nameplates while in combat, see the constructor for more options.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Zone Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckIfCanShowNameplate (unitFrame)\n        if (Plater.IsInCombat()) then\n            \n            if (not unitFrame.healthBar:IsShown()) then\n                Plater.ShowHealthBar (unitFrame)\n                Plater.EnableHighlight (unitFrame)\n            end\n            \n        else\n            \n            if (unitFrame.healthBar:IsShown()) then\n                Plater.HideHealthBar (unitFrame)\n                Plater.DisableHighlight (unitFrame)\n            end\n            \n        end        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668849110,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Only in Combat",
["Icon"] = 135473,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 37,
["Options"] = {
},
["LastHookEdited"] = "Nameplate Updated",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Add an exclamation icon on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local npcColor = Plater.GetNpcColor (unitFrame)\n    if (npcColor) then\n        unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n        unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)        \n        unitFrame.NpcColorCodeTexture:Show()\n        \n    else\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.IconTexture = [[Interface\\AddOns\\Plater\\media\\exclamation_64]]\n    envTable.Alpha = 0.8\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetTexture (envTable.IconTexture)\n        \n        --texture side | anchor to which frame | frame side | x offset | y offset\n        unitFrame.NpcColorCodeTexture:SetPoint (\"right\", unitFrame.healthBar, \"right\", -2, 0)\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668850173,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Npc Colors Icon",
["Icon"] = "Interface\\AddOns\\Plater\\media\\exclamation_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 71,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Add a color tag on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateColorTag (unitFrame)   \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateTexture (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Alpha = 0.75\n    \n    envTable.Anchor = {\n        side = 11, --right side inside the nameplate\n        x = -3,\n        y = 0\n    }\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetColorTexture (1, 1, 1, 1)\n        \n    end\n    \n    function  envTable.UpdateColorTag (unitFrame)\n        local npcColor = Plater.GetNpcColor (unitFrame)\n        if (npcColor) then\n            unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n            unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)           \n            unitFrame.NpcColorCodeTexture:Show()        \n        end\n    end\n    \n    function  envTable.UpdateTexture (unitFrame)\n        Plater.SetAnchor (unitFrame.NpcColorCodeTexture, envTable.Anchor)\n        unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight() - 4, unitFrame.healthBar:GetHeight() - 4)\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n        envTable.UpdateColorTag (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668850072,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Npc Colors Tag",
["Icon"] = "Interface\\AddOns\\Plater\\media\\radio_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 44,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Change the color of the aura timer by it's time left",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auras = unitFrame.BuffFrame.PlaterBuffList\n    \n    for _, auraIcon in ipairs (auras) do\n        if (auraIcon:IsVisible()) then\n            if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                \n            elseif (auraIcon.RemainingTime < envTable.Timers.warning) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.warning)\n                \n            else\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n            end \n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        warning = \"yellow\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 4.9,\n        warning = 8,\n    }\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1669863230,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Paint Aura Timers",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 126,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1670296390,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Show yellow star for elite; Silver star for rares",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.UpdateIndicator (unitFrame, unitId)\n        local unitClassification = UnitClassification (unitId)\n        local unitName = UnitName (unitId)\n        unitName = unitName or UNKNOWN\n        \n        if (unitClassification == \"rareelite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. \"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t \" .. unitName)\n            \n        elseif (unitClassification == \"rare\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. unitName)\n            \n        elseif (unitClassification == \"elite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t\" .. unitName)\n            \n        end\n    end\n    \nend\n\n\n\n\n",
},
["HooksTemp"] = {
},
["Time"] = 1551825364,
["PlaterCore"] = 1,
["Options"] = {
},
["Name"] = "Rarity in the Name",
["Icon"] = "Interface\\AddOns\\Plater\\media\\star_full_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 72,
["Options"] = {
},
["LastHookEdited"] = "Leave Combat",
["Author"] = "Cyclopes-Turalyon",
["OptionsValues"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 48,
["Time"] = 1670936778,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Aggro Indicator",
["Icon"] = 132344,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 23,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Edit the Constructor script setting the font you want in the FONT = \"\", then /reload.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --added this event just to run the constructor script\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert here the font you want to change then /reeload\n    --after the reload, check if the font has changed and disable this script\n    \n    local FONT = \"Accidental Presidency\"\n    \n    local profile = Plater.db.profile\n    local actorTables = profile.plate_config\n    \n    for plateType, plateTable in pairs (actorTables) do\n        \n        plateTable.actorname_text_font = FONT\n        plateTable.spellname_text_font = FONT\n        plateTable.spellpercent_text_font = FONT\n        plateTable.level_text_font = FONT\n        plateTable.percent_text_font = FONT\n        plateTable.big_actortitle_text_font = FONT\n        plateTable.big_actorname_text_font = FONT\n        plateTable.power_percent_text_font = FONT\n        \n    end\n    \n    profile.castbar_target_font = FONT\n    profile.aura_timer_text_font = FONT    \n    profile.aura_stack_font = FONT    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1698423968,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Change All Fonts",
["Icon"] = 134331,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 51,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show the power bar for specific units",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\") then\n        \n        local arenaEnemies = GetNumArenaOpponentSpecs()\n        local found = false\n        for i = 1, arenaEnemies do\n            local guid = UnitGUID (\"arena\" .. i)\n            print (guid)\n            if (guid == unitFrame.namePlateUnitGUID) then\n                \n                local spec = GetArenaOpponentSpec (i)\n                print (spec)\n                if (spec) then\n                    local id, name, description, icon, role, class = GetSpecializationInfoByID (spec)\n                    print (name)\n                    if (role == \"HEALER\") then\n                        envTable.UpdatePowerBar (unitFrame)\n                    end\n                    print (role)\n                end\n                \n                break\n            end\n        end\n        \n        return\n    end\n    \n    --show for enemy players\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        envTable.UpdatePowerBar (unitFrame)\n        return\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.PowerBarAnchor = {side = 4, x = 0, y = -10}\n    \n    function envTable.UpdatePowerBar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        Plater.SetAnchor (unitFrame.powerBar, envTable.PowerBarAnchor)\n        \n    end\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668234253,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Power Bar",
["Icon"] = 1375677,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 1\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = true\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", -1, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 1, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\nend",
},
["Time"] = 1671212838,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/SR0FJSEDZ/1",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["Enabled"] = true,
["Revision"] = 118,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Cast Icon Anchor",
},
{
["Enabled"] = true,
["Revision"] = 77,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar spell icon.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, 0)\n            icon:SetPoint (\"bottomright\", castBar, \"bottomleft\", -1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, 0)\n            icon:SetPoint (\"bottomleft\", castBar, \"bottomright\", 1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1671212919,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Icon Border",
["Icon"] = 133004,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 87,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1669862651,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Bar Border",
["Icon"] = 133004,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 43,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Debuff timer show decimal values",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then\n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then            \n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end        \n    end    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --minimum time left to take effect\n    envTable.MinTime = 9.999\n    \nend",
},
["Prio"] = 99,
["Time"] = 1666641438,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Decimal Debuff Timer",
["Icon"] = 609811,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 84,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1699304679,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Buff Special Mod",
["Icon"] = 136139,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 34,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Adds two arrows into the target indicators options.",
["Hooks"] = {
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --after editing this script, save it and /reload\n    \n    --adds two target indicators in arrow format\n    --to change the texture you may replace the path with another texture path\n    --or you can copy and paste more options here\n    \n    Plater.TargetIndicators    [\"SmallArrow\"] = {\n        path = [[Interface\\MONEYFRAME\\Arrow-Right-Up]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 12,\n        height = 12,\n        x = 8,\n        y = 0,\n        blend = \"ADD\",\n    }\n    \n    Plater.TargetIndicators    [\"BigArrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 18,\n        height = 16,\n        x = 24,\n        y = 0,\n        blend = \"ADD\",\n        color = \"yellow\",\n    }\n    \n    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1670250958,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Arrow Target Indicators",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_right_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 13,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668849988,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Unit Name Over Target Shading",
["Icon"] = 237377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 24,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Set the spark height to the same size of the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1668849945,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Adjust Spark Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\spark6",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 74,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show power bar for some units.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShowPowerBarForUnit (unitFrame)    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --power bar options:\n    \n    --for which units it should\n    envTable.ShowForEnemyPlayers = true\n    envTable.ShowForEnemyNpcs = false\n    \n    --specific npcs, can be the npc name or npcId\n    --this list work even if the ShowForEnemyNpcs is false\n    envTable.SpecificNpcs = {\n        [\"the rock\"] = true, --npc name\n        [225] = true, --npcId\n    }\n    \n    --anchor the power bar to\n    envTable.Anchor = {\n        side = 13, --inside the healthbar, bottom side\n        x = 0, \n        y = 0,\n    }\n    \n    --power bar height\n    envTable.Height = 1\n    \n    --power bar percent text\n    envTable.PercentTextEnabled = false\n    envTable.PercentTextAnchor = {\n        side = 7, --top right\n        x = 2, \n        y = 0,\n    }\n    \n    \n    --private\n    function envTable.ShowPowerbar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        envTable.UpdatePowerbar (unitFrame)\n    end\n    \n    function envTable.UpdatePowerbar (unitFrame)\n        local powerBar = unitFrame.powerBar\n        Plater.SetAnchor (powerBar, envTable.Anchor, unitFrame.healthBar)\n        powerBar:SetSize (unitFrame.healthBar:GetWidth(), envTable.Height)\n        \n        envTable.SavePowerBarSize (unitFrame, envTable.Height)\n        \n        if (envTable.PercentTextEnabled) then\n            powerBar.percentText:Show()\n            --copy the font from the health percent\n            Plater:SetFontFace (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_font)\n            Plater:SetFontSize (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_size)\n            Plater.SetAnchor (powerBar.percentText, envTable.PercentTextAnchor)\n        else\n            powerBar.percentText:Hide()\n        end\n    end\n    \n    function envTable.CanShowPowerBarForUnit (unitFrame)\n        --check if the is in the special list to force show\n        local forceShowPowerBar = envTable.SpecificNpcs [unitFrame.namePlateNpcId] or envTable.SpecificNpcs [unitFrame.namePlateUnitName] or envTable.SpecificNpcs [unitFrame.namePlateUnitNameLower]\n        if (forceShowPowerBar) then\n            envTable.ShowPowerbar (unitFrame)\n            \n            --check if the unit is a enemy player\n        elseif (unitFrame.ActorType == \"enemyplayer\") then\n            if (envTable.ShowForEnemyPlayers) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n            \n            --check if the unit is a enemy npc\n        elseif (unitFrame.ActorType == \"enemynpc\") then\n            if (envTable.ShowForEnemyNpcs) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n        end\n    end\n    \n    function envTable.SavePowerBarSize (unitFrame, height)\n        local plateConfigs = Plater.db.profile.plate_config [unitFrame.ActorType]\n        plateConfigs.mana[1] = plateConfigs.health[1]\n        plateConfigs.mana[2] = height\n        plateConfigs.mana_incombat[1] = plateConfigs.health_incombat[1]\n        plateConfigs.mana_incombat[2] = height\n    end\nend\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1671134405,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Power Bar",
["Icon"] = "Interface/Addons/Plater/Media/fire_64",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
["iconSizeOffset"] = 0.6781325340271,
["useFullSize"] = true,
["showIcon"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1669863506,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 360,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Key"] = "iconSizeOffset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Key"] = "iconPadding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Padding",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Key"] = "textureWidth",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Key"] = "textureHeightMod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Height Mod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Key"] = "texturePosition",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["LastHookEdited"] = "Cast Start",
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["OptionsValues"] = {
["HToocxoff"] = -100,
["HTooc"] = false,
},
["HooksTemp"] = {
},
["UID"] = "0x6338ee19144f77",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if unitFrame.IsSelf or not unitFrame.ActorType or not unitFrame.healthBar:IsShown() then return end\n    \n    if modTable.config.ScaleMinor then\n        modTable.ScaleMinor(unitFrame)\n    end\n    \n    if modTable.config.HTooc then\n        modTable.firstOOChp(unitFrame)\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if unitFrame.IsSelf or not unitFrame.ActorType or not unitFrame.healthBar:IsShown() then return end\n    \n    if modTable.config.ScaleMinor then\n        modTable.ScaleMinor(unitFrame)\n    end\n    \n    if modTable.config.HTooc then\n        modTable.firstOOChp(unitFrame) \n    end\nend",
["Name Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if unitFrame.IsSelf or not unitFrame.ActorType or not unitFrame.healthBar:IsShown() then return end\n    \n    if modTable.config.ScaleMinor then\n        modTable.ScaleMinor(unitFrame)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if unitFrame.IsSelf or not unitFrame.ActorType or not unitFrame.healthBar:IsShown() then return end\n    \n    if modTable.config.HTooc then\n        modTable.OOChp(unitFrame, envTable) \n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.Anchor = {\n        side = modTable.config.HToocanchor, \n        x = modTable.config.HToocxoff, \n        y = modTable.config.HToocyoff,\n    }\n    \n    modTable.Scale = function(unitFrame)\n        local scale = 1\n        \n        if modTable.config.ScaleMinor then\n            if Plater.GetUnitType (unitFrame) == \"minus\" then\n                scale = Plater.db.profile.minor_height_scale\n            elseif Plater.GetUnitType (unitFrame) == \"pet\" then\n                scale = Plater.db.profile.pet_height_scale\n            end   \n        end\n        \n        return scale\n    end\n    \n    modTable.ScaleMinor = function(unitFrame)\n        Plater:SetFontSize (unitFrame.healthBar.unitName, math.floor(Plater.GetConfig (unitFrame).actorname_text_size * modTable.Scale(unitFrame)))\n        return true\n    end    \n    \n    modTable.firstOOChp = function(unitFrame)\n        local C = Plater.GetConfig (unitFrame)\n        local scale = modTable.config.ScaleMinor and modTable.Scale (unitFrame) or 1\n        local lifePercent = unitFrame.healthBar.lifePercent\n        \n        if unitFrame.InCombat or (not unitFrame.InCombat and unitFrame.enlargedByScript) then\n            Plater:SetFontSize (lifePercent,math.floor(C.percent_text_size * scale))\n            lifePercent:ClearAllPoints()\n            Plater.SetAnchor (lifePercent, C.percent_text_anchor)\n            unitFrame.oocTextHooked = false\n            return true\n        else\n            Plater:SetFontSize (lifePercent, math.floor(modTable.config.HToocsize * scale))\n            lifePercent:ClearAllPoints()\n            Plater.SetAnchor (lifePercent, modTable.Anchor)\n            unitFrame.oocTextHooked = true\n            return true\n        end            \n    end\n    \n    modTable.OOChp = function(unitFrame)\n        local C = Plater.GetConfig (unitFrame)\n        local scale = modTable.config.ScaleMinor and modTable.Scale (unitFrame) or 1\n        local lifePercent = unitFrame.healthBar.lifePercent\n        \n        if unitFrame.InCombat or (not unitFrame.InCombat and unitFrame.enlargedByScript) then\n            if unitFrame.oocTextHooked then\n                Plater:SetFontSize (lifePercent,math.floor(C.percent_text_size * scale))\n                lifePercent:ClearAllPoints()\n                Plater.SetAnchor (lifePercent, C.percent_text_anchor)\n                unitFrame.oocTextHooked = false\n                return true\n            end\n        else\n            if not unitFrame.oocTextHooked then\n                Plater:SetFontSize (lifePercent, math.floor(modTable.config.HToocsize * scale))\n                lifePercent:ClearAllPoints()\n                Plater.SetAnchor (lifePercent, modTable.Anchor)\n                unitFrame.oocTextHooked = true\n                return true\n            end\n        end\n    end\nend",
["Zone Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if unitFrame.IsSelf or not unitFrame.ActorType or not unitFrame.healthBar:IsShown() then return end\n    \n    if modTable.config.ScaleMinor then\n        modTable.ScaleMinor(unitFrame)\n    end\n    \n    if modTable.config.HTooc then\n        modTable.firstOOChp(unitFrame)\n    end\nend",
},
["Time"] = 1668851167,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 878234,
["Enabled"] = false,
["Revision"] = 2502,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the total health and percent in the health amount text. See the constructor code to change options.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "OOC Health Text Options",
["Options"] = {
{
["Type"] = 4,
["Key"] = "ScaleMinor",
["Value"] = true,
["Name"] = "Scale Minor/Pet Plates",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Scale Health or Name texts of Minor / Pet units(Follows Minor/Pet's Height Scale at details tab)",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "HTooc",
["Value"] = true,
["Name"] = "OOC Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Modify health text anchor when out of combat",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set OOC health text size",
["Min"] = 1,
["Key"] = "HToocsize",
["Value"] = 13,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 2,
["Max"] = 9,
["Desc"] = "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)) / 9(CENTER)",
["Min"] = 1,
["Key"] = "HToocanchor",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Anchor",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set OOC X-Offset",
["Min"] = -100,
["Key"] = "HToocxoff",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "X-Offset",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set OOC Y-Offset",
["Min"] = -100,
["Key"] = "HToocyoff",
["Value"] = -1.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Y-Offset",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateName(unitFrame, false)\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateName(unitFrame, true) \n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateName(unitFrame, true) \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    function envTable.UpdateName(unitFrame, casting)\n        if not unitFrame or not unitFrame.castBar or unitFrame.IsSelf then\n            return\n        end\n        \n        local castBar = unitFrame.castBar\n        \n        if casting then\n            if modTable.config.DChidehealth then\n                unitFrame.healthBar.lifePercent:Hide()\n            end\n            if not unitFrame.IsSelf and modTable.config.DChidename then\n                unitFrame.unitName:Hide()\n            end\n            if unitFrame.IsSelf and modTable.config.DChidepower then\n                unitFrame.powerBar.percentText:Hide()\n            end\n            \n        else\n            local plateConfigs = Plater.GetConfig (unitFrame)\n            unitFrame.unitName:Show()\n            if (plateConfigs.percent_text_enabled) then\n                unitFrame.healthBar.lifePercent:Show()\n            end\n            if unitFrame.IsSelf and (plateConfigs.power_percent_text_enabled) then\n                unitFrame.powerBar.percentText:Show()\n            end\n        end\n        \n    end\n    \n    if not unitFrame.castBar.hideNameModHooked then\n        hooksecurefunc(unitFrame.castBar, \"Hide\", function() envTable.UpdateName(unitFrame, false) end)\n        unitFrame.castBar.hideNameModHooked = true\n    end\n    \nend",
},
["Time"] = 1666644013,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 413591,
["Enabled"] = false,
["Revision"] = 472,
["semver"] = "",
["Author"] = "Ariani-Antonidas",
["Desc"] = "Hides the name text and/or health text if the unit is casting.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "DChidename",
["Value"] = true,
["Name"] = "Hide Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide unit name during casting",
},
{
["Type"] = 4,
["Key"] = "DChidehealth",
["Value"] = false,
["Name"] = "Hide Health Text",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide health text during casting(except player frame)",
},
{
["Type"] = 4,
["Key"] = "DChidepower",
["Value"] = false,
["Name"] = "Hide Power Text",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide power text during casting(only player frame)",
},
},
["LastHookEdited"] = "Constructor",
["Name"] = "Hide Name during Casts",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame)\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder:Hide()\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border options\n    local borderSize = 3\n    local borderColor = \"white\"\n    \n    if (not unitFrame.healthBar.TargetBorder) then\n        unitFrame.healthBar.TargetBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n    end\n    \n    function envTable.UpdateBorder (unitFrame)\n        if (UnitIsUnit (\"target\", unitFrame.unit)) then               \n            local r, g, b, a = DetailsFramework:ParseColors (borderColor)\n            unitFrame.healthBar.TargetBorder:SetVertexColor (r, g, b, a)\n            \n            unitFrame.healthBar.TargetBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.TargetBorder:UpdateSizes()            \n            \n            unitFrame.healthBar.TargetBorder:Show()\n        else\n            unitFrame.healthBar.TargetBorder:Hide()\n        end\n    end\nend",
},
["Time"] = 1700503379,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\CHATFRAME\\UI-ChatInputBorder",
["Enabled"] = true,
["Revision"] = 66,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a border around the current target.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Target Border",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    local mark = unitId and GetRaidTargetIndex(unitId)\n    envTable.namer(unitId, mark, true, false, false, \"Created\")\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    -- Catch all \n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Updated\")\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Added\")\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFFFFFFF\", -- Yellow 5 Point Star\n        [2] = \"FFFFFFFF\", -- Orange Circle\n        [3] = \"FFFFFFFF\", -- Purple Diamond\n        [4] = \"FFFFFFFF\", -- Green Triangle\n        [5] = \"FFFFFFFF\", -- Light Blue Moon\n        [6] = \"FFFFFFFF\", -- Blue Square\n        [7] = \"FFFFFFFF\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    -- Old way was some degen fucking shit this is easier\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,  \n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true, \n        [\"Terror\"] = true, \n        [\"Totem\"] = true, \n        [\"Waycrest\"] = true,\n        --[\"Dummy\"] = true, -- Testing Purposes\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- Override for names, Thanks to Nnoggie for all of the dungeon ones\n    local renameTable = {\n        -- Testing\n        [\"Fleshripper Vulture\"] = \"Shit Bird\",\n        [\"Roaming Nibbler\"] = \"Roaming Saurid\",\n        [\"Training Dummy\"] = \"Dum Dum\", \n        --[\"\"] = \"\", --Template\n        \n        --Shadowlands\n        \n        --Open World\n        [\"Fallen Knowledge-Seeker\"] = \"Seeker\",\n        \n        \n        --Castle Nathria\n        [\"Stoneborn Maitre D'\"] = \"Maitre D'\",\n        [\"Rat of Unusual Size\"] = \"Big Rat\",\n        \n        --Sanctum of Domination\n        [\"Sylvanas Windrunner\"] = \"Sylvanas\",\n        \n        --Sepulcher of the First Ones\n        [\"Vigilant Guardian\"] = \"Trash Can\",\n        [\"Dausegne\"] = \"Da Sausage\",\n        [\"Anduin Wrynn\"] = \"Anduin\",\n        [\"The Jailer\"] = \"Jailer\",\n        [\"Unmade Steward\"] = \"Simp\",\n        [\"Lihuvim\"] = \"Lithium\",\n        [\"Prototype of War\"] = \"War\",\n        [\"Prototype of Duty\"] = \"Duty\",\n        [\"Prototype of Renewal\"] = \"Renewal\",\n        [\"Prototype of Absolution\"] = \"Absolution\",\n        \n        \n        --Dungeons\n        \n        \n        --De other Side\n        [\"Millhouse Manastorm\"] = \"Millhouse\",\n        [\"Millificent Manastorm\"] = \"Millificent\",\n        \n        --Mists of Tirna Scithe\n        [\"Droman Oulfarran\"] = \"Simp Tree\",\n        [\"Mistcaller\"] = \"Mute Me\",\n        \n        --Necrotic Wake\n        [\"Stitching Assistant\"] = \"Stitcher\",\n        [\"Separation Assistant\"] = \"Separator\",\n        [\"Blightbone\"] = \"Blightboner\",\n        \n        --Theater of pain\n        [\"Mordretha, the Endless Empress\"] = \"Mordretha\",   \n        \n        --Plaguefall\n        [\"Congealed Slime\"] = \"Purple Slime\",\n        [\"Pestilence Slime\"] = \"Haste Slime\",\n        [\"Gushing Slime\"] = \"Green Slime\",\n        [\"Rotmarrow Slime\"] = \"Bad Slime\",\n        [\"Doctor Ickus\"] = \"Dickus\",\n        [\"Plagueroc\"] = \"Plaguecock\",\n        \n        --Tazavesh: Streets of Wonder\n        [\"Commerce Enforcer\"] = \"Assclapper\",\n        [\"So'azmi\"] = \"Sa'lami\",\n        [\"P.O.S.T. Master\"] = \"S.U.C.C. Master\",\n        [\"Portalmancer Zo'dahh\"] = \"Not The Boss\",\n        \n        --Tazavesh: So'leah's Gambit\n        [\"Murkbrine Scalebinder\"] = \"Fish Dicker\",\n        [\"Invigorating Fish Stick\"] = \"Fish Dick\",\n        [\"Hylbrande\"] = \"Hill Brad\",\n        [\"Burly Deckhand\"] = \"Dickhand\",\n        [\"Stormforged Guardian\"] = \"Don't pull me\",\n        \n        --Return To Karazhan\n        [\"Spectral Apprentice\"] = \"Apprentice\",\n        [\"Shrieking Terror\"] = \"Terror\",\n        [\"\"] = \"\",\n        [\"\"] = \"\",\n        \n        \n        --Operation: Mechagon\n        [\"Saurolisk Bonenipper\"] = \"Bonenipple\",\n        [\"Rocket Tonk\"] = \"Rocket\",\n        [\"Strider Tonk\"] = \"Strider\",\n        [\"Bomb Tonk\"] = \"Bomb\",\n        [\"Defense Bot Mk I\"] = \"MK-I\",\n        [\"Defense Bot Mk III\"] = \"MK-III\",\n        [\"Mechagon Tinkerer\"] = \"Twinkerer\",\n        --Grimrail Depot\n        \n        --M+ Shrouded Affix\n        [\"Zul'gamux\"] = \"Zul'gondeez\",\n        \n        --M+ Encrypted Affix\n        [\"Urh Relic\"] = \"CDR Relic\",\n        [\"Wo Relic\"] = \"Speed Relic\",\n        [\"Vy Relic\"] = \"Haste Relic\",\n        [\"Urh Dismantler\"] = \"CDR Boi\",\n        [\"Wo Drifter\"] = \"Speed Boi\",\n        [\"Vy Interceptor\"] = \"Haste Boi\",\n        \n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs, Do i want this?? no idea\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    function envTable.namer(unitId, marker, nameColouring, isBoss, debugMode, debugEntry)\n        if unitId then\n            \n            local name = UnitName(unitId)\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            local unitName\n            -- Testing mode\n            if debugMode then\n                print(\"DebugMode: \"..debugEntry..\" - Checking for dummy name\")\n                if b == \"Dummy\" or c == \"Dummy\" or d == \"Dummy\" or e == \"Dummy\" or f == \"Dummy\" then\n                    local lastName = b:find(\"Dummy\") and b or c:find(\"Dummy\") and c or d:find(\"Dummy\") and d\n                    print(\"DebugMode: \"..debugEntry..\" - Dummy Found!\")\n                    unitName = name ~=nil and lastName\n                end\n            end\n            \n            \n            if nameBlacklist[b] then\n                unitName = name ~=nil and (a or b or c or d or e or f) or nil\n            else\n                unitName = name ~=nil and (f or e or d or c or b or a) or ni\n            end\n            \n            \n            \n            \n            \n            if unitName == nil then\n                unitName = name\n            end\n            \n            \n            if renameTable[name] then\n                unitName = renameTable[name]\n            end\n            \n            if unitId and marker and nameColouring then\n                unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(unitName, markerToHex[marker]))\n            elseif unitId then\n                unitFrame.healthBar.unitName:SetText(unitName)\n            end\n            \n        end   \n    end\nend",
},
["Time"] = 1666645478,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "INTERFACE\\ICONS\\Ability_Monk_Ascension",
["Enabled"] = false,
["Revision"] = 669,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Name"] = "M+ Renamer",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        -- CUSTOM HERE --\n        if healthBar.currentAbsorb and healthBar.currentAbsorb > 0 then\n            if (showHealthAmount or showPercentAmount) then\n                healthBar.lifePercent:SetText(healthBar.lifePercent:GetText() .. \"  -  \" .. Plater.FormatNumber(healthBar.currentAbsorb))\n            elseif showAlways then\n                healthBar.lifePercent:SetText(Plater.FormatNumber(healthBar.currentAbsorb))\n            end\n        end\n        -- CUSTOM END --\n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1680257496,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/VtPjNl8Mg/7",
["Icon"] = 135940,
["Enabled"] = true,
["Revision"] = 1180,
["semver"] = "1.0.6",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "Adds absorbs to the health bar as full health value.",
["Prio"] = 99,
["version"] = 7,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options For @scriptname",
["Name"] = "Options Intro",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = "",
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Absorb Shields in Healthbar",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    local Details = Details\n    unitFrame.HealerTexture:Hide()\n    \n    if (Details and Details.realversion >= 134) then\n        local spec = Details:GetSpecByGUID (unitFrame.namePlateUnitGUID)\n        if (spec and envTable.HealerSpecs [spec]) then\n            \n            --custom icon indicator\n            if (envTable.ShowCustomIndicator) then\n                unitFrame.HealerTexture:Show()                \n                if (envTable.UseClassColor) then\n                    unitFrame.HealerTexture.vertexcolor = select (2, UnitClass (unitId))\n                else\n                    unitFrame.HealerTexture.vertexcolor = envTable.Color\n                end\n            end\n            \n            --regular indicator from plater\n            if (envTable.ShowRegularIndicator) then\n                Plater.ShowIndicator (unitFrame, envTable.Texture, envTable.Width, envTable.Height) \n            end\n            \n        end\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --options\n    --custom indicator is a custom icon added by this script\n    envTable.ShowCustomIndicator = true\n    --regular indicator is the indicator row within Plater default indicators\n    envTable.ShowRegularIndicator = false\n    \n    --custom indicator options\n    envTable.Texture = [[Interface\\AddOns\\Plater\\media\\cross_64]]\n    envTable.Width = 8\n    envTable.Height = 8\n    \n    envTable.Anchor = {\n        side = 7, --topright\n        x = envTable.Width / 2, --x offset\n        y = -envTable.Width / 2, --y offset\n    }\n    \n    envTable.UseClassColor = false\n    envTable.Color = \"white\" --only use this color when use class color is false\n    \n    --private\n    envTable.HealerSpecs = {\n        [105] = true, -->  druid resto\n        [270] = true, --> monk mw\n        [65] = true, --> paladin holy\n        [256] = true,  --> priest disc\n        [257] = true,  --> priest holy\n        [264] = true, --> shaman resto\n    }\n    \n    unitFrame.HealerTexture = unitFrame.HealerTexture or Plater:CreateImage (unitFrame.healthBar.FrameOverlay, texture, envTable.Width, envTable.Height, \"overlay\")\n    \n    unitFrame.HealerTexture.width = envTable.Width\n    unitFrame.HealerTexture.height = envTable.Height\n    unitFrame.HealerTexture.texture = envTable.Texture\n    Plater.SetAnchor (unitFrame.HealerTexture, envTable.Anchor)\n    \nend",
},
["Time"] = 1669863231,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/aIlB_UgaU/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\cross_64",
["Enabled"] = true,
["Revision"] = 104,
["semver"] = "1.0.0",
["Author"] = "Izimode-Azralon",
["Desc"] = "Add a cross icon into the nameplate of healers. Must have Details! Damage Meter installed.",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Healer Indicator",
},
{
["OptionsValues"] = {
["outerGlow"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    -- settings:\n    \n    -- for the LibCustomGlow implementation:\n    modTable.options = {\n        glowType = \"pixel\",\n        color = modTable.config.glowColor,--\"red\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1. Defaul value is {0.95, 0.95, 0.32, 1}\n        N = modTable.config.antsAmount, --8, -- number of lines. Defaul value is 8;\n        frequency = modTable.config.frequency, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = modTable.config.antsLength, -- length of lines. Default value depends on region size and number of lines;\n        th = modTable.config.antsThickness, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = modTable.config.antsBorder, -- set to true to create border under lines;\n        key = \"StealPurgeAuraGlow\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    \n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                Plater.StartGlow(auraIcon, nil, modTable.options)\n                if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                    auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                    local offset = modTable.config.antsThickness\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                end\n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    Plater.StartGlow(auraIcon, nil, modTable.options)\n                    if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                        auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                        local offset = modTable.config.antsThickness\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                    end\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
},
["Time"] = 1669863230,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/turHC0a5k/7",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = false,
["Revision"] = 286,
["semver"] = "1.0.6",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["version"] = 7,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "@scriptname Options:",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
1,
0,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the glow ants.",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Amount of ants in the glow effect.",
["Min"] = 1,
["Key"] = "antsAmount",
["Value"] = 6,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants Amount",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Ants move speed",
["Min"] = -1,
["Key"] = "frequency",
["Value"] = 0.25,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Speed",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "",
["Min"] = 1,
["Key"] = "antsLength",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants length",
},
{
["Type"] = 2,
["Max"] = 4,
["Desc"] = "",
["Min"] = 1,
["Key"] = "antsThickness",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants Thickness",
},
{
["Type"] = 4,
["Key"] = "antsBorder",
["Value"] = false,
["Name"] = "Ants Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outerGlow",
["Value"] = false,
["Name"] = "Outer Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Steal/Purge Aura Glow",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateIsTarget) then\n        envTable.ShowNameplate (unitFrame)\n    else\n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (not unitFrame.InCombat) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    else\n        if InCombatLockdown() then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (not unitFrame.InCombat) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    else\n        if InCombatLockdown() then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (not unitFrame.InCombat) then\n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    else\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (not unitFrame.InCombat) then\n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n        else\n            envTable.HideNameplate (unitFrame)\n        end\n    else\n        envTable.ShowNameplate (unitFrame)\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        if not (unitFrame.ActorType == \"friendlynpc\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.IsSelf) then\n            Plater.HideHealthBar (unitFrame, true, true)\n            Plater.DisableHighlight (unitFrame)\n        end\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        if not (unitFrame.ActorType == \"friendlynpc\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.IsSelf) and (unitFrame.PlateFrame.IsNpcWithoutHealthBar or unitFrame.PlateFrame.IsFriendlyPlayerWithoutHealthBar) then\n            unitFrame.PlateFrame.IsNpcWithoutHealthBar = false\n            Plater.ShowHealthBar (unitFrame)\n            if not unitFrame.HighlightFrame:GetScript(\"OnUpdate\") then\n                Plater.EnableHighlight (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n",
},
["Time"] = 1666647710,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/15x8JBshQ/9",
["Icon"] = 1990989,
["Enabled"] = false,
["Revision"] = 254,
["semver"] = "1.0.8",
["Author"] = "Izimode-Azralon",
["Desc"] = "Hide units health bar and show name text instead if the unit is out of combat.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Hide Units Healthbar OOC",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Health Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.config.show_health and unitFrame.healthBar:IsVisible()\n    then  \n        local function percentFn(bar)\n            return bar.CurrentHealth /  bar.CurrentHealthMax\n        end\n        \n        envTable.UpdateSpark(unitFrame.healthBar, percentFn)    \n    end\n    \nend\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    if modTable.config.show_power and unitFrame.powerBar:IsVisible() then\n        \n        local function percentFn(bar)\n            return bar.currentPower /  bar.currentPowerMax\n        end\n        \n        envTable.UpdateSpark(unitFrame.powerBar, percentFn)\n    end\n    \nend\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    function envTable.CreateSpark(bar)\n        if bar.spark then\n            return \n        end\n        \n        local texture = bar:GetStatusBarTexture()\n        local spark = bar:CreateTexture(nil, 'ARTWORK',nil,4)\n        \n        \n        local texturePath = modTable.config.texture\n        texturePath = texturePath:gsub(\"//\", \"/\")\n        texturePath = texturePath:gsub(\"\\\\\", \"/\")\n        \n        spark:SetTexture(texturePath)\n        \n        local r, g, b, a = DetailsFramework:ParseColors (modTable.config.color)\n        spark:SetVertexColor(r, g, b, a)\n        \n        -- ViragDevTool_AddData(bar, 'bar')\n        \n        local w = modTable.config.width\n        local _, h = bar:GetSize()\n        \n        spark:SetSize (w, h)\n        \n        spark:SetBlendMode (\"ADD\")\n        spark:SetPoint (\"LEFT\", texture, \"RIGHT\", -w/2, 0)\n        \n        bar.spark = spark\n        if modTable.config.useBarColor then \n            envTable.UpdateColor(bar)    \n        end\n        spark:Hide()\n    end    \n    \n    function envTable.UpdateSpark(bar, currentPercentFn)\n        if not bar or not bar.spark then\n            return\n        end\n        \n        local percent = currentPercentFn(bar)\n        local upperLimit = modTable.config.upperThreshold / 100\n        local lowerLimit = modTable.config.lowerThreshold / 100\n        if percent > lowerLimit and percent < upperLimit then\n            bar.spark:Show()\n            if modTable.config.useBarColor then \n                envTable.UpdateColor(bar)    \n            end\n        else\n            bar.spark:Hide()\n        end\n    end\n    \n    function envTable.UpdateColor(bar)\n        if not bar or not bar.spark then\n            return\n        end\n        \n        local r, g, b = bar:GetColor()\n        bar.spark:SetVertexColor(r, b, g, modTable.config.alpha)\n    end\n    \n    -- create the sparks\n    if modTable.config.show_health and unitFrame.healthBar then\n        envTable.CreateSpark(unitFrame.healthBar)\n    end\n    \n    if modTable.config.show_power and unitFrame.powerBar then\n        envTable.CreateSpark(unitFrame.powerBar)\n    end\n    \n    -- ViragDevTool_AddData(unitFrame.healthBar, \"healthbar\")\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1669863231,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/Rdp_NkMp9/8",
["Icon"] = 571554,
["Enabled"] = true,
["Revision"] = 660,
["semver"] = "1.0.7",
["Author"] = "Lucyón-Bloodfeather",
["Desc"] = "Adds a spark to the end of the healthbar",
["Prio"] = 99,
["version"] = 8,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "foo",
["Value"] = "Spark options",
["Name"] = "Spark options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 3,
["Key"] = "texture",
["Value"] = "Interface\\CastingBar\\UI-CastingBar-Spark",
["Name"] = "Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Path to the spark texture",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
1,
1,
1,
0.5,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the spark",
},
{
["Type"] = 4,
["Key"] = "useBarColor",
["Value"] = false,
["Name"] = "Use bar color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If this is checked, it will ignore the spark color option and use the healthbar/powerbar color for the spark as well.",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "The alpha to use when Use Bar Color is active",
["Min"] = 0,
["Key"] = "alpha",
["Value"] = 50,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 40,
["Desc"] = "Width of the spark texture",
["Min"] = 0,
["Key"] = "width",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Below this percentage the spark will be shown",
["Min"] = 0,
["Key"] = "upperThreshold",
["Value"] = 99,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Upper threshold",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Above this percent the spark will be shown",
["Min"] = 0,
["Key"] = "lowerThreshold",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Lower threshold",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_health",
["Value"] = true,
["Name"] = "Show on health bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a spark on healthbars",
},
{
["Type"] = 4,
["Key"] = "show_power",
["Value"] = true,
["Name"] = "Show on power bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a spark on power bars",
},
},
["LastHookEdited"] = "",
["Name"] = "Healthbar Spark",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckForQuest (unitFrame)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.ExtraQuestMarker22154:Hide()\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckForQuest (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.ExtraQuestMarker22154) then\n        \n        unitFrame.ExtraQuestMarker22154:Hide()\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.Texture = [[Interface\\OPTIONSFRAME\\UI-OptionsFrame-NewFeatureIcon]]\n    envTable.Size = 12\n    envTable.Anchor = {\n        side = 6, --right side\n        x = 2,\n        y = 0\n    }\n    \n    if (not unitFrame.ExtraQuestMarker22154) then\n        unitFrame.ExtraQuestMarker22154 = unitFrame:CreateTexture (nil, \"overlay\")\n        local texture = unitFrame.ExtraQuestMarker22154\n        \n        texture:SetTexture (envTable.Texture)\n        texture:SetSize (envTable.Size, envTable.Size)\n        Plater.SetAnchor (texture, envTable.Anchor)\n    end\n    \n    function envTable.CheckForQuest (unitFrame)\n        if (unitFrame.namePlateIsQuestObjective) then\n            unitFrame.ExtraQuestMarker22154:Show()\n            \n        else\n            unitFrame.ExtraQuestMarker22154:Hide()\n            \n        end\n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1670226826,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/platerquesticon/2",
["Icon"] = "Interface\\OPTIONSFRAME\\UI-OptionsFrame-NewFeatureIcon",
["Enabled"] = true,
["Revision"] = 40,
["semver"] = "1.0.1",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show an extra icon if the unit is a part of a quest you're current doing. You may adjust where the exclamation mark is shown in the Constructor.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Name"] = "Extra Quest Icon",
},
{
["OptionsValues"] = {
["scale"] = true,
["lowScale"] = 0.5,
["midScale"] = 0.75,
},
["HooksTemp"] = {
},
["UID"] = "0x6366dbeb1fda6285",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    \n    -- 1 = mid prio, 2 = low prio\n    \n    modTable[\"npcIDs\"] = {\n        \n        -- Dragonflight M+ Season 3\n        \n        -- Dawn Of The Infinite - Murozond\n        [\"205151\"] = 1, --Tyr's Vanguard\n        [\"205366\"] = 1, -- Time-Lost Wakethrasher\n        [\"205727\"] = 1, -- Timelost Rocketeer\n        [\"206074\"] = 1, -- Pendule\n        [\"204030\"] = 1, --Goblin Sapper\n        [\"205265\"] = 1, --Time Displaced Trooper\n        [\"135052\"] = 1, --Blight Toad\n        \n        -- Throne Of The Tides\n        [\"39960\"] = 1, --Murloc Drudge\n        [\"213607\"] = 1, -- Deep Sea Murloc\n        [\"213219\"] = 1, -- Congealed Ooze\n        [\"212778\"] = 1, -- Minion of Ghur'sha\n        [\"40935\"] = 1, -- Gilgoblin Hunter\n        [\"40923\"] = 1, --Unstable Corruption\n        \n        -- Dawn Of The Infinite - Galakron\n        [\"135052\"] = 1, --Blight Toad\n        [\"206068\"] = 1, -- Temporal Fusion\n        [\"206063\"] = 1, -- Temporal Deviation\n        [\"204536\"] = 1, -- Blight Chunk\n        [\"131847\"] = 1, -- Waycrest Reveler\n        [\"136541\"] = 1, --Bile Oozeling\n        [\"131669\"] = 1, --Jagged Hound\n        [\"135052\"] = 1, --Blight Toad\n        \n        -- Waycrest Manor\n        [\"135234\"] = 1, -- Diseased Mastiff\n        [\"134041\"] = 1, -- Infected Peasant\n        [\"135048\"] = 1, -- Gorestained Piglet\n        [\"131847\"] = 1, -- Waycrest Reveler\n        [\"136541\"] = 1, --Bile Oozeling\n        [\"131669\"] = 1, --Jagged Hound\n        [\"135052\"] = 1, --Blight Toad\n        \n        -- Atal'Dazar\n        [\"128435\"] = 1, -- Toxic Saurid\n        [\"127879\"] = 1, -- Shieldbearer of Zul\n        [\"129517\"] = 1, -- Reanimated Raptor\n        \n        -- Black Rook Hold\n        [\"98366\"] = 1, -- Ghostly Retainer\n        [\"98368\"] = 1, -- Ghostly Protector\n        [\"98362\"] = 1, -- Troubled Soul\n        [\"98677\"] = 1, -- Rook Spiderling\n        [\"101839\"] = 1, --Risen Companion\n        [\"98900\"] = 1, --Wyrmtounge Trickster\n        [\"102781\"] = 2, --Fel Bat Pup\n        \n        -- Darkheart Thicket\n        [\"95772\"] = 1, -- Frenzied Nightclaw\n        [\"109908\"] = 1, -- Nightmare Abomination\n        [\"102962\"] = 1, -- Nightmare Abomination | 1st Boss\n        [\"99360\"] = 1, -- Vilethorn Blossom\n        [\"107288\"] = 1, --Vilesthorn Sapling\n        [\"102277\"] = 1, --Deadeye Decoy\n        [\"100526\"] = 1, --Tormented Bloodseeker\n        \n        \n        -- The Everbloom\n        [\"86684\"] = 1, -- Feral lasher\n        [\"212981\"] = 1, -- Hapless Assistant\n        [\"82039\"] =1, --Rockspine Stinger\n        --[\"84767\"] = 1, -- Twisted Abomination\n        --[\"86372\"] = 1, --Melded Beserker\n        [\"81864\"] = 1, --Dreadpetal\n        \n        -- Dragonflight M+ Season 2\n        \n        -- Neltharus\n        [\"193293\"] = 1, -- Qalashi Warden\n        [\"192787\"] = 1, -- Qalashi Spinecrusher\n        [\"189247\"] = 1, -- Tamed Phoenix\n        [\"189227\"] = 1, -- Qalashi Hunter\n        [\"189470\"] = 1, -- Lava Flare\n        [\"189363\"] = 2, --Infected Slasher\n        [\"186284\"] = 1, -- Gutchewer Bear\n        [\"130024\"] = 2, --Soggy Shiprat\n        [\"129526\"] = 2, --Bilge Rat Swabby \n        \n        -- Uldaman: Legacy Of Tyr\n        [\"184134\"] = 1, -- Primalist Ravager\n        [\"184130\"] = 1, -- Earthen Custodian\n        [\"191311\"] = 1, -- Infinte Whelp\n        \n        -- Halls Of Infusion\n        [\"190348\"] = 1, -- Primalist Ravager\n        [\"190923\"] = 1, -- Zephyrling\n        [\"190406\"] = 1, -- Aqualing\n        \n        -- Brackenhide Hollow\n        [\"186206\"] = 1, -- Cruel Bonecrusher\n        [\"185691\"] = 1, -- Vicious Hyena\n        [\"185534\"] = 1, -- Bonebolt Hunter\n        [\"185508\"] = 1, -- Claw Fighter\n        [\"189299\"] = 2, -- Decaying Slime\n        [\"189363\"] = 2, --Infected Slasher\n        [\"186284\"] = 1, -- Gutchewer Bear\n        [\"130024\"] = 2, --Soggy Shiprat\n        [\"129526\"] = 2, --Bilge Rat Swabby \n        \n        -- Vortex Pinical\n        [\"47238\"] = 2, -- Whipping Wind\n        [\"45477\"] = 1, -- Gust Soldier\n        [\"45924\"] = 1, -- Turbulent Squall\n        \n        -- Neltharion's Lair\n        [\"96247\"] = 2, -- Vileshard Crawler\n        [\"113\"] = 1, -- Mightstone Breaker\n        [\"90997\"] = 1, -- Mightstone Breaker 2\n        [\"102404\"] = 1, -- Stoneclaw Grubmaster\n        [\"91002\"] = 1, -- Rotdrool Grabber\n        [\"102430\"] = 2, --Tarspitter Slug\n        \n        -- The Underrot\n        [\"131402\"] = 2, -- Underrot Tick\n        [\"133663\"] = 1, -- Fanatical Headhunter\n        [\"133836\"] = 2, -- Reanimated Guardian\n        [\"270108\"] = 2, -- Rotting Spore\n        \n        -- Freehold\n        [\"128551\"] = 1, -- Irontide Mastiff\n        [\"126928\"] = 1, -- Irontide Corsair\n        [\"126918\"] = 1, -- Irontide Crackshot\n        [\"129788\"] = 1, -- Irontide Bonesaw\n        [\"129550\"] = 1, --Bilge Rat Padfoot\n        [\"129559\"] = 1, --Cutwater Duelist\n        [\"129548\"] = 1, --Blacktooth Brute\n        [\"130024\"] = 1, --Soggy Shiprat\n        [\"129526\"] = 1, --Bilge Rat Swabby\n        \n        -- Dragonflight M+ Season 1\n        \n        -- Temple of the Jade Serpent\n        [\"62358\"] = 2, -- Corrupt Droplet\n        -- [\"200126\"] = 1, -- Fallen Waterspeaker\n        [\"65317\"] = 1, -- Xiang\n        [\"59547\"] = 1, --Jiang\n        [\"58319\"] = 2, --Lesser Sha\n        [\"59598\"] = 2, --Lesser Sha\n        [\"59553\"] = 1, --The Songbird Queen\n        [\"59545\"] = 2, --Golden Beetle\n        [\"59544\"] = 1, --The Nodding Tiger\n        [\"59552\"] = 1, --The Crybaby Hozen\n        [\"200131\"] = 1, --Sha-Touched Guardian\n        [\"57109\"] = 2, --Minion of Doubt\n        [\"200388\"] = 2, --Malformed Sha\n        [\"200387\"] = 1, --Shambling Infester\n        [\"200137\"] = 1, --Depraved Mistweaver\n        \n        --The Nokhud Offensive\n        [\"192803\"] = 2, --War Ohuna\n        [\"195265\"] = 1, --Stormcaller Arynga\n        --[\"194317\"] = 1, --Stormcaller Boroo\n        [\"194315\"] = 1, --Stormcaller Solongo\n        [\"194316\"] = 1, --Stormcaller Zarii\n        [\"192794\"] = 2, --Nokhud Beastmaster\n        --[\"192796\"] = 1, --Nokhud Hornsounder\n        [\"192789\"] = 2, --Nokhud Longbow\n        -- [\"192800\"] = 1, --Nokhud Lancemaster\n        -- [\"191847\"] = 1, --Nokhud Plainstomper\n        --[\"192791\"] = 1, --Nokhud Warspear\n        [\"194898\"] = 2, --Primalist Arcblade\n        [\"194895\"] = 2, --Unstable Squall\n        [\"194896\"] = 2, --Primal Stormshield\n        -- [\"194897\"] = 2, --Stormsurge Totem\n        [\"195579\"] = 2, --Primal Gust\n        [\"195696\"] = 1, --Primalist Thunderbeast\n        [\"195855\"] = 2, --Risen Warrior\n        [\"195875\"] = 2, --Desecrated Bakar\n        [\"196645\"] = 2, --Desecrated Bakar\n        [\"195878\"] = 1, --Ukhel Beastcaller\n        [\"195876\"] = 2, --Descecrated Ohuna\n        --[\"195877\"] = 1, -- Risen Mystic\n        [\"195851\"] = 1, --Ukhel Deathspeaker\n        --[\"195927\"] = 1, --Soulharvester Galtmaa (same)\n        -- [\"195928\"] = 1, --Soulharvester Duuren (same)\n        -- [\"195929\"] = 1, --Soulharvester Tumen (same)\n        -- [\"195930\"] = 1, --Soulharvester Mandakh (same)\n        [\"193553\"] = 2, --Nokhud Warhound\n        [\"193555\"] = 2, --Nokhud Villager (female)\n        [\"186643\"] = 2, --Nokhud Villager (male)\n        [\"193544\"] = 2, --Nokhud Houndsman\n        [\"193565\"] = 1, --Nokhud Defender\n        -- [\"193457\"] = 1, --Balara\n        [\"196263\"] = 2, --Nokhud Neophyte\n        [\"199325\"] = 2, --Nokhud Stormcaller\n        [\"196484\"] = 2, --Nokhud Stormcaller\n        [\"199294\"] = 2, --Nokhud Stormcaster\n        [\"199320\"] = 2, --Nokhud Warspear (RP version)\n        [\"199321\"] = 2, --Nokhud Warspear (RP version)\n        \n        --Court of Stars\n        [\"105703\"] = 2, --Mana Wyrm,\n        -- [\"104251\"] = 1, --Duskwatch Sentry\n        [\"104246\"] = 1, --Duskwatch Guard\n        [\"111563\"] = 1, --Duskwatch Guard\n        [\"105705\"] = 2, --Bound Energy\n        [\"104295\"] = 1, --Blazing Imp\n        -- [\"105715\"] = 1, --Watchful Inquisitor\n        [\"104277\"] = 2, --Legion Hound\n        -- [\"104300\"] = 1, --Shadow Mistress\n        \n        --Shadowmoon Burial Grounds\n        [\"75715\"] = 1, --Reanimated Ritual Bones\n        [\"75451\"] = 2, --Defiled Spirit (non-casting)\n        [\"75506\"] = 1, --Shadowmoon Loyalist\n        [\"77006\"] = 2, --Corpse Skitterling\n        --[\"76446\"] = 2, --Subjugated Enslaver\n        [\"76444\"] = 2, --Subjugated Soul\n        --[\"75979\"] = 1, --Exhumed Spirit\n        --[\"75459\"] = 1, --Plagued Bat\n        \n        --Algeth'ar Academy\n        [\"196642\"] = 2, --Hungry Lasher\n        [\"197398\"] = 2, --Hungry Lasher\n        [\"197219\"] = 1, --Vile Lasher\n        [\"192329\"] = 2, --Territorial Eagle\n        [\"196694\"] = 2, --Arcane Forager\n        [\"196671\"] = 1, --Arcane Ravager\n        [\"196577\"] = 2, --Spellbound Battleaxe\n        [\"197904\"] = 2, --Spellbound Battleaxe\n        [\"196798\"] = 1, --Corrupted Manafiend\n        -- [\"196045\"] = 1, --Corrupted Manafiend\n        [\"196200\"] = 2, --Algeth'ar Echoknight\n        [\"196202\"] = 1, --Spectral Invoker\n        -- [\"196203\"] = 2, --Ethereal Restorer\n        \n        --The Azure Vault\n        [\"191313\"] = 2, --Bubbling Sapling\n        --[\"191164\"] = 1, --Arcane Tender\n        --[\"196115\"] = 1, --Arcane Tender\n        [\"196559\"] = 2, --Volatile Sapling\n        [\"187155\"] = 1, --Rune Seal Keeper\n        [\"187154\"] = 1, --Unstable Curator\n        [\"196116\"] = 1, --Crystal Fury\n        [\"196117\"] = 2, --Crystal Thrasher\n        [\"186740\"] = 2, --Arcane Construct\n        [\"189555\"] = 2, --Arcane Attendant\n        [\"190510\"] = 2, --Vault Guard\n        [\"191739\"] = 1, --Scalebane Liutenant\n        [\"187246\"] = 2, --Nullmagic Hornswog\n        [\"187242\"] = 2, --Tarasek Looter\n        [\"187240\"] = 1, --Draconid Breaker\n        \n        --Halls of Valor\n        [\"97087\"] = 2, --Valajar Champion\n        -- [\"95842\"] = 1, --Valajar Thundercaller\n        [\"96574\"] = 1, --Stormforged Sentinel\n        [\"95832\"] = 1, --Valajar Shieldmaiden\n        -- [\"101639\"] = 2, --Valajar Shieldmaiden\n        --  [\"101637\"] = 1, --Valajar Aspirant\n        -- [\"97197\"] = 1, --Valajar Purifier\n        [\"96640\"] = 1, --Valajar Marksman\n        [\"96611\"] = 2, --Angehoof Bull\n        [\"99922\"] = 2, --Ebonclaw Packmate\n        [\"96608\"] = 1, --Ebonclaw Worg\n        [\"97068\"] = 1, --Storm Drake\n        \n        --Ruby Life Pools\n        [\"188011\"] = 2, --Primal Terrasentry\n        --[\"188067\"] = 2, --Flashfrost Chillweaver\n        [\"188244\"] = 1, --Primal Juggernaut\n        [\"189893\"] = 2, --Infused Whelp\n        [\"187894\"] = 2, --Infused Whelp\n        [\"187897\"] = 1, --Defier Draghar\n        [\"194622\"] = 2, --Scorchling\n        [\"190205\"] = 2, --Scorchling\n        [\"197698\"] = 1, --Thunderhead\n        [\"190034\"] = 1, --Blazebound Destroyer\n        -- [\"190207\"] = 1, --Primalist Cinderweaver\n        [\"197697\"] = 1, --Flamegullet\n        [\"197509\"] = 2, --Primal Thundercloud\n        [\"197982\"] = 2, --Storm Warrior\n        [\"196102\"] = 2, --Conjured Lasher\n        \n        --Misc Dungeons\n        \n        --The Headless Horseman\n        [\"208521\"] = 1, --Pumpkin Soldier\n    }\nend",
},
["Time"] = 1699304711,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/Ru_9FLVjI/15",
["Icon"] = 1041231,
["Enabled"] = true,
["Revision"] = 1783,
["semver"] = "1.0.14",
["Author"] = "Causese-Valdrakken",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["version"] = 15,
["PlaterCore"] = 1,
["Name"] = "Priority based scaling || Whiiskeyz",
["Options"] = {
{
["Type"] = 4,
["Key"] = "scale",
["Value"] = true,
["Name"] = "Enable Scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to scale based on priority.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for mid priority.",
["Min"] = 0,
["Key"] = "midScale",
["Value"] = 0.75,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Mid prio",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for low priority.",
["Min"] = 0,
["Key"] = "lowScale",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low prio",
},
{
["Type"] = 4,
["Key"] = "color",
["Value"] = false,
["Name"] = "Enable Coloring",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to be colored based on priority.",
},
{
["Type"] = 1,
["Key"] = "midColor",
["Value"] = {
1,
0.92941182851791,
0,
1,
},
["Name"] = "Mid prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set scaling Set color for mid priority.",
},
{
["Type"] = 1,
["Key"] = "lowColor",
["Value"] = {
0.49803924560547,
0.49803924560547,
0.49803924560547,
1,
},
["Name"] = "Low prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set scaling Set color for low priority.",
},
},
["LastHookEdited"] = "Initialization",
},
{
["OptionsValues"] = {
["specialColors"] = {
{
"116",
"navy",
},
},
["noKickReadyColor"] = {
1,
0,
0.035294119268656,
1,
},
["kickOutOfRangeColor"] = {
0,
0.41960787773132,
1,
1,
},
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptId(unitFrame)\nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    unitFrame.castBar:UpdateCastColor()\nend",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptIDs()\n    modTable.updateInterruptId(unitFrame)\nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.lastUpdateTime or (envTable.lastUpdateTime < modTable.lastUpdateTime) then\n        modTable.setCastColorFunction (unitFrame)\n        envTable.lastUpdateTime = modTable.lastUpdateTime\n    end\nend",
["Initialization"] = "function (modTable)\n    \n    --Disable for classic - for now\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function modTable.updateInterruptIDs () end\n        function modTable.setCastColorFunction (unitFrame) end\n        function modTable.updateInterruptId (unitFrame) end\n        return\n    end\n    \n    -- settings:\n    local noKickReadyColor = modTable.config.noKickReadyColor or \"blue\"\n    local kickReadyInTimeColor = modTable.config.kickReadyInTimeColor or \"purple\"\n    local kickOutOfRangeColor = modTable.config.kickOutOfRangeColor or \"orange\"\n    local kickOutOfRangeEnabled = modTable.config.kickOutOfRangeEnabled\n    local kickReadyInTimeGraceTime = modTable.config.kickReadyInTimeGraceTime or 0.5 --sec - additional time on the CD to account for reaction, lag, etc\n    local checkCovenant = true\n    local showSpark = modTable.config.showSpark\n    local sparkColor = modTable.config.sparkColor\n    local sparkWidth = modTable.config.sparkWidth\n    local sparkTexture = modTable.config.sparkTexture\n    \n    local specialCastColorsEnabled = modTable.config.specialColorsEnabled\n    local specialColorsData = modTable.config.specialColors\n    local platerCastColorsEnabled = modTable.config.platerCastColorsEnabled\n    local specialColorsForNonInterruptibleEnabled = modTable.config.specialColorsForNonInterruptibleEnabled\n    local specialColors = {}\n    \n    if platerCastColorsEnabled or specialColorsForNonInterruptibleEnabled then\n        for id, colorData in pairs(Plater.db.profile.cast_colors) do\n            if colorData and colorData[1] and colorData[2] then\n                specialColors[tonumber(id) or id] = {Plater:ParseColors(colorData[2])}\n            end\n        end\n    end\n    if specialCastColorsEnabled or specialColorsForNonInterruptibleEnabled then\n        for id, color in pairs(specialColorsData) do\n            specialColors[tonumber(id) or id] = {Plater:ParseColors(color)}\n        end\n    end\n    local useSpecial = specialCastColorsEnabled or platerCastColorsEnabled\n    \n    \n    -- functions:\n    \n    -- determine interrupt spell according to spec\n    function modTable.updateInterruptIDs ()\n        local specId = GetSpecializationInfo(GetSpecialization())\n        modTable.knownSpecID = specId\n        local interruptIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if Plater.PlayerClass == \"ROGUE\" then\n            interruptIDs[1766] = true\n        elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n            interruptIDs[47528] = true\n        elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n            interruptIDs[183752] = true\n        elseif Plater.PlayerClass == \"DRUID\" then\n            if specId == 103 or specId == 104 or specId == 105 then\n                interruptIDs[106839] = true -- feral/guardian/resto\n            elseif specId == 102 then\n                interruptIDs[78675] = true -- moonkin\n            end\n        elseif Plater.PlayerClass == \"HUNTER\" then\n            if specId == 255 then\n                interruptIDs[187707] = true -- SV\n            else\n                interruptIDs[147362] = true -- BM/MS\n            end\n        elseif Plater.PlayerClass == \"MONK\" then\n            interruptIDs[116705] = true --WW/BM/MW\n        elseif Plater.PlayerClass == \"PALADIN\" then\n            interruptIDs[96231] = true --prot/ret/holy\n            if specId == 66 then\n                interruptIDs[31935] = true --prot avenger's shield\n                if checkCovenant and IsPlayerSpell(304971) then\n                    interruptIDs[304971] = true --kyrian\n                end\n            end\n        elseif Plater.PlayerClass == \"SHAMAN\" then\n            interruptIDs[57994] = true\n        elseif Plater.PlayerClass == \"WARRIOR\" then\n            interruptIDs[6552] = true\n        elseif Plater.PlayerClass == \"MAGE\" then\n            interruptIDs[2139] = true\n        elseif Plater.PlayerClass == \"PRIEST\" then\n            if specId == 258 then\n                interruptIDs[15487] = true\n            end\n        elseif Plater.PlayerClass == \"WARLOCK\" then\n            interruptIDs[119910] = 119898 --Spell Lock (command ability)\n            if IsPlayerSpell(108503) then --GoSac\n                interruptIDs[132409] = 119898 --sacrificed Spell Lock (command ability)\n            end\n            if IsPlayerSpell(212619) then --Call Felhunter (PVP ability)\n                interruptIDs[212619] = true\n            end\n            if specId == 266 then\n                interruptIDs[119914] = 119898 --demo/fel guard  Axe Toss (command ability)\n            end\n        elseif Plater.PlayerClass == \"EVOKER\" then\n            interruptIDs[351338] = true --quell talent\n        end\n        modTable.interruptSpellIDs = interruptIDs\n    end\n    \n    function modTable.updateInterruptId (unitFrame)\n        local specId = GetSpecializationInfo(GetSpecialization())\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updateInterruptIDs()\n        end\n        unitFrame.castBar.interruptSpellIDs = modTable.interruptSpellIDs\n    end\n    \n    function modTable.setCastColorFunction (unitFrame)\n        -- create spark (if needed)\n        local castBar = unitFrame.castBar\n        if not castBar.InterruptSpark then\n            castBar.InterruptSpark = castBar:CreateTexture (nil, \"overlay\")\n            castBar.InterruptSpark:SetDrawLayer (\"overlay\", 4)\n            castBar.InterruptSpark:SetBlendMode (\"ADD\")\n            castBar.InterruptSpark:SetHeight(castBar:GetHeight() + 6)\n        end\n        castBar.InterruptSpark:SetTexture(Plater.SparkTextures[sparkTexture])\n        castBar.InterruptSpark:SetVertexColor(Plater:ParseColors(sparkColor))\n        castBar.InterruptSpark:SetWidth(sparkWidth)\n        \n        -- overwrite the color function:\n        castBar.GetCastColor = function (self)\n            \n            self.InterruptSpark:Hide()\n            \n            local interruptCD, interruptReadyInTime = nil, false\n            local interruptDur, interruptStart = 0, 0\n            local spellOutOfRange = false --skip per default\n            if self.interruptSpellIDs and self.unit and UnitCanAttack(\"player\", self.unit) then\n                \n                for interruptSpellId, playerAbility in pairs(self.interruptSpellIDs) do\n                    if playerAbility == true then\n                        \n                        if IsSpellKnown(interruptSpellId) then\n                            local cdStart, cdDur =  GetSpellCooldown(interruptSpellId)\n                            local tmpInterruptCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                            if not interruptCD or (tmpInterruptCD < interruptCD) then\n                                interruptCD = tmpInterruptCD\n                                interruptDur = cdDur\n                                interruptStart = cdStart\n                                spellOutOfRange = IsSpellInRange(GetSpellInfo(interruptSpellId), self.unit) == 0\n                            end\n                        end\n                    else\n                        if type(playerAbility) == \"number\" then\n                            -- workaround for spell overrides (on WL command ability, etc.)\n                            if FindSpellOverrideByID(playerAbility) == interruptSpellId then\n                                local cdStart, cdDur =  GetSpellCooldown(interruptSpellId)\n                                local tmpInterruptCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                                if not interruptCD or  (tmpInterruptCD < interruptCD) then\n                                    interruptCD = tmpInterruptCD\n                                    interruptDur = cdDur\n                                    interruptStart = cdStart\n                                    spellOutOfRange = IsSpellInRange(GetSpellInfo(interruptSpellId), self.unit) == 0\n                                end \n                            end\n                        end\n                    end\n                end\n                \n                if not interruptCD then\n                    interruptCD = 0\n                end\n                \n                if self.channeling then\n                    interruptReadyInTime = (interruptCD + kickReadyInTimeGraceTime) < self.value\n                else\n                    interruptReadyInTime = (interruptCD + kickReadyInTimeGraceTime) < (self.maxValue - self.value)\n                end\n            end\n            \n            if not interruptCD then\n                interruptCD = 0\n            end\n            \n            if (not self.canInterrupt) then\n                return (specialColorsForNonInterruptibleEnabled and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.NonInterruptible\n                \n            elseif (self.failed) then\n                return self.Colors.Failed\n                \n            elseif (self.interrupted) then\n                return self.Colors.Interrupted\n                \n            elseif (self.finished) then\n                return self.Colors.Finished\n                \n            elseif interruptCD > 0 and interruptReadyInTime then\n                if showSpark then\n                    self.InterruptSpark:Show()\n                    local sparkPosition = (interruptStart + interruptDur - self.spellStartTime + kickReadyInTimeGraceTime)/self.maxValue\n                    if self.channeling then\n                        sparkPosition = 1-sparkPosition\n                    end\n                    self.InterruptSpark:SetPoint (\"center\", self, \"left\", sparkPosition  * self:GetWidth(), 0)\n                end\n                return kickReadyInTimeColor\n                \n            elseif interruptCD > 0 then\n                return noKickReadyColor\n                \n            elseif kickOutOfRangeEnabled and spellOutOfRange then\n                return kickOutOfRangeColor\n                \n            elseif (self.channeling) then\n                return (useSpecial and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.Channeling\n                \n            else\n                return (useSpecial and (specialColors[self.spellName] or specialColors[self.spellID])) or self.Colors.Casting\n                \n            end\n        end\n    end\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updateInterruptId(unitFrame)\n    modTable.setCastColorFunction(unitFrame)\nend",
},
["Time"] = 1671326060,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/jHilJiXiY/40",
["Icon"] = 132219,
["Enabled"] = true,
["Revision"] = 801,
["semver"] = "1.3.0",
["Author"] = "Viash-Thrall",
["Desc"] = "Sets the cast bar color to the specified one if your interrupt spell is not ready. Uses other Plater color settings otherwise.",
["Prio"] = 99,
["version"] = 40,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "General:",
["Name"] = "General:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "noKickReadyColor",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Kick not Ready Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "kickReadyInTimeColor",
["Value"] = {
0.50196078431373,
0,
1,
1,
},
["Name"] = "Kick Ready in Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "kickOutOfRangeColor",
["Value"] = {
1,
0.54901960784314,
0,
1,
},
["Name"] = "Kick out of Range Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "kickOutOfRangeEnabled",
["Value"] = false,
["Name"] = "Check 'Out Of Range'",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Key"] = "kickReadyInTimeGraceTime",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaction grace Time",
},
{
["Type"] = 4,
["Key"] = "specialColorsEnabled",
["Value"] = false,
["Name"] = "Enable special Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "platerCastColorsEnabled",
["Value"] = false,
["Name"] = "Enable Plater Cast Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "specialColorsForNonInterruptibleEnabled",
["Value"] = false,
["Name"] = "Use Cast Colors for not-interruptible",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Option 10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "Spark:",
["Name"] = "Spark:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showSpark",
["Value"] = true,
["Name"] = "Show Spark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "",
["Min"] = 4,
["Key"] = "sparkWidth",
["Value"] = 12,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Width",
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "",
["Min"] = 1,
["Key"] = "sparkTexture",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Texure",
},
{
["Type"] = 7,
["Key"] = "specialColors",
["Value"] = {
{
"116",
"navy",
},
},
["Name"] = "Special Cast Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Interrupt not ready Cast Color",
},
{
["Enabled"] = true,
["Revision"] = 2,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Options"] = {
},
["Author"] = "Whiiskeyz-Sargeras",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["UID"] = "0x655b96fd4cfaa28",
["Hooks"] = {
},
["Prio"] = 99,
["Time"] = 1700501248,
["PlaterCore"] = 1,
["Desc"] = "",
["Name"] = "New Mod",
["Icon"] = "",
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateTargetName(unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateTargetName(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateTargetName(unitFrame)\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateTargetName(unitFrame) \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateTargetName(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    local ignoreTanks = false\n    local ignoreNonPlayers = false\n    \n    -- text settings:\n    local useClassColors = false\n    local textSize = 8\n    local alpha = 0.8\n    local textColor = \"gold\"\n    local textFont = \"accidental presidency\"\n    local textOutline = \"OUTLINE\"\n    --local textShadowColor = \"green\"\n    \n    local anchor = {\n        side =8, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 0, --x offset\n        y = 45, --y offset\n    };\n    \n    \n    \n    ---- functions\n    local DF = _G [\"DetailsFramework\"]\n    \n    if not unitFrame.CurrentTargetLabel then\n        unitFrame.CurrentTargetLabel = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize);\n        if textFont then\n            DF:SetFontFace (unitFrame.CurrentTargetLabel, textFont)\n        end\n        if textOutline then\n            DF:SetFontOutline (unitFrame.CurrentTargetLabel, textOutline)\n        end\n        if textShadowColor then\n            local r, g, b, a = DF:ParseColors (textShadowColor)\n            DF:SetFontShadow (unitFrame.CurrentTargetLabel, r, g, b, a, 1, -1)\n        end\n        Plater.SetAnchor (unitFrame.CurrentTargetLabel, anchor, unitFrame.healthBar);\n        unitFrame.CurrentTargetLabel:SetAlpha(alpha or 1)\n    end\n    \n    \n    function envTable.updateTargetName(unitFrame)\n        unitFrame.CurrentTargetLabel:SetText(\"\");\n        if not unitFrame.namePlateUnitToken or unitFrame.IsSelf then\n            return\n        end\n        local unitTarget = unitFrame.namePlateUnitToken .. \"target\"\n        local targetName = UnitName (unitTarget)\n        local targetIsPlayer = UnitIsPlayer(unitTarget)\n        local isTank = Plater.GetTanks()[targetName or \"\"]\n        if (targetName and (not (ignoreTanks and isTank)) and (targetIsPlayer or not ignoreNonPlayers)) then\n            local _, class = UnitClass (unitTarget)\n            if not class or not useClassColors then\n                unitFrame.CurrentTargetLabel:SetText(targetName)\n                if textColor then\n                    unitFrame.CurrentTargetLabel:SetTextColor(DF:ParseColors(textColor))\n                end\n            else\n                targetName = Plater.SetTextColorByClass (unitTarget, targetName)\n                unitFrame.CurrentTargetLabel:SetText(targetName)\n            end\n        end\n        unitFrame.CurrentTargetLabel:SetAlpha(alpha or 1)\n    end\n    \nend",
},
["Time"] = 1700503395,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/0x9uZS3OS/12",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 196,
["semver"] = "1.0.11",
["Author"] = "Irashi-Antonidas",
["Desc"] = "Adds the current target as a text to the plate.",
["Prio"] = 99,
["version"] = 12,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Name"] = "Target Name on Plate",
},
},
["last_news_time"] = 1669801147,
["cast_statusbar_fadeout_time"] = 0.48999997973442,
["aura_timer_decimals"] = true,
["aura_width"] = 22,
["aura_height2"] = 14,
["health_statusbar_bgcolor"] = {
0.0431372,
0.0431372,
0.0431372,
1,
},
["cast_colors"] = {
[215433] = {
true,
"white",
"",
},
[373803] = {
true,
"white",
"",
},
[192288] = {
true,
"white",
"",
},
[397914] = {
true,
"white",
"",
},
[198934] = {
true,
"white",
},
[392451] = {
true,
"white",
"",
},
[371984] = {
true,
"white",
"",
},
[392576] = {
true,
"white",
"",
},
[198962] = {
true,
"white",
"",
},
[199726] = {
true,
"white",
"",
},
[114646] = {
true,
"white",
"",
},
[396018] = {
true,
"white",
"",
},
[372683] = {
true,
"white",
"",
},
[397801] = {
true,
"white",
"",
},
[396073] = {
true,
"white",
"",
},
[373017] = {
true,
"white",
"",
},
[198959] = {
true,
"white",
"",
},
[198595] = {
true,
"white",
"",
},
[198750] = {
true,
"white",
"",
},
[392640] = {
true,
"white",
"",
},
[397888] = {
true,
"white",
"",
},
[384194] = {
true,
"white",
"",
},
[192563] = {
true,
"white",
"",
},
},
["pet_width_scale"] = 0.99999994039536,
["castbar_target_anchor"] = {
["side"] = 11,
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Cast - Glowing [P]"] = 10,
["Cast - Important Target [P]"] = 2,
["Unit - Show Energy"] = 11,
["Blink by Time Left"] = 1,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Explosion Affix M+"] = 14,
["Unit - Health Markers"] = 12,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Add - Explode on Die [P]"] = 1,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Countdown"] = 11,
["Color Change"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Tank Interrupt"] = 12,
["Aura Border Color"] = 1,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Fixate"] = 11,
["Unit - Important"] = 11,
["Aura - Buff Alert"] = 15,
["Cast - Shield Interrupt"] = 2,
["Fixate On You"] = 11,
},
["extra_icon_anchor"] = {
["x"] = 4,
},
["range_check_alpha"] = 0.79999995231628,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 1,
["ui_parent_cast_level"] = 10,
["semver"] = "1.0.53",
["ui_parent_buff2_level"] = 10,
["range_check_in_range_or_target_alpha_friendlies"] = 0.89999997615814,
["aura_frame2_anchor"] = {
["y"] = 15.899993896484,
["side"] = 7,
},
["extra_icon_show_enrage"] = true,
["cast_statusbar_texture"] = "Blizzard",
["cast_statusbar_spark_color"] = {
0.98823535442352,
[3] = 0.94117653369904,
},
["aura_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["castbar_icon_x_offset"] = 1,
["indicator_friendlyfaction"] = true,
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.64999997615814,
["ui_parent_scale_tune"] = 2.083333379899463,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["ui_parent_buff_level"] = 10,
["health_statusbar_bgtexture"] = "PlaterBackground",
["indicator_raidmark_anchor"] = {
["x"] = -40,
},
["extra_icon_width"] = 22,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.8117647767067,
0.63921570777893,
},
["anothertank"] = {
0.72941176470588,
0.91764705882353,
},
["aggro"] = {
0.50196081399918,
0.50196081399918,
},
["nocombat"] = {
0.50588238239288,
0.0039215688593686,
},
["noaggro"] = {
nil,
0.047058828175068,
},
["pulling"] = {
0.93333339691162,
[3] = 0.75294125080109,
},
},
},
["health_statusbar_texture"] = "Minimalist",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Monk Statue"] = 2,
["Extra Border"] = 2,
["Combo Points"] = 6,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Execute Range"] = 1,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882359743118,
nil,
0.96000000089407,
},
["update_throttle"] = 0.099999994039536,
["minor_width_scale"] = 0.99999994039536,
["castbar_target_text_size"] = 8,
["aura_frame1_anchor"] = {
["y"] = 15.899993896484,
["side"] = 1,
},
["tocversion"] = 100200,
["aura_timer_text_font"] = "Accidental Presidency",
["not_affecting_combat_alpha"] = 0.79999995231628,
["aura_height"] = 14,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "BantoBar",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["target_shady_alpha"] = 0.59999996423721,
["cast_audiocues_channel"] = "Master",
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.7000000476837",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowDebuffsOnFriendly"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateLargerScale"] = "1.0999999046326",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "1",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "0",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1.15",
["nameplateShowAll"] = "1",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["ShowClassColorInNameplate"] = "1",
["nameplateMinScale"] = "1",
["nameplateSelfTopInset"] = "0.57687740325928",
["nameplateOtherTopInset"] = "0.085",
["nameplateSelfAlpha"] = "1",
["nameplateSelfBottomInset"] = "0.32596862792969",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowEnemyGuardians"] = "1",
["nameplateShowFriendlyPets"] = "0",
["nameplateMinAlphaDistance"] = "-158489.31924611",
},
["usePlaterWidget"] = false,
["indicator_enemyclass"] = true,
["login_counter"] = 2073,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["cast_statusbar_spark_offset"] = -13,
["npc_colors"] = {
[99358] = {
true,
false,
"deepskyblue",
},
[196798] = {
true,
false,
"blue",
},
[186696] = {
true,
false,
"fuchsia",
},
[109908] = {
true,
false,
"fuchsia",
},
[213806] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"mediumpurple",
},
[95842] = {
true,
false,
"deepskyblue",
},
[180431] = {
true,
false,
"deepskyblue",
},
[115407] = {
true,
false,
"blue",
},
[150253] = {
true,
false,
"mediumpurple",
},
[184140] = {
true,
false,
"fuchsia",
},
[99359] = {
true,
false,
"fuchsia",
},
[180432] = {
true,
false,
"blue",
},
[165471] = {
true,
false,
"blue",
},
[190407] = {
true,
false,
"deepskyblue",
},
[129602] = {
true,
false,
"mediumpurple",
},
[180433] = {
true,
false,
"fuchsia",
},
[131585] = {
true,
false,
"blue",
},
[120651] = {
true,
false,
"gold",
},
[131009] = {
true,
false,
"fuchsia",
},
[99360] = {
true,
false,
"blue",
},
[197697] = {
true,
false,
"mediumpurple",
},
[40633] = {
true,
false,
"deepskyblue",
},
[164578] = {
true,
false,
"blue",
},
[134144] = {
true,
false,
"lightgreen",
},
[201790] = {
true,
false,
"deepskyblue",
},
[40825] = {
true,
false,
"mediumpurple",
},
[175576] = {
true,
false,
"fuchsia",
},
[199233] = {
true,
false,
"mediumpurple",
},
[126918] = {
false,
false,
"gold",
},
[196548] = {
true,
false,
"fuchsia",
},
[135552] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[186191] = {
true,
false,
"deepskyblue",
},
[135169] = {
true,
false,
"fuchsia",
},
[201792] = {
true,
false,
"mediumpurple",
},
[206140] = {
true,
false,
"mediumpurple",
},
[83761] = {
true,
false,
"mediumpurple",
},
[98275] = {
true,
false,
"fuchsia",
},
[178392] = {
true,
false,
"fuchsia",
},
[85232] = {
true,
false,
"mediumpurple",
},
[40634] = {
true,
false,
"deepskyblue",
},
[130436] = {
false,
false,
"aqua",
},
[213942] = {
true,
false,
"deepskyblue",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"blue",
},
[184020] = {
true,
false,
"mediumpurple",
},
[199749] = {
true,
false,
"mediumpurple",
},
[168420] = {
true,
false,
"blue",
},
[165479] = {
true,
false,
"mediumpurple",
},
[128455] = {
true,
false,
"fuchsia",
},
[134150] = {
true,
false,
"navajowhite",
},
[75451] = {
true,
false,
"fuchsia",
},
[83763] = {
true,
false,
"deepskyblue",
},
[184022] = {
true,
false,
"deepskyblue",
},
[189265] = {
true,
false,
"fuchsia",
},
[75899] = {
true,
false,
"fuchsia",
},
[196043] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"fuchsia",
},
[134024] = {
true,
false,
"fuchsia",
},
[178141] = {
true,
false,
"blue",
},
[196044] = {
true,
false,
"fuchsia",
},
[190034] = {
true,
false,
"mediumpurple",
},
[83892] = {
true,
false,
"fuchsia",
},
[188244] = {
true,
false,
"mediumpurple",
},
[192464] = {
true,
false,
"fuchsia",
},
[157810] = {
true,
false,
"deepskyblue",
},
[137478] = {
true,
false,
"gold",
},
[194894] = {
true,
false,
"deepskyblue",
},
[200137] = {
true,
false,
"deepskyblue",
},
[165483] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[139269] = {
true,
false,
"deepskyblue",
},
[194895] = {
false,
false,
"deepskyblue",
},
[168425] = {
true,
false,
"fuchsia",
},
[164461] = {
true,
false,
"blue",
},
[83893] = {
true,
false,
"deepskyblue",
},
[128969] = {
true,
false,
"goldenrod",
},
[99366] = {
true,
false,
"deepskyblue",
},
[101476] = {
true,
false,
"fuchsia",
},
[177889] = {
true,
false,
"fuchsia",
},
[187224] = {
true,
false,
"deepskyblue",
},
[154744] = {
true,
false,
"fuchsia",
},
[194897] = {
true,
false,
"fuchsia",
},
[164463] = {
true,
false,
"deepskyblue",
},
[83894] = {
true,
false,
"blue",
},
[98280] = {
true,
false,
"blue",
},
[134157] = {
true,
false,
"peru",
},
[75966] = {
true,
false,
"fuchsia",
},
[150142] = {
true,
false,
"deepskyblue",
},
[212673] = {
true,
false,
"mediumpurple",
},
[98792] = {
true,
false,
"deepskyblue",
},
[134158] = {
true,
false,
"navajowhite",
},
[172265] = {
true,
false,
"deepskyblue",
},
[208198] = {
true,
false,
"fuchsia",
},
[150143] = {
true,
false,
"blue",
},
[177892] = {
true,
false,
"blue",
},
[165872] = {
true,
false,
"mediumpurple",
},
[137484] = {
true,
false,
"gold",
},
[129227] = {
false,
false,
"maroon",
},
[131858] = {
true,
false,
"blue",
},
[129547] = {
true,
false,
"deepskyblue",
},
[114266] = {
true,
false,
"deepskyblue",
},
[207177] = {
true,
false,
"mediumpurple",
},
[127757] = {
true,
false,
"mediumpurple",
},
[40925] = {
true,
false,
"mediumpurple",
},
[190426] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
true,
false,
"gold",
},
[98538] = {
true,
false,
"mediumpurple",
},
[150146] = {
true,
false,
"fuchsia",
},
[137103] = {
true,
false,
"fuchsia",
},
[129548] = {
false,
false,
"deepskyblue",
},
[101991] = {
true,
false,
"mediumpurple",
},
[134418] = {
true,
false,
"deepskyblue",
},
[82682] = {
true,
false,
"mediumpurple",
},
[97068] = {
true,
false,
"mediumpurple",
},
[75713] = {
true,
false,
"fuchsia",
},
[180070] = {
true,
false,
"fuchsia",
},
[138255] = {
true,
false,
"maroon",
},
[122963] = {
true,
false,
"mediumpurple",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"mediumpurple",
},
[170480] = {
true,
false,
"mediumpurple",
},
[181861] = {
true,
false,
"mediumpurple",
},
[52019] = {
true,
false,
"fuchsia",
},
[83578] = {
true,
false,
"mediumpurple",
},
[198997] = {
true,
false,
"mediumpurple",
},
[190174] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"mediumpurple",
},
[207438] = {
true,
false,
"mediumpurple",
},
[212681] = {
true,
false,
"deepskyblue",
},
[75459] = {
true,
false,
"fuchsia",
},
[118489] = {
true,
false,
"fuchsia",
},
[170483] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"blue",
},
[122965] = {
true,
false,
"mediumpurple",
},
[199000] = {
true,
false,
"mediumpurple",
},
[39616] = {
true,
false,
"WARRIOR",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
true,
false,
"plum",
},
[136470] = {
true,
false,
"honeydew",
},
[75652] = {
true,
false,
"mediumpurple",
},
[134041] = {
true,
false,
"WARRIOR",
},
[197595] = {
true,
false,
"mediumpurple",
},
[203861] = {
true,
false,
"mediumpurple",
},
[155908] = {
true,
false,
"fuchsia",
},
[98542] = {
true,
false,
"mediumpurple",
},
[179821] = {
true,
false,
"fuchsia",
},
[83389] = {
true,
false,
"mediumpurple",
},
[157571] = {
true,
false,
"deepskyblue",
},
[129552] = {
true,
false,
"deepskyblue",
},
[154758] = {
true,
false,
"fuchsia",
},
[162047] = {
true,
false,
"mediumpurple",
},
[118491] = {
true,
false,
"deepskyblue",
},
[115486] = {
true,
false,
"mediumpurple",
},
[90998] = {
true,
false,
"blue",
},
[157572] = {
true,
false,
"deepskyblue",
},
[164861] = {
true,
false,
"blue",
},
[122967] = {
true,
false,
"mediumpurple",
},
[105704] = {
true,
false,
"deepskyblue",
},
[166396] = {
true,
false,
"blue",
},
[127315] = {
true,
false,
"fuchsia",
},
[83390] = {
true,
false,
"deepskyblue",
},
[187240] = {
true,
false,
"mediumpurple",
},
[132126] = {
true,
false,
"fuchsia",
},
[45915] = {
true,
false,
"fuchsia",
},
[171384] = {
true,
false,
"blue",
},
[168443] = {
true,
false,
"blue",
},
[77700] = {
true,
false,
"deepskyblue",
},
[84989] = {
true,
false,
"deepskyblue",
},
[81984] = {
true,
false,
"mediumpurple",
},
[122968] = {
true,
false,
"mediumpurple",
},
[101549] = {
true,
false,
"blue",
},
[170490] = {
true,
false,
"deepskyblue",
},
[168572] = {
true,
false,
"blue",
},
[191206] = {
true,
false,
"deepskyblue",
},
[184301] = {
true,
false,
"deepskyblue",
},
[115488] = {
true,
false,
"blue",
},
[163458] = {
true,
false,
"deepskyblue",
},
[186220] = {
true,
false,
"deepskyblue",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"deepskyblue",
},
[197857] = {
true,
false,
"deepskyblue",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"blue",
},
[178165] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[165762] = {
true,
false,
"fuchsia",
},
[122970] = {
true,
false,
"blue",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"mediumpurple",
},
[86526] = {
true,
false,
"blue",
},
[135329] = {
true,
false,
"mediumpurple",
},
[81603] = {
true,
false,
"mediumpurple",
},
[166275] = {
true,
false,
"deepskyblue",
},
[196198] = {
true,
false,
"blue",
},
[174843] = {
true,
false,
"mediumpurple",
},
[139422] = {
true,
false,
"gold",
},
[166276] = {
true,
false,
"mediumpurple",
},
[168578] = {
true,
false,
"deepskyblue",
},
[150292] = {
true,
false,
"blue",
},
[205790] = {
true,
false,
"WARRIOR",
},
[162057] = {
true,
false,
"mediumpurple",
},
[205151] = {
true,
false,
"WARRIOR",
},
[150165] = {
true,
false,
"deepskyblue",
},
[186226] = {
true,
false,
"fuchsia",
},
[125977] = {
true,
false,
"fuchsia",
},
[196712] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"mediumpurple",
},
[129366] = {
true,
false,
"goldenrod",
},
[170882] = {
true,
false,
"blue",
},
[99891] = {
true,
false,
"mediumpurple",
},
[139425] = {
false,
false,
"honeydew",
},
[180473] = {
true,
false,
"blue",
},
[196202] = {
true,
false,
"blue",
},
[103344] = {
true,
false,
"mediumpurple",
},
[164873] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"fuchsia",
},
[180474] = {
true,
false,
"fuchsia",
},
[183671] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"honeydew",
},
[180091] = {
true,
false,
"mediumpurple",
},
[129559] = {
true,
false,
"blue",
},
[186741] = {
true,
false,
"fuchsia",
},
[150169] = {
true,
false,
"mediumpurple",
},
[150297] = {
true,
false,
"deepskyblue",
},
[134284] = {
true,
false,
"deepskyblue",
},
[189555] = {
true,
false,
"blue",
},
[150251] = {
true,
false,
"blue",
},
[131586] = {
true,
false,
"mediumpurple",
},
[182778] = {
true,
false,
"fuchsia",
},
[132491] = {
true,
false,
"palegreen",
},
[81212] = {
true,
false,
"mediumpurple",
},
[114319] = {
true,
false,
"blue",
},
[102962] = {
true,
false,
"fuchsia",
},
[198996] = {
true,
false,
"mediumpurple",
},
[163086] = {
true,
false,
"blue",
},
[135167] = {
true,
false,
"peru",
},
[204262] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"blue",
},
[134174] = {
true,
false,
"honeydew",
},
[150250] = {
true,
false,
"deepskyblue",
},
[168318] = {
true,
false,
"mediumpurple",
},
[173189] = {
true,
false,
"deepskyblue",
},
[135204] = {
true,
false,
"honeydew",
},
[205158] = {
true,
false,
"mediumpurple",
},
[168156] = {
true,
false,
"fuchsia",
},
[129369] = {
true,
false,
"lightsalmon",
},
[97720] = {
true,
false,
"fuchsia",
},
[127106] = {
false,
false,
"peru",
},
[136186] = {
true,
false,
"honeydew",
},
[173190] = {
true,
false,
"deepskyblue",
},
[183033] = {
true,
false,
"mediumpurple",
},
[187768] = {
true,
false,
"deepskyblue",
},
[160495] = {
true,
false,
"deepskyblue",
},
[83846] = {
true,
false,
"mediumpurple",
},
[81864] = {
true,
false,
"blue",
},
[200387] = {
true,
false,
"mediumpurple",
},
[138281] = {
true,
false,
"mediumpurple",
},
[44404] = {
true,
false,
"fuchsia",
},
[153882] = {
true,
false,
"deepskyblue",
},
[178142] = {
true,
false,
"deepskyblue",
},
[134701] = {
true,
false,
"fuchsia",
},
[179841] = {
true,
false,
"deepskyblue",
},
[151325] = {
true,
false,
"fuchsia",
},
[128967] = {
true,
false,
"palegreen",
},
[84550] = {
true,
false,
"mediumpurple",
},
[189266] = {
true,
false,
"deepskyblue",
},
[114783] = {
true,
false,
"deepskyblue",
},
[189816] = {
true,
false,
"deepskyblue",
},
[99192] = {
true,
false,
"mediumpurple",
},
[91008] = {
true,
false,
"deepskyblue",
},
[168717] = {
true,
false,
"deepskyblue",
},
[144293] = {
true,
false,
"mediumpurple",
},
[196045] = {
true,
false,
"deepskyblue",
},
[183423] = {
true,
false,
"deepskyblue",
},
[165137] = {
true,
false,
"mediumpurple",
},
[187771] = {
true,
false,
"blue",
},
[180335] = {
true,
false,
"deepskyblue",
},
[98681] = {
true,
false,
"blue",
},
[168718] = {
true,
false,
"blue",
},
[144294] = {
true,
false,
"deepskyblue",
},
[184319] = {
true,
false,
"fuchsia",
},
[165010] = {
true,
false,
"mediumpurple",
},
[137517] = {
true,
false,
"peru",
},
[81522] = {
true,
false,
"mediumpurple",
},
[137716] = {
false,
false,
"blue",
},
[134417] = {
true,
false,
"gold",
},
[40577] = {
true,
false,
"mediumpurple",
},
[136076] = {
true,
false,
"lightcoral",
},
[135052] = {
true,
false,
"WARRIOR",
},
[183425] = {
true,
false,
"blue",
},
[191847] = {
true,
false,
"deepskyblue",
},
[105715] = {
true,
false,
"blue",
},
[205384] = {
true,
false,
"fuchsia",
},
[127111] = {
true,
false,
"deepskyblue",
},
[100527] = {
true,
false,
"fuchsia",
},
[98810] = {
true,
false,
"mediumpurple",
},
[205804] = {
true,
false,
"mediumpurple",
},
[179334] = {
true,
false,
"fuchsia",
},
[173016] = {
true,
false,
"deepskyblue",
},
[132532] = {
true,
false,
"palegreen",
},
[190404] = {
true,
false,
"mediumpurple",
},
[139949] = {
true,
false,
"honeydew",
},
[135474] = {
true,
false,
"blue",
},
[130012] = {
true,
false,
"fuchsia",
},
[163862] = {
true,
false,
"blue",
},
[214117] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"mediumpurple",
},
[178139] = {
true,
false,
"mediumpurple",
},
[91007] = {
false,
false,
"fuchsia",
},
[179847] = {
true,
false,
"fuchsia",
},
[40765] = {
true,
false,
"mediumpurple",
},
[144298] = {
true,
false,
"blue",
},
[187969] = {
true,
false,
"deepskyblue",
},
[104246] = {
true,
false,
"blue",
},
[137521] = {
true,
false,
"cornflowerblue",
},
[176523] = {
true,
false,
"mediumpurple",
},
[133685] = {
true,
false,
"deepskyblue",
},
[213607] = {
true,
false,
"WARRIOR",
},
[190206] = {
true,
false,
"blue",
},
[180104] = {
true,
false,
"deepskyblue",
},
[45912] = {
true,
false,
"deepskyblue",
},
[114796] = {
true,
false,
"blue",
},
[133430] = {
true,
false,
"cornflowerblue",
},
[205265] = {
true,
false,
"WARRIOR",
},
[96574] = {
true,
false,
"mediumpurple",
},
[75979] = {
true,
false,
"fuchsia",
},
[92610] = {
true,
false,
"fuchsia",
},
[184581] = {
true,
false,
"fuchsia",
},
[84554] = {
true,
false,
"fuchsia",
},
[198326] = {
true,
false,
"mediumpurple",
},
[206064] = {
true,
false,
"deepskyblue",
},
[129758] = {
true,
false,
"fuchsia",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
false,
false,
"blue",
},
[126848] = {
true,
false,
"deepskyblue",
},
[102232] = {
true,
false,
"fuchsia",
},
[137713] = {
true,
false,
"paleturquoise",
},
[164506] = {
true,
false,
"blue",
},
[100539] = {
true,
false,
"blue",
},
[154020] = {
true,
false,
"deepskyblue",
},
[194745] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"blue",
},
[191232] = {
true,
false,
"blue",
},
[98813] = {
true,
false,
"deepskyblue",
},
[165913] = {
true,
false,
"fuchsia",
},
[45922] = {
true,
false,
"fuchsia",
},
[192767] = {
true,
false,
"mediumpurple",
},
[196203] = {
true,
false,
"deepskyblue",
},
[208438] = {
true,
false,
"deepskyblue",
},
[114542] = {
true,
false,
"blue",
},
[184131] = {
true,
false,
"deepskyblue",
},
[186246] = {
true,
false,
"deepskyblue",
},
[115757] = {
true,
false,
"mediumpurple",
},
[155812] = {
true,
false,
"blue",
},
[191164] = {
true,
false,
"fuchsia",
},
[96512] = {
true,
false,
"mediumpurple",
},
[137511] = {
true,
false,
"navajowhite",
},
[97197] = {
true,
false,
"deepskyblue",
},
[168934] = {
true,
false,
"fuchsia",
},
[178171] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"deepskyblue",
},
[207969] = {
true,
false,
"fuchsia",
},
[206068] = {
true,
false,
"WARRIOR",
},
[166299] = {
true,
false,
"fuchsia",
},
[44566] = {
true,
false,
"mediumpurple",
},
[177808] = {
true,
false,
"mediumpurple",
},
[174210] = {
true,
false,
"deepskyblue",
},
[190340] = {
true,
false,
"deepskyblue",
},
[136249] = {
true,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[194816] = {
true,
false,
"mediumpurple",
},
[77006] = {
false,
false,
"mediumpurple",
},
[204206] = {
true,
false,
"mediumpurple",
},
[164510] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[206070] = {
true,
false,
"mediumpurple",
},
[167963] = {
true,
false,
"blue",
},
[98970] = {
true,
false,
"mediumpurple",
},
[180495] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"deepskyblue",
},
[173044] = {
true,
false,
"deepskyblue",
},
[40936] = {
true,
false,
"mediumpurple",
},
[204536] = {
true,
false,
"blue",
},
[190342] = {
true,
false,
"fuchsia",
},
[167964] = {
true,
false,
"fuchsia",
},
[122984] = {
true,
false,
"mediumpurple",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"deepskyblue",
},
[194487] = {
true,
false,
"deepskyblue",
},
[196576] = {
true,
false,
"fuchsia",
},
[126919] = {
true,
false,
"blue",
},
[208440] = {
true,
false,
"mediumpurple",
},
[165919] = {
true,
false,
"mediumpurple",
},
[178630] = {
true,
false,
"deepskyblue",
},
[195842] = {
true,
false,
"deepskyblue",
},
[186107] = {
true,
false,
"fuchsia",
},
[104251] = {
true,
false,
"fuchsia",
},
[186124] = {
true,
false,
"deepskyblue",
},
[45572] = {
true,
false,
"fuchsia",
},
[195399] = {
true,
false,
"fuchsia",
},
[101438] = {
true,
false,
"blue",
},
[122971] = {
true,
false,
"mediumpurple",
},
[162038] = {
true,
false,
"mediumpurple",
},
[168932] = {
true,
false,
"gold",
},
[156157] = {
true,
false,
"blue",
},
[167967] = {
true,
false,
"blue",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"blue",
},
[184335] = {
true,
false,
"fuchsia",
},
[100991] = {
true,
false,
"fuchsia",
},
[189706] = {
true,
false,
"yellow",
},
[91002] = {
true,
false,
"fuchsia",
},
[165410] = {
true,
false,
"mediumpurple",
},
[205435] = {
true,
false,
"mediumpurple",
},
[163620] = {
true,
false,
"blue",
},
[205691] = {
true,
false,
"blue",
},
[98370] = {
true,
false,
"fuchsia",
},
[197219] = {
true,
false,
"mediumpurple",
},
[193799] = {
true,
false,
"fuchsia",
},
[164737] = {
true,
false,
"fuchsia",
},
[179733] = {
true,
false,
"fuchsia",
},
[92538] = {
true,
false,
"fuchsia",
},
[171805] = {
true,
false,
"blue",
},
[133432] = {
true,
false,
"gold",
},
[168992] = {
true,
false,
"deepskyblue",
},
[134338] = {
true,
false,
"navajowhite",
},
[204030] = {
true,
false,
"WARRIOR",
},
[45477] = {
true,
false,
"blue",
},
[196102] = {
true,
false,
"blue",
},
[177816] = {
true,
false,
"deepskyblue",
},
[98243] = {
true,
false,
"mediumpurple",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"mediumpurple",
},
[114803] = {
true,
false,
"deepskyblue",
},
[40586] = {
true,
false,
"mediumpurple",
},
[205408] = {
true,
false,
"deepskyblue",
},
[81236] = {
true,
false,
"deepskyblue",
},
[130404] = {
true,
false,
"fuchsia",
},
[189314] = {
false,
false,
"white",
},
[83025] = {
true,
false,
"blue",
},
[135235] = {
true,
false,
"goldenrod",
},
[82579] = {
true,
false,
"deepskyblue",
},
[200126] = {
true,
false,
"fuchsia",
},
[131527] = {
true,
false,
"mediumpurple",
},
[165414] = {
true,
false,
"deepskyblue",
},
[40935] = {
true,
false,
"deepskyblue",
},
[193291] = {
true,
false,
"fuchsia",
},
[151476] = {
true,
false,
"mediumpurple",
},
[114804] = {
true,
false,
"blue",
},
[155824] = {
true,
false,
"blue",
},
[82039] = {
true,
false,
"blue",
},
[175517] = {
true,
false,
"blue",
},
[187154] = {
true,
false,
"deepskyblue",
},
[126845] = {
true,
false,
"fuchsia",
},
[194315] = {
true,
false,
"mediumpurple",
},
[98081] = {
true,
false,
"fuchsia",
},
[136330] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"mediumpurple",
},
[163618] = {
true,
false,
"blue",
},
[206066] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"mediumpurple",
},
[193293] = {
true,
false,
"mediumpurple",
},
[136005] = {
false,
false,
"blue",
},
[107288] = {
true,
false,
"deepskyblue",
},
[163882] = {
true,
false,
"mediumpurple",
},
[133870] = {
true,
false,
"fuchsia",
},
[195851] = {
true,
false,
"blue",
},
[134599] = {
true,
false,
"gold",
},
[201222] = {
true,
false,
"mediumpurple",
},
[173729] = {
true,
false,
"fuchsia",
},
[136006] = {
false,
false,
"blue",
},
[134139] = {
true,
false,
"gold",
},
[135239] = {
true,
false,
"paleturquoise",
},
[98949] = {
true,
false,
"mediumpurple",
},
[56792] = {
true,
false,
"fuchsia",
},
[134600] = {
true,
false,
"peru",
},
[201223] = {
true,
false,
"blue",
},
[111068] = {
true,
false,
"mediumpurple",
},
[189901] = {
true,
false,
"mediumpurple",
},
[180323] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"blue",
},
[179852] = {
true,
false,
"blue",
},
[114632] = {
true,
false,
"deepskyblue",
},
[180348] = {
true,
false,
"blue",
},
[156212] = {
true,
false,
"deepskyblue",
},
[184582] = {
true,
false,
"deepskyblue",
},
[186242] = {
true,
false,
"blue",
},
[191230] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"peru",
},
[102019] = {
true,
false,
"fuchsia",
},
[101437] = {
true,
false,
"fuchsia",
},
[40788] = {
true,
false,
"mediumpurple",
},
[129529] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"deepskyblue",
},
[130488] = {
true,
false,
"lightsalmon",
},
[154014] = {
true,
false,
"deepskyblue",
},
[176521] = {
true,
false,
"blue",
},
[100485] = {
true,
false,
"deepskyblue",
},
[192786] = {
true,
false,
"blue",
},
[183707] = {
true,
false,
"deepskyblue",
},
[167965] = {
true,
false,
"blue",
},
[133836] = {
true,
false,
"blue",
},
[182045] = {
true,
false,
"fuchsia",
},
[86547] = {
true,
false,
"blue",
},
[137516] = {
true,
false,
"lightsalmon",
},
[155831] = {
true,
false,
"fuchsia",
},
[168594] = {
true,
false,
"mediumpurple",
},
[206214] = {
true,
false,
"mediumpurple",
},
[80936] = {
true,
false,
"blue",
},
[199595] = {
true,
false,
"mediumpurple",
},
[168747] = {
true,
false,
"fuchsia",
},
[136139] = {
true,
false,
"peru",
},
[116549] = {
true,
false,
"deepskyblue",
},
[100486] = {
true,
false,
"fuchsia",
},
[163121] = {
true,
false,
"blue",
},
[59546] = {
true,
false,
"deepskyblue",
},
[59873] = {
true,
false,
"mediumpurple",
},
[98696] = {
true,
false,
"mediumpurple",
},
[156245] = {
true,
false,
"mediumpurple",
},
[190359] = {
true,
false,
"blue",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"blue",
},
[162099] = {
true,
false,
"fuchsia",
},
[95779] = {
true,
false,
"mediumpurple",
},
[195928] = {
true,
false,
"mediumpurple",
},
[134990] = {
true,
false,
"honeydew",
},
[115640] = {
true,
false,
"fuchsia",
},
[138187] = {
true,
false,
"deepskyblue",
},
[169927] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[87252] = {
true,
false,
"mediumpurple",
},
[131864] = {
true,
false,
"mediumpurple",
},
[196115] = {
true,
false,
"fuchsia",
},
[156244] = {
true,
false,
"mediumpurple",
},
[137830] = {
true,
false,
"deepskyblue",
},
[187155] = {
true,
false,
"deepskyblue",
},
[189466] = {
true,
false,
"mediumpurple",
},
[45928] = {
true,
false,
"blue",
},
[131436] = {
true,
false,
"mediumpurple",
},
[176551] = {
true,
false,
"deepskyblue",
},
[131667] = {
true,
false,
"mediumpurple",
},
[144071] = {
true,
false,
"gold",
},
[138061] = {
false,
false,
"magenta",
},
[190362] = {
true,
false,
"fuchsia",
},
[189467] = {
true,
false,
"blue",
},
[167113] = {
true,
false,
"blue",
},
[192481] = {
true,
false,
"fuchsia",
},
[59547] = {
true,
false,
"mediumpurple",
},
[196117] = {
true,
false,
"mediumpurple",
},
[208521] = {
true,
false,
"deepskyblue",
},
[115642] = {
true,
false,
"blue",
},
[189340] = {
true,
false,
"mediumpurple",
},
[189235] = {
true,
false,
"fuchsia",
},
[131819] = {
true,
false,
"deepskyblue",
},
[163126] = {
true,
false,
"deepskyblue",
},
[193944] = {
true,
false,
"deepskyblue",
},
[131669] = {
true,
false,
"WARRIOR",
},
[81819] = {
true,
false,
"deepskyblue",
},
[138063] = {
false,
false,
"blue",
},
[179388] = {
true,
false,
"deepskyblue",
},
[163894] = {
true,
false,
"blue",
},
[198933] = {
true,
false,
"mediumpurple",
},
[129517] = {
true,
false,
"fuchsia",
},
[82597] = {
true,
false,
"fuchsia",
},
[131670] = {
true,
false,
"palegreen",
},
[152898] = {
true,
false,
"fuchsia",
},
[138064] = {
false,
false,
"blue",
},
[168882] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"deepskyblue",
},
[171184] = {
true,
false,
"mediumpurple",
},
[188703] = {
true,
false,
"yellow",
},
[195930] = {
true,
false,
"mediumpurple",
},
[184023] = {
true,
false,
"blue",
},
[168627] = {
true,
false,
"deepskyblue",
},
[204560] = {
true,
false,
"fuchsia",
},
[94224] = {
true,
false,
"fuchsia",
},
[189471] = {
true,
false,
"deepskyblue",
},
[186658] = {
true,
false,
"deepskyblue",
},
[192796] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"deepskyblue",
},
[186229] = {
true,
false,
"mediumpurple",
},
[98691] = {
true,
false,
"blue",
},
[179842] = {
true,
false,
"fuchsia",
},
[86552] = {
true,
false,
"deepskyblue",
},
[189472] = {
true,
false,
"deepskyblue",
},
[169924] = {
true,
false,
"mediumpurple",
},
[115388] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"mediumpurple",
},
[184331] = {
true,
false,
"mediumpurple",
},
[131817] = {
false,
false,
"magenta",
},
[180864] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"deepskyblue",
},
[176573] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"deepskyblue",
},
[188067] = {
true,
false,
"blue",
},
[156226] = {
true,
false,
"deepskyblue",
},
[167607] = {
true,
false,
"mediumpurple",
},
[213770] = {
true,
false,
"mediumpurple",
},
[168886] = {
true,
false,
"deepskyblue",
},
[134232] = {
true,
false,
"goldenrod",
},
[45930] = {
true,
false,
"deepskyblue",
},
[130661] = {
true,
false,
"lightgreen",
},
[133593] = {
true,
false,
"honeydew",
},
[194316] = {
true,
false,
"mediumpurple",
},
[40943] = {
true,
false,
"fuchsia",
},
[130485] = {
true,
false,
"peru",
},
[190370] = {
true,
false,
"deepskyblue",
},
[166969] = {
true,
false,
"deepskyblue",
},
[170690] = {
true,
false,
"blue",
},
[192800] = {
true,
false,
"blue",
},
[197406] = {
true,
false,
"fuchsia",
},
[59552] = {
true,
false,
"fuchsia",
},
[203799] = {
true,
false,
"deepskyblue",
},
[152905] = {
true,
false,
"fuchsia",
},
[190371] = {
true,
false,
"blue",
},
[166970] = {
true,
false,
"blue",
},
[82590] = {
true,
false,
"blue",
},
[199717] = {
true,
false,
"mediumpurple",
},
[167876] = {
true,
false,
"fuchsia",
},
[131677] = {
true,
false,
"deepskyblue",
},
[128434] = {
true,
false,
"fuchsia",
},
[189478] = {
true,
false,
"mediumpurple",
},
[172981] = {
true,
false,
"blue",
},
[166971] = {
true,
false,
"fuchsia",
},
[127799] = {
true,
false,
"blue",
},
[186664] = {
true,
false,
"deepskyblue",
},
[163520] = {
true,
false,
"mediumpurple",
},
[164414] = {
true,
false,
"deepskyblue",
},
[133852] = {
true,
false,
"blue",
},
[180015] = {
true,
false,
"blue",
},
[190373] = {
true,
false,
"deepskyblue",
},
[164926] = {
true,
false,
"fuchsia",
},
[134364] = {
true,
false,
"honeydew",
},
[166589] = {
true,
false,
"fuchsia",
},
[206230] = {
true,
false,
"fuchsia",
},
[199325] = {
true,
false,
"deepskyblue",
},
[113537] = {
true,
false,
"mediumpurple",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"mediumpurple",
},
[165805] = {
true,
false,
"mediumpurple",
},
[190381] = {
true,
false,
"fuchsia",
},
[166301] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"mediumpurple",
},
[192788] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[128435] = {
true,
false,
"maroon",
},
[194467] = {
true,
false,
"blue",
},
[201756] = {
true,
false,
"fuchsia",
},
[86684] = {
true,
false,
"deepskyblue",
},
[76518] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"deepskyblue",
},
[177716] = {
true,
false,
"deepskyblue",
},
[167998] = {
true,
false,
"mediumpurple",
},
[101326] = {
true,
false,
"fuchsia",
},
[186284] = {
true,
false,
"mediumpurple",
},
[164929] = {
true,
false,
"blue",
},
[136353] = {
true,
false,
"royalblue",
},
[136541] = {
true,
false,
"deepskyblue",
},
[192934] = {
true,
false,
"blue",
},
[99664] = {
true,
false,
"fuchsia",
},
[133345] = {
true,
false,
"goldenrod",
},
[135007] = {
true,
false,
"gold",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
true,
false,
"maroon",
},
[45932] = {
true,
false,
"fuchsia",
},
[102094] = {
true,
false,
"deepskyblue",
},
[84767] = {
true,
false,
"mediumpurple",
},
[96587] = {
true,
false,
"deepskyblue",
},
[163524] = {
true,
false,
"fuchsia",
},
[114626] = {
true,
false,
"fuchsia",
},
[168384] = {
true,
false,
"blue",
},
[131812] = {
true,
false,
"fuchsia",
},
[192680] = {
true,
false,
"mediumpurple",
},
[195877] = {
true,
false,
"fuchsia",
},
[205212] = {
true,
false,
"fuchsia",
},
[198308] = {
true,
false,
"mediumpurple",
},
[98706] = {
true,
false,
"mediumpurple",
},
[131863] = {
true,
false,
"mediumpurple",
},
[203678] = {
true,
false,
"mediumpurple",
},
[177817] = {
true,
false,
"blue",
},
[101008] = {
true,
false,
"fuchsia",
},
[102095] = {
true,
false,
"fuchsia",
},
[175992] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"deepskyblue",
},
[102287] = {
true,
false,
"mediumpurple",
},
[114627] = {
true,
false,
"blue",
},
[168109] = {
true,
false,
"deepskyblue",
},
[184580] = {
true,
false,
"blue",
},
[194469] = {
true,
false,
"blue",
},
[101637] = {
true,
false,
"mediumpurple",
},
[165824] = {
true,
false,
"fuchsia",
},
[205337] = {
true,
false,
"fuchsia",
},
[196263] = {
true,
false,
"deepskyblue",
},
[165556] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"blue",
},
[194317] = {
true,
false,
"mediumpurple",
},
[114624] = {
true,
false,
"mediumpurple",
},
[115395] = {
true,
false,
"mediumpurple",
},
[167612] = {
true,
false,
"blue",
},
[104270] = {
true,
false,
"mediumpurple",
},
[80805] = {
true,
false,
"mediumpurple",
},
[184107] = {
true,
false,
"mediumpurple",
},
[205727] = {
true,
false,
"deepskyblue",
},
[197671] = {
true,
false,
"blue",
},
[138465] = {
true,
false,
"lightcoral",
},
[135258] = {
false,
false,
"peru",
},
[134629] = {
true,
false,
"navajowhite",
},
[155830] = {
true,
false,
"deepskyblue",
},
[198311] = {
true,
false,
"mediumpurple",
},
[100818] = {
true,
false,
"fuchsia",
},
[157634] = {
true,
false,
"blue",
},
[208698] = {
true,
false,
"fuchsia",
},
[165763] = {
true,
false,
"deepskyblue",
},
[206065] = {
true,
false,
"fuchsia",
},
[155090] = {
true,
false,
"deepskyblue",
},
[175550] = {
true,
false,
"fuchsia",
},
[190128] = {
true,
false,
"yellow",
},
[114629] = {
true,
false,
"blue",
},
[187315] = {
true,
false,
"blue",
},
[186420] = {
true,
false,
"deepskyblue",
},
[167111] = {
true,
false,
"deepskyblue",
},
[136549] = {
true,
false,
"lightcoral",
},
[188026] = {
true,
false,
"fuchsia",
},
[151127] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[189234] = {
true,
false,
"mediumpurple",
},
[129527] = {
true,
false,
"deepskyblue",
},
[168007] = {
true,
false,
"blue",
},
[98965] = {
true,
false,
"mediumpurple",
},
[101075] = {
true,
false,
"fuchsia",
},
[176575] = {
true,
false,
"deepskyblue",
},
[169905] = {
true,
false,
"blue",
},
[136934] = {
true,
false,
"navajowhite",
},
[176959] = {
true,
false,
"deepskyblue",
},
[80935] = {
true,
false,
"deepskyblue",
},
[136295] = {
true,
false,
"peru",
},
[169159] = {
true,
false,
"gold",
},
[133482] = {
true,
false,
"maroon",
},
[59553] = {
true,
false,
"mediumpurple",
},
[155221] = {
true,
false,
"deepskyblue",
},
[96664] = {
true,
false,
"blue",
},
[144296] = {
true,
false,
"mediumpurple",
},
[141283] = {
true,
false,
"navajowhite",
},
[197905] = {
true,
false,
"deepskyblue",
},
[185528] = {
true,
false,
"blue",
},
[185656] = {
true,
false,
"fuchsia",
},
[210336] = {
false,
false,
"WARRIOR",
},
[104273] = {
true,
false,
"mediumpurple",
},
[164557] = {
true,
false,
"mediumpurple",
},
[102788] = {
true,
false,
"mediumpurple",
},
[141284] = {
true,
false,
"gold",
},
[134251] = {
true,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[129553] = {
true,
false,
"mediumpurple",
},
[81432] = {
true,
false,
"deepskyblue",
},
[169861] = {
true,
false,
"blue",
},
[169426] = {
true,
false,
"gold",
},
[187192] = {
true,
false,
"mediumpurple",
},
[141285] = {
true,
false,
"lightgreen",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[165911] = {
true,
false,
"fuchsia",
},
[189878] = {
true,
false,
"yellow",
},
[104274] = {
true,
false,
"mediumpurple",
},
[131823] = {
true,
false,
"mediumpurple",
},
[111563] = {
true,
false,
"blue",
},
[114544] = {
true,
false,
"fuchsia",
},
[115765] = {
true,
false,
"fuchsia",
},
[114584] = {
true,
false,
"mediumpurple",
},
[180429] = {
true,
false,
"mediumpurple",
},
[168396] = {
true,
false,
"mediumpurple",
},
[86372] = {
true,
false,
"blue",
},
[131824] = {
true,
false,
"mediumpurple",
},
[179010] = {
true,
false,
"deepskyblue",
},
[95771] = {
true,
false,
"deepskyblue",
},
[186122] = {
true,
false,
"blue",
},
[151773] = {
true,
false,
"blue",
},
[134331] = {
true,
false,
"gold",
},
[171376] = {
true,
false,
"blue",
},
[104275] = {
true,
false,
"mediumpurple",
},
[131825] = {
true,
false,
"mediumpurple",
},
[114633] = {
true,
false,
"mediumpurple",
},
[80938] = {
true,
false,
"mediumpurple",
},
[88163] = {
true,
false,
"fuchsia",
},
[130400] = {
true,
false,
"deepskyblue",
},
[157017] = {
true,
false,
"blue",
},
[169421] = {
true,
false,
"gold",
},
[170572] = {
true,
false,
"blue",
},
[164562] = {
true,
false,
"fuchsia",
},
[135234] = {
true,
false,
"WARRIOR",
},
[186208] = {
true,
false,
"fuchsia",
},
[175861] = {
true,
false,
"fuchsia",
},
[133361] = {
true,
false,
"fuchsia",
},
[162133] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"WARRIOR",
},
[190207] = {
true,
false,
"fuchsia",
},
[164563] = {
true,
false,
"blue",
},
[192333] = {
true,
false,
"mediumpurple",
},
[45919] = {
true,
false,
"mediumpurple",
},
[179269] = {
true,
false,
"fuchsia",
},
[168418] = {
true,
false,
"deepskyblue",
},
[171341] = {
true,
false,
"deepskyblue",
},
[59555] = {
true,
false,
"fuchsia",
},
[178008] = {
true,
false,
"yellow",
},
[114334] = {
true,
false,
"mediumpurple",
},
[129370] = {
true,
false,
"gold",
},
[84520] = {
true,
false,
"mediumpurple",
},
[187897] = {
true,
false,
"mediumpurple",
},
[165076] = {
true,
false,
"blue",
},
[134514] = {
true,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"mediumpurple",
},
[133436] = {
true,
false,
"gold",
},
[189886] = {
true,
false,
"gold",
},
[65317] = {
true,
false,
"mediumpurple",
},
[176598] = {
true,
false,
"blue",
},
[185537] = {
true,
false,
"blue",
},
[171343] = {
true,
false,
"fuchsia",
},
[169425] = {
true,
false,
"gold",
},
[115019] = {
true,
false,
"deepskyblue",
},
[168658] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"deepskyblue",
},
[201788] = {
true,
false,
"fuchsia",
},
[150168] = {
true,
false,
"fuchsia",
},
[114316] = {
true,
false,
"deepskyblue",
},
[75506] = {
true,
false,
"deepskyblue",
},
[192955] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"deepskyblue",
},
[184132] = {
true,
false,
"fuchsia",
},
[198998] = {
true,
false,
"mediumpurple",
},
[198995] = {
true,
false,
"mediumpurple",
},
[137458] = {
true,
false,
"deepskyblue",
},
[206063] = {
true,
false,
"WARRIOR",
},
[131847] = {
true,
false,
"WARRIOR",
},
[115020] = {
true,
false,
"mediumpurple",
},
[122972] = {
true,
false,
"deepskyblue",
},
[131849] = {
true,
false,
"blue",
},
[162039] = {
true,
false,
"deepskyblue",
},
[195265] = {
true,
false,
"mediumpurple",
},
[114317] = {
true,
false,
"deepskyblue",
},
[205366] = {
true,
false,
"WARRIOR",
},
[169428] = {
true,
false,
"gold",
},
[177891] = {
true,
false,
"mediumpurple",
},
[150160] = {
true,
false,
"mediumpurple",
},
[212778] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"blue",
},
[91000] = {
true,
false,
"mediumpurple",
},
[183495] = {
true,
false,
"mediumpurple",
},
[134012] = {
true,
false,
"lightsalmon",
},
[169429] = {
true,
false,
"gold",
},
[180336] = {
true,
false,
"deepskyblue",
},
[184300] = {
true,
false,
"mediumpurple",
},
[176974] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"mediumpurple",
},
[127879] = {
true,
false,
"blue",
},
[198999] = {
true,
false,
"mediumpurple",
},
[168310] = {
true,
false,
"fuchsia",
},
[169430] = {
true,
false,
"gold",
},
[205363] = {
true,
false,
"deepskyblue",
},
[131850] = {
true,
false,
"fuchsia",
},
[39960] = {
true,
false,
"WARRIOR",
},
[134137] = {
true,
false,
"deepskyblue",
},
[135048] = {
true,
false,
"WARRIOR",
},
[183497] = {
true,
false,
"blue",
},
[164707] = {
true,
false,
"mediumpurple",
},
[168942] = {
true,
false,
"blue",
},
[196671] = {
true,
false,
"mediumpurple",
},
[185032] = {
true,
false,
"mediumpurple",
},
[84400] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"mediumpurple",
},
[129600] = {
true,
false,
"fuchsia",
},
[168153] = {
true,
false,
"fuchsia",
},
[115406] = {
true,
false,
"deepskyblue",
},
[40923] = {
true,
false,
"WARRIOR",
},
[195135] = {
true,
false,
"fuchsia",
},
[80816] = {
true,
false,
"deepskyblue",
},
[199124] = {
true,
false,
"deepskyblue",
},
},
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["ui_parent_cast_strata"] = "MEDIUM",
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["extra_icon_auras_mine"] = {
["224991"] = true,
},
["enable_masque_support"] = true,
["aura_stack_font"] = "Accidental Presidency",
["patch_version"] = 33,
["no_spellname_length_limit"] = true,
["range_check_in_range_or_target_alpha"] = 0.89999997615814,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["enemy_ic"] = true,
["friendly_ic"] = true,
["blizz_healthbar_ic"] = true,
["enemy_ooc"] = true,
["blizz_healthbar_ooc"] = true,
["friendly_ooc"] = true,
},
["number_region_first_run"] = true,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1671113883,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["Revision"] = 667,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a small animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["SpellIds"] = {
376851,
396044,
381517,
397801,
208165,
392576,
198750,
387843,
211299,
198595,
198962,
156722,
384933,
238648,
154175,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1671125813,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 112,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Enabled"] = true,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1671113819,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 640,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["SpellIds"] = {
398151,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
193826,
192158,
372735,
373017,
392488,
},
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1671113820,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["Revision"] = 372,
["semver"] = "",
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["Author"] = "Tercioo-Sylvanas",
["Prio"] = 99,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "Add the debuff name in the trigger box.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.40392156862745,
0.003921568627451,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.32156862745098,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
["animSpeed"] = 0.40156242251396,
["arrowAlpha"] = 1,
["desaturateArrow"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1698069461,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 654,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["SpellIds"] = {
375943,
384699,
153501,
153686,
219488,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
198888,
199805,
191508,
152792,
153395,
317898,
199050,
257426,
209495,
257870,
265540,
260894,
272457,
272609,
188169,
183088,
411012,
382712,
377559,
376170,
393432,
384524,
374563,
375348,
375327,
375351,
369563,
369061,
375727,
382708,
375251,
372311,
373762,
373742,
372201,
377204,
170411,
169179,
200768,
198379,
204667,
200261,
271174,
265372,
413529,
407159,
418435,
401482,
419351,
404917,
416139,
164357,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone || Whiiskeyz",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1671718672,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Revision"] = 273,
["Options"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Prio"] = 99,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = 1029718,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1671113869,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 140,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Enabled"] = true,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
},
["Desc"] = "Show the energy amount above the nameplate",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["useCastbarColor"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1671116280,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1235,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Prio"] = 36,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
192158,
200901,
192018,
193826,
202494,
198077,
196497,
196838,
198077,
193660,
193659,
384194,
392451,
392924,
397889,
209413,
207980,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1671718679,
["url"] = "",
["Icon"] = 841383,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 272,
["semver"] = "",
["Enabled"] = true,
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Author"] = "Tecno-Azralon",
["Prio"] = 99,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Fixate On You [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["Options"] = {
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1671106492,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 48,
["Options"] = {
},
["Author"] = "抹了油的大叔-白银之手",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Enabled"] = false,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Name"] = "NameplaterColor with Special Buff ID",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
277242,
},
["Desc"] = "NameplaterColor with Special Buff ID",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1671718669,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 537,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["SpellIds"] = {
240446,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = 2175503,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Time"] = 1671113852,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["Icon"] = 135024,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["Revision"] = 79,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Name"] = "Color Change [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
},
["Desc"] = "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
["NpcNames"] = {
"141851",
},
},
{
["ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Time"] = 1668234765,
["Temp_ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["Icon"] = 133006,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["Revision"] = 47,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["Enabled"] = false,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Name"] = "Aura - Border Color [Plater]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
},
["Desc"] = "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1671113819,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["Revision"] = 382,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.28627450980392,
0.003921568627451,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Warning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Time Left Critical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.87058823529412,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.074509803921569,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
["Time"] = 1671113863,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --custom frames\n    unitFrame.JadeFireGlowEffect = unitFrame.JadeFireGlowEffect or Plater.CreateNameplateGlow (unitFrame.healthBar)\n    unitFrame.JadeFireGlowEffect:SetOffset (-27, 25, 6, -8)\n    unitFrame.JadeFireGlowEffect:Hide()\n    \nend\n\n\n",
["Icon"] = 132221,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Hide() \nend\n\n\n",
["Revision"] = 37,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:Show() \nend\n\n\n",
["Enabled"] = true,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.JadeFireGlowEffect:SetAlpha (.5)\nend\n\n\n",
["Name"] = "Jadefire [BOD] - Fire Shield",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
286425,
},
["Desc"] = "Alert when the unit has the Fire Shield to be broken.",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["useCastbarColor"] = true,
["timerList"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1698444890,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1219,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["SpellIds"] = {
387559,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1672964240,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 695,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.431372,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.6156862745098,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
192158,
372107,
388923,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
["targetFrameHeight"] = 9,
["targetFrameWidth"] = 52,
["targetNameSize"] = 9,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1671113880,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["Revision"] = 880,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "Option 27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option28",
["Value"] = "Target Options",
["Name"] = "Option 28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetNameSize",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 4,
["Key"] = "colorByClass",
["Value"] = true,
["Name"] = "Use Class Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgColor",
["Value"] = {
0,
0,
0,
0.98467203229666,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Key"] = "targetFrameWidth",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Width",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["SpellIds"] = {
198934,
373395,
387411,
198595,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1671113873,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["url"] = "",
["NpcNames"] = {
"95834",
"59555",
"196115",
"191164",
"75451",
"75966",
"192955",
"104300",
"95834",
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Revision"] = 78,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1671113852,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["Revision"] = 212,
["Options"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Countdown",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1671113863,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["url"] = "",
["NpcNames"] = {
"174773",
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["Revision"] = 191,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.50588235294118,
0.070588235294118,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254902,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "switchTargetName",
["Value"] = true,
["Name"] = "Show Target instead of Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useTargetingColor",
["Value"] = true,
["Name"] = "Change Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetingColor",
["Value"] = {
0.070588235294118,
0.61960784313725,
0,
1,
},
["Name"] = "Color if targeting You",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["semver"] = "",
["Icon"] = 135945,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1671113866,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 239,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["semver"] = "",
["Icon"] = 136048,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1671212972,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 72,
["Options"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Prio"] = 99,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = 610472,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1671113862,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Revision"] = 35,
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0,
0.55686274509804,
0.035294117647059,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Prio"] = 99,
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.GlowOptions = {\n        glowType = \"ants\",\n        N = 7, -- number of lines. Defaul value is 8;\n        frequency = 0.25, -- frequency, set to negative to inverse direction of rotation. Default value is 0.125;\n        scale = 0.85, -- scale of particles\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        key = \"\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\",0, 0)\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    if (scriptTable.config.ChangeTextSize) then\n        if (envTable.OriginalText) then\n            Plater:SetFontSize (self.Text, envTable.OriginalText)\n            envTable.OriginalText = nil\n        end\n    end\n    \n    Plater.StopGlow(self, envTable.GlowOptions.glowType)\n    envTable.BackgroundFlash:Stop()\n    unitFrame:StopFrameShake (envTable.FrameShake)    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["CastBarHeightAdd"] = 1.2999999523163,
["ChangeColor"] = false,
["ChangeTextSize"] = false,
["CastbarColor"] = {
1,
0,
0.90196084976196,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    if (scriptTable.config.ChangeColor) then\n        if (envTable._CanInterrupt) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.CastbarColor))\n        else\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.CastbarNoInterruptColor))\n        end\n    end\n    \n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    self:SetHeight (math.ceil(height * scriptTable.config.CastBarHeightAdd))\n    \n    if (scriptTable.config.ChangeTextSize) then\n        if (envTable.OriginalText) then\n            Plater:SetFontSize (self.Text, envTable.OriginalText)\n        end\n        \n        local text = Plater:GetFontSize(self.Text)\n        envTable.OriginalText = text\n        Plater:SetFontSize (self.Text, math.ceil(text * scriptTable.config.CastBarHeightAdd))    \n    end\n    \n    Plater.StartGlow(self, \"white\", envTable.GlowOptions)\n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1698444890,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.GlowOptions = {\n        glowType = \"ants\",\n        N = 7, -- number of lines. Defaul value is 8;\n        frequency = 0.25, -- frequency, set to negative to inverse direction of rotation. Default value is 0.125;\n        scale = 0.85, -- scale of particles\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        key = \"\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\",0, 0)\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["url"] = "https://wago.io/8s7Mcrve2/93",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    if (scriptTable.config.ChangeTextSize) then\n        if (envTable.OriginalText) then\n            Plater:SetFontSize (self.Text, envTable.OriginalText)\n            envTable.OriginalText = nil\n        end\n    end\n    \n    Plater.StopGlow(self, envTable.GlowOptions.glowType)\n    envTable.BackgroundFlash:Stop()\n    unitFrame:StopFrameShake (envTable.FrameShake)    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Revision"] = 3943,
["Options"] = {
{
["Type"] = 4,
["Key"] = "ChangeColor",
["Value"] = false,
["Name"] = "Change Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ChangeTextSize",
["Value"] = false,
["Name"] = "Change Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "CastbarColor",
["Value"] = {
1,
0.26274509803922,
0,
1,
},
["Name"] = "Castbar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "CastbarNoInterruptColor",
["Value"] = {
0.69803921568627,
0.69803921568627,
0.69803921568627,
1,
},
["Name"] = "Castbar No Interrupt Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 1,
["Key"] = "CastBarHeightAdd",
["Value"] = 1.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Castbar Height Scale",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flash, Bounce when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
372634,
228625,
241799,
228280,
227545,
228985,
227529,
229622,
229714,
298669,
297254,
296331,
298718,
301667,
294890,
356031,
355934,
356011,
355974,
345990,
356404,
357509,
349934,
355640,
355642,
347721,
347775,
357029,
357197,
357229,
353835,
350919,
347094,
347958,
347015,
356133,
347149,
357284,
357228,
347091,
308030,
330458,
330822,
353573,
353763,
329908,
320135,
338639,
295932,
295942,
315802,
296372,
353328,
355230,
354490,
294526,
278176,
292942,
326050,
354256,
263344,
354493,
351206,
351649,
351090,
330573,
278182,
277040,
336556,
353621,
302543,
297292,
354240,
351307,
361016,
360856,
343005,
329518,
329181,
355352,
352141,
349805,
352381,
348145,
359134,
351075,
351589,
360451,
365682,
365577,
361513,
365126,
364652,
363130,
365036,
360977,
365295,
363021,
360562,
365033,
360378,
373395,
387411,
397394,
215433,
198934,
192563,
377488,
373932,
152818,
76446,
59544,
69552,
373017,
386181,
192288,
199726,
198750,
398150,
398206,
396640,
377389,
396812,
388392,
386546,
153524,
225100,
209410,
209485,
211401,
211470,
208165,
156718,
384194,
387955,
375596,
384365,
386024,
386025,
376725,
396073,
396018,
397801,
382410,
256060,
258777,
257732,
257784,
281420,
257899,
257736,
265091,
265089,
278755,
260879,
265668,
266106,
278961,
272183,
266201,
272180,
265433,
265487,
202181,
186269,
193585,
88080,
367500,
382474,
377950,
373698,
372711,
374544,
385029,
381770,
374339,
374020,
374045,
389486,
384351,
395694,
374706,
385141,
375384,
377384,
377341,
377402,
387619,
369675,
369603,
369823,
369400,
369365,
369411,
377500,
87779,
88186,
410760,
378282,
378281,
395427,
372223,
384161,
383231,
383651,
408805,
164965,
165213,
168082,
427459,
169376,
169375,
169839,
169841,
200630,
200658,
201399,
225568,
225573,
200248,
204896,
227913,
252781,
252923,
259572,
255041,
253562,
255824,
253517,
267824,
264520,
278444,
265407,
264050,
263959,
265368,
264390,
265346,
266035,
260700,
260701,
260698,
265876,
268278,
266225,
411994,
415435,
415773,
415437,
415770,
76820,
76813,
428103,
429176,
428526,
412285,
400180,
412922,
417481,
418202,
418200,
412378,
411300,
412233,
407124,
407121,
164887,
204243,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = 93,
["PlaterCore"] = 1,
["Name"] = "Cast - Important || Whiiskeyz",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if unitFrame.IsSelf or (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then return end\n    \n    if (scriptTable.config.ChangeColor) then\n        if (envTable._CanInterrupt) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.CastbarColor))\n        else\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.CastbarNoInterruptColor))\n        end\n    end\n    \n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    self:SetHeight (math.ceil(height * scriptTable.config.CastBarHeightAdd))\n    \n    if (scriptTable.config.ChangeTextSize) then\n        if (envTable.OriginalText) then\n            Plater:SetFontSize (self.Text, envTable.OriginalText)\n        end\n        \n        local text = Plater:GetFontSize(self.Text)\n        envTable.OriginalText = text\n        Plater:SetFontSize (self.Text, math.ceil(text * scriptTable.config.CastBarHeightAdd))    \n    end\n    \n    Plater.StartGlow(self, \"white\", envTable.GlowOptions)\n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\nend",
["semver"] = "1.0.91",
["Icon"] = 1724000,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0.3 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-32, 30, 7, -9)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1698447309,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0.3 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-32, 30, 7, -9)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Revision"] = 1039,
["semver"] = "",
["Prio"] = 99,
["ignoreWagoUpdate"] = true,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
192158,
192307,
202494,
192158,
196497,
196838,
200901,
192018,
193660,
193660,
198263,
198077,
207278,
207261,
207806,
211464,
207979,
397903,
397897,
373570,
373607,
373364,
214692,
209628,
209676,
209741,
224327,
209667,
209602,
152964,
153094,
153164,
153153,
164974,
207881,
152979,
153067,
153623,
152800,
153804,
165579,
165578,
154175,
154442,
372047,
372794,
372087,
385063,
392642,
392641,
391727,
391726,
395303,
395292,
391724,
392394,
392569,
392570,
392488,
392486,
381525,
381602,
385558,
381605,
385958,
388537,
377004,
377034,
376997,
388796,
388623,
374361,
374343,
388822,
386660,
374582,
374567,
374720,
374731,
374364,
385578,
386781,
387151,
388008,
385331,
384696,
385075,
383823,
38881,
388817,
385916,
388283,
384620,
384316,
376683,
37668,
382670,
392151,
386547,
385339,
386063,
397783,
106856,
106864,
117665,
376644,
376865,
376892,
258773,
255952,
274400,
257739,
274383,
257756,
272402,
258381,
258181,
258199,
257904,
256405,
257402,
257315,
257458,
265081,
265568,
264757,
264603,
260793,
260292,
260333,
266209,
259732,
272592,
269843,
226287,
188114,
183528,
183633,
202108,
202075,
198428,
193376,
193803,
210150,
199629,
199176,
205549,
201983,
200700,
200637,
200732,
200551,
200154,
88056,
410760,
86340,
88194,
87622,
87618,
86911,
382555,
384150,
367503,
382435,
381834,
381694,
381419,
373897,
373024,
383062,
373943,
375065,
385046,
384899,
367521,
384961,
384827,
384529,
385359,
376934,
384353,
373939,
373942,
373915,
384014,
389179,
374823,
385551,
385531,
385181,
391610,
376171,
391634,
386757,
386559,
390290,
388882,
388424,
389875,
387559,
387571,
369811,
369677,
369792,
369853,
369703,
369754,
369465,
372623,
372701,
372719,
369328,
369110,
376049,
376208,
87762,
378818,
378827,
375436,
374365,
372561,
376186,
374471,
373733,
375057,
374704,
379406,
372224,
372296,
373089,
384623,
374586,
374812,
374533,
375957,
381663,
382795,
377473,
377017,
376780,
172578,
169445,
169494,
426500,
427498,
427509,
427510,
169249,
427223,
426974,
427899,
427858,
428082,
428139,
428823,
169613,
218755,
200580,
200768,
201129,
204666,
204574,
204644,
200050,
200289,
200238,
200084,
196916,
225732,
194956,
195254,
196078,
194966,
200291,
225998,
200256,
200343,
200345,
197546,
197418,
197696,
201139,
201176,
198079,
198073,
214003,
214002,
198641,
202019,
199193,
201733,
199143,
273185,
253721,
250258,
259531,
256882,
255567,
256846,
260666,
255579,
253548,
254959,
255371,
257407,
250050,
249919,
263943,
264931,
264734,
264694,
264038,
265760,
265759,
260551,
264027,
260773,
260852,
265880,
261439,
266266,
268202,
266181,
412012,
412063,
401421,
413105,
413013,
413544,
415769,
405431,
413621,
413622,
412806,
406886,
415097,
407978,
426663,
428542,
426741,
426645,
426684,
428374,
429263,
427771,
428293,
427670,
427672,
427451,
427668,
427456,
76590,
426905,
429051,
429172,
76516,
76634,
428530,
428401,
428868,
408141,
408084,
409261,
414652,
414535,
409456,
409635,
412136,
413024,
413023,
412215,
400681,
400649,
417339,
400642,
400641,
419327,
411952,
411407,
403891,
404364,
406481,
405279,
407205,
407535,
419511,
411763,
416152,
416264,
414844,
415047,
423626,
415262,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Boss Cast, Important || Whiiskeyz",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \nend\n\n\n",
["Options"] = {
},
["Icon"] = 237553,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1673124015,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 1,\n        yOffset = 1, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["Revision"] = 253,
["Options"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Adds a configurable pixel border glow to the buff/debuff if the remaining duration is less than 30% of its total duration.",
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
334342,
285135,
63106,
342938,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Pandemic Glow (Pixel)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["semver"] = "",
["Icon"] = 413591,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["SpellIds"] = {
191284,
},
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1671113877,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["Revision"] = 163,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Prio"] = 99,
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
},
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"chocolate",
},
{
"195820",
"chocolate",
},
{
"195821",
"chocolate",
},
{
"189886",
"firebrickdark",
},
{
"75966",
"midnightblue",
},
{
"102019 ",
"chocolate",
},
{
"187159",
"darkmagenta",
},
{
"194897",
"darkmagenta",
},
{
"104251",
"cornflowerblue",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1671113870,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["url"] = "",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 573,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.71372550725937,
0,
0.56313106417656,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Key"] = "showExtraTexture",
["Value"] = false,
["Name"] = "Show Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.46274509803922,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Name"] = "Npc Color By NpcID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["SpellIds"] = {
},
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1671226624,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 894,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.43137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["SpellIds"] = {
392640,
209033,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"189893",
"firebrickdark",
},
{
"190187",
"firebrickdark",
},
{
"99922",
"saddlebrown",
},
{
"153285",
"firebrickdark",
},
{
"104822",
"firebrickdark",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1671113873,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["url"] = "",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["Revision"] = 163,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.43921571969986,
0.4588235616684,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useFlash",
["Value"] = true,
["Name"] = "Flash Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Name"] = "NpcID to Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1671113872,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["Revision"] = 112,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.094117656350136,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateScale",
["Value"] = true,
["Name"] = "Change Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Key"] = "scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["semver"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1671226636,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["Revision"] = 105,
["Options"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["SpellIds"] = {
373688,
391050,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["semver"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = false,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Just stop casting",
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1671113870,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
},
["Enabled"] = false,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["Revision"] = 109,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["semver"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.95686274509804,
1,
0.98823529411765,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.85882352941176,
0.43137254901961,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Show a different animation for the cast bar.",
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
},
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["SpellIds"] = {
372743,
372749,
384933,
},
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["Options"] = {
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
1,
1,
0.41662168502808,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.019607843831182,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["PlaterCore"] = 1,
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["SpellIds"] = {
388886,
209676,
377912,
},
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
},
["aura_tracker"] = {
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["227931"] = true,
["297133"] = true,
["163689"] = true,
["233210"] = true,
["280001"] = true,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["61573"] = true,
},
},
["aura_cooldown_reverse"] = false,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["target_highlight_height"] = 18,
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["version"] = 44,
["indicator_friendlyclass"] = true,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.80784320831299,
0.2039215862751,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.047058828175068,
},
["solo"] = {
0.50196078431373,
0.50196078431373,
},
["noaggro"] = {
0.50196081399918,
0.50196081399918,
},
["pulling"] = {
0.84705889225006,
0.61176472902298,
},
},
},
["aggro_modifies"] = {
["actor_name_color"] = true,
},
["aura_width2"] = 22,
["ghost_auras"] = {
["auras"] = {
["DEATHKNIGHT"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["WARRIOR"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["SHAMAN"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["MAGE"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["PRIEST"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
["589"] = true,
["34914"] = true,
},
["2"] = {
},
},
["ROGUE"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["EVOKER"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["WARLOCK"] = {
["1"] = {
[980] = true,
[172] = true,
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["DEMONHUNTER"] = {
["1"] = {
},
["0"] = {
},
["2"] = {
},
},
["PALADIN"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["DRUID"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
["4"] = {
},
},
["MONK"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
["HUNTER"] = {
["1"] = {
},
["0"] = {
},
["3"] = {
},
["2"] = {
},
},
},
},
["target_highlight_alpha"] = 1,
["cast_color_settings"] = {
["enabled"] = true,
["width"] = 12,
},
["castbar_target_font"] = "Accidental Presidency",
["aura_alpha"] = 0.84999996423721,
["extra_icon_height"] = 16,
["cast_statusbar_spark_width"] = 25,
["first_run3"] = true,
},
["Sevmage - Lothar"] = {
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
398151,
377738,
378149,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Buff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Effect After Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Aura - Debuff Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["version"] = -1,
["Name"] = "Add - Health Markers [P]",
["NpcNames"] = {
"197697",
"59544",
"186227",
"184020",
"91005",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
350554,
348513,
351779,
328180,
319898,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["version"] = -1,
["Name"] = "Cast - Small Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Name"] = "Timeleft to Blink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeleftToBlink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkSpeed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkMaxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftWarning",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "timeLeftCritical",
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["version"] = -1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Add - Tag Number [P]",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Height",
},
},
["version"] = -1,
["Name"] = "Cast - Important Target [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Quick Flash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura is Shield [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
190426,
186696,
101075,
100818,
98081,
52019,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
350421,
352158,
349985,
329239,
328400,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Name"] = "Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "M+ Spiteful",
["NpcNames"] = {
"174773",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Name"] = "Auto Set Skull",
["NpcNames"] = {
"163520",
"163618",
"164506",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Name"] = "Unit - Show Energy [Plater]",
["NpcNames"] = {
"164406",
"164407",
"162100",
"162099",
"162329",
"164558",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Cast - Shield Interrupt [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["version"] = -1,
["Name"] = "Cast - On Going Cast [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["version"] = -1,
["Name"] = "Fixate by Unit Buff [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
352833,
330403,
209495,
257426,
255952,
257870,
413147,
383107,
377559,
388060,
376170,
384524,
375351,
390111,
369791,
369573,
369563,
369335,
369061,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
382708,
375251,
375439,
372311,
373742,
372201,
374533,
377204,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["version"] = -1,
["Name"] = "Add - Explode on Die [P]",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate [Plater]",
["NpcNames"] = {
"165560",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Countdown",
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
350687,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Fixate On You [Plater]",
["NpcNames"] = {
},
},
},
["aura2_x_offset"] = 0,
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Time"] = 1547392935,
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["Time"] = 1541606242,
},
{
["Enabled"] = false,
["Revision"] = 93,
["Options"] = {
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1596791840,
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["version"] = -1,
["Name"] = "Reorder Nameplate [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["version"] = -1,
["Name"] = "Don't Have Aura [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["Time"] = 1554138845,
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["version"] = -1,
["Name"] = "Extra Border [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["Time"] = 1547409079,
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Time"] = 1552354619,
},
{
["Enabled"] = false,
["Revision"] = 348,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Icon Size Offset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconPadding",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Width",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureHeightMod",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Position",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["Time"] = 1597097268,
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["version"] = -1,
["Name"] = "Cast Bar Icon Settings [P]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["version"] = -1,
["Name"] = "Execute Range [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Time"] = 1547406548,
},
{
["Enabled"] = false,
["Revision"] = 363,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1620377377,
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["version"] = -1,
["Name"] = "Attacking Specific Unit [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 284,
["Options"] = {
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1621935143,
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["version"] = -1,
["Name"] = "Combo Points [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["version"] = -1,
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["Time"] = 1548278227,
},
{
["Enabled"] = false,
["Revision"] = 356,
["Options"] = {
},
["HooksTemp"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["Time"] = 1608663128,
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = -1,
["Name"] = "Aura Reorder [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["semver"] = "",
},
},
["aura_x_offset"] = 0,
["first_run3"] = true,
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["ui_parent_scale_tune"] = 1.559999942779541,
["indicator_raidmark_scale"] = 0.9999999403953552,
["cast_statusbar_spark_alpha"] = 0.8299999833106995,
["aura2_y_offset"] = 5,
["login_counter"] = 7,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1701052562,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["SpellIds"] = {
350421,
355787,
348513,
},
["NpcNames"] = {
},
},
},
["pet_width_scale"] = 0.949999988079071,
["plate_config"] = {
["global_health_height"] = 12,
["friendlyplayer"] = {
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_spacing"] = 9,
},
["friendlynpc"] = {
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_spacing"] = 9,
},
["enemynpc"] = {
["level_text_alpha"] = 0.2999999821186066,
},
["enemyplayer"] = {
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_spacing"] = 11,
},
["global_health_width"] = 112,
},
["aura_y_offset"] = 5,
["use_ui_parent"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 2,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Glowing [P]"] = 10,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Aura is Shield [P]"] = 2,
["Add - Warning [P]"] = 5,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Fixate On You"] = 11,
["Cast - Very Important"] = 15,
["Auto Set Skull"] = 11,
["Spiteful Affix"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Fixate"] = 11,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 15,
["Add - Explode on Die [P]"] = 1,
["Countdown"] = 11,
["Cast - Quick Flash"] = 2,
["Explosion Affix M+"] = 14,
["Unit - Show Energy"] = 11,
},
["expansion_triggerwipe"] = {
[9] = true,
},
["update_throttle"] = 0.1200000047683716,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["minor_width_scale"] = 0.8999999761581421,
["range_check_alpha"] = 0.6499999761581421,
["resources_settings"] = {
["chr"] = {
["Player-1175-0CFE73BA"] = "ArcaneCharges",
},
},
["health_animation_time_dilatation"] = 2.619999885559082,
["npc_cache"] = {
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[136541] = {
"Bile Oozeling",
"Waycrest Manor",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
"enUS",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["indicator_scale"] = 0.9999999403953552,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["number_region_first_run"] = true,
["patch_version"] = 29,
["health_selection_overlay_alpha"] = 0.09999999403953552,
["aura_tracker"] = {
["buff_tracked"] = {
[209859] = true,
},
},
["minor_height_scale"] = 0.949999988079071,
["pet_height_scale"] = 0.949999988079071,
["not_affecting_combat_alpha"] = 0.5999999642372131,
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Hide Neutral Units"] = 1,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Execute Range"] = 1,
["Combo Points"] = 6,
},
},
},
["performance_units"] = {
[176920] = true,
[214441] = true,
[211306] = true,
[196642] = true,
[167999] = true,
[189707] = true,
},
["InterruptableSpells"] = {
[426240] = true,
[187707] = true,
[97547] = true,
[96231] = true,
[32747] = true,
[429812] = true,
[6552] = true,
[57994] = true,
[1766] = true,
[388862] = true,
[2139] = true,
[420320] = true,
[183752] = true,
[388863] = true,
[427609] = true,
[351338] = true,
[132409] = true,
[377008] = true,
[408805] = true,
[47528] = true,
[388392] = true,
[91807] = true,
[34914] = true,
[31935] = true,
[347008] = true,
[387843] = true,
[220543] = true,
[93985] = true,
[377389] = true,
[147362] = true,
[19647] = true,
[116705] = true,
},
["captured_casts"] = {
[278444] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[420746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaldorei Sentinel",
["npcID"] = 207117,
},
[376725] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["npcID"] = 190294,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[453507] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Quartermaster Ze'erik",
["npcID"] = 215988,
},
[405391] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[188907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfiend Dreadbringer",
["npcID"] = 92789,
},
[376727] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[453509] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Royal Quartermaster Ze'erik",
["npcID"] = 215988,
},
[444296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["npcID"] = 184581,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[392087] = {
["source"] = "Mature Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 191619,
},
[323496] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flesh Crafter",
["npcID"] = 165872,
},
[409492] = {
["source"] = "Afflicted Soul",
["event"] = "SPELL_CAST_START",
["npcID"] = 204773,
},
[410516] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[41229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonechewer Blood Prophet",
["npcID"] = 23237,
},
[270264] = {
["source"] = "Portal Breacher",
["event"] = "SPELL_CAST_START",
["npcID"] = 209821,
},
[440207] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[367521] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonebolt Hunter",
["npcID"] = 185534,
},
[413590] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[448399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[429973] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[40078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leviathan",
["npcID"] = 22884,
},
[374691] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[388000] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["npcID"] = 184581,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[408476] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Erratic Remnant",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 202824,
},
[382883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vile Rothexer",
["npcID"] = 187224,
},
[388002] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
[377765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galestrike Primalist",
["npcID"] = 187084,
},
[375719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalbound Water Spirit",
["npcID"] = 190739,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[385958] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[385959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Titan Defense Matrix",
["npcID"] = 193244,
},
[166906] = {
["source"] = "Mawsworn Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 175882,
},
[441242] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[401316] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[40079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leviathan",
["npcID"] = 22884,
},
[374699] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[388008] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[432030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patrolling Swarmite",
["npcID"] = 227143,
},
[401318] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["encounterID"] = 2901,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215968,
},
[425889] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[373678] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[440222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[405415] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[268234] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Bile Oozeling",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 136541,
},
[428963] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["npcID"] = 207796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[413607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[226287] = {
["source"] = "Vileshard Chunk",
["event"] = "SPELL_CAST_START",
["npcID"] = 101438,
},
[404394] = {
["source"] = "Reisa the Drowned",
["event"] = "SPELL_CAST_START",
["npcID"] = 200600,
},
[439202] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[374706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[400300] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[432037] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[404396] = {
["source"] = "Pyrachniss",
["event"] = "SPELL_CAST_START",
["npcID"] = 200978,
},
[401325] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[398254] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winterpelt Defender",
["npcID"] = 200362,
},
[386993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cascade Proto-Drake",
["npcID"] = 194939,
},
[441252] = {
["source"] = "Tentacular Slime",
["event"] = "SPELL_CAST_START",
["npcID"] = 220364,
},
[271310] = {
["source"] = "Pathfinder Tacha",
["event"] = "SPELL_CAST_START",
["npcID"] = 200263,
},
[395184] = {
["source"] = "Volcanakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200911,
},
[265168] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[370615] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[274383] = {
["source"] = "Vermin Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 130404,
},
[440231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark-Crazed Harvester",
["npcID"] = 206067,
},
[404400] = {
["source"] = "Pyrachniss",
["event"] = "SPELL_CAST_START",
["npcID"] = 200978,
},
[434089] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2839,
},
[200185] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[385974] = {
["encounterName"] = "Vexamus",
["source"] = "Professor Maxdormu",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[447400] = {
["source"] = "Queen Rickiticka",
["event"] = "SPELL_CAST_START",
["npcID"] = 215772,
},
[199674] = {
["source"] = "King Bjorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 97081,
},
[404403] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[451496] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Queen",
["npcID"] = 220003,
},
[264150] = {
["source"] = "Thornguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 131858,
},
[185854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Rider",
["npcID"] = 92792,
},
[331718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Defender",
["npcID"] = 171772,
},
[373692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Destroyer",
["npcID"] = 190034,
},
[373693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Destroyer",
["npcID"] = 190034,
},
[256494] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[264153] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[405431] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[385980] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[374719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonejaw Basilisk",
["npcID"] = 188128,
},
[413622] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[427955] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[404409] = {
["source"] = "Reisa the Drowned",
["event"] = "SPELL_CAST_START",
["npcID"] = 200600,
},
[405433] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[422837] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[395196] = {
["source"] = "Volcanakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200911,
},
[449455] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghastly Voidsoul",
["npcID"] = 212453,
},
[389054] = {
["source"] = "Arcane Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196694,
},
[373698] = {
["source"] = "Brackenhide Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186220,
},
[428981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Auctioned Pages Past",
["npcID"] = 214069,
},
[209404] = {
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 104247,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[389056] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[374724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2854,
},
[401342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[408509] = {
["source"] = "Portalkeeper Cimbra",
["event"] = "SPELL_CAST_START",
["npcID"] = 202613,
},
[414652] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[404415] = {
["source"] = "Damned Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 202922,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[424891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[271329] = {
["source"] = "Pathfinder Tacha",
["event"] = "SPELL_CAST_START",
["npcID"] = 200263,
},
[432059] = {
["source"] = "Flickerflame Candlekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 212524,
},
[236537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Infernal",
["npcID"] = 118065,
},
[372683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infused Whelp",
["npcID"] = 187894,
},
[426943] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[378827] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Plunderer",
["npcID"] = 192786,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["event"] = "SPELL_CAST_START",
["npcID"] = 221896,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["event"] = "SPELL_CAST_START",
["npcID"] = 221896,
},
[13608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Recalled Silverbrook Lumberjack",
["npcID"] = 226197,
},
[374735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamecaller Aymi",
["npcID"] = 190368,
},
[407496] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[457660] = {
["event"] = "SPELL_CAST_START",
["source"] = "Recalled Enormos",
["npcID"] = 225274,
},
[427972] = {
["encounterName"] = "Volcoross",
["source"] = "Lieutenant Lunker",
["npcID"] = 211272,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[388046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stinkbreath",
["npcID"] = 187033,
},
[458685] = {
["source"] = "Moth'ethk",
["event"] = "SPELL_CAST_START",
["npcID"] = 206203,
},
[391118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scalebane Lieutenant",
["npcID"] = 191739,
},
[226304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vileshard Hulk",
["npcID"] = 91000,
},
[400333] = {
["source"] = "Cliffkeeper Bouldani",
["event"] = "SPELL_CAST_START",
["npcID"] = 202612,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[209413] = {
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 104270,
},
[400335] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[199176] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[252923] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[266225] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[372696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Juggernaut",
["npcID"] = 188244,
},
[233473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prophet Velen",
["npcID"] = 117042,
},
[406481] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["npcID"] = 198999,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2671,
},
[419790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[441289] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[440266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[446409] = {
["source"] = "Briney Kelpcore",
["event"] = "SPELL_CAST_START",
["npcID"] = 220547,
},
[201226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Fury",
["npcID"] = 100531,
},
[211464] = {
["source"] = "Felbound Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 104278,
},
[268278] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[420817] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of the Moon",
["npcID"] = 211076,
},
[372701] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2557,
},
[153623] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[398296] = {
["source"] = "Shambling Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 200387,
},
[386012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Boroo",
["npcID"] = 194317,
},
[329706] = {
["source"] = "Mawsworn Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 175882,
},
[388060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stinkbreath",
["npcID"] = 187033,
},
[450509] = {
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 216584,
},
[387037] = {
["source"] = "Torch Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 201472,
},
[200205] = {
["source"] = "Reaves",
["event"] = "SPELL_CAST_START",
["npcID"] = 101462,
},
[426964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[419798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Druid of the Moon",
["npcID"] = 210686,
},
[404442] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[446416] = {
["source"] = "Honey-fused Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 213697,
},
[386015] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Stormspeaker",
["npcID"] = 194894,
},
[387039] = {
["source"] = "Nokhud Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 195761,
},
[390111] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[164887] = {
["source"] = "Everbloom Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 81820,
},
[169494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarlroot",
["npcID"] = 81984,
},
[40598] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[391136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[269310] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Titan Keeper Hezrel",
["npcID"] = 134419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[270334] = {
["source"] = "Portal Breacher",
["event"] = "SPELL_CAST_START",
["npcID"] = 209821,
},
[373733] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[427992] = {
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 210423,
},
[192018] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[406495] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[453588] = {
["source"] = "Coalesced Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 220266,
},
[421852] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shoreline Gladehart",
["npcID"] = 210283,
},
[211470] = {
["source"] = "Shadow Mistress",
["event"] = "SPELL_CAST_START",
["npcID"] = 104300,
},
[387045] = {
["source"] = "Ezrigeth",
["event"] = "SPELL_CAST_START",
["npcID"] = 187666,
},
[383975] = {
["source"] = "Raging Windlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 200390,
},
[451543] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Queen",
["npcID"] = 220003,
},
[191508] = {
["source"] = "Valarjar Aspirant",
["event"] = "SPELL_CAST_START",
["npcID"] = 101637,
},
[453591] = {
["source"] = "Congealed Slime",
["event"] = "SPELL_CAST_START",
["npcID"] = 225494,
},
[426974] = {
["source"] = "Addled Arcanomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84990,
},
[376811] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2568,
},
[435165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[401382] = {
["source"] = "Past Self",
["event"] = "SPELL_CAST_START",
["npcID"] = 185800,
},
[386026] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Squall",
["npcID"] = 194895,
},
[374765] = {
["source"] = "Ravenous Bloodbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 185350,
},
[401383] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[395241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Voltweaver",
["npcID"] = 198868,
},
[461785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[372719] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2557,
},
[386028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[404456] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[385005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustpine Rager",
["npcID"] = 187405,
},
[440288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[430051] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Screaming Soul",
["npcID"] = 214608,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[288774] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[200214] = {
["source"] = "Reaves",
["event"] = "SPELL_CAST_START",
["npcID"] = 101462,
},
[40088] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[443363] = {
["source"] = "Raging Dunecore",
["event"] = "SPELL_CAST_START",
["npcID"] = 220544,
},
[377844] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["npcID"] = 186122,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[409581] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[211477] = {
["source"] = "Legion Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 104277,
},
[448485] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guard Captain Suleyman",
["npcID"] = 212826,
},
[268306] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[404465] = {
["source"] = "Galakhad",
["event"] = "SPELL_CAST_START",
["npcID"] = 200717,
},
[272402] = {
["source"] = "Cutwater Knife Juggler",
["event"] = "SPELL_CAST_START",
["npcID"] = 129599,
},
[420846] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[372730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Juggernaut",
["npcID"] = 188244,
},
[361469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Past Self",
["npcID"] = 185800,
},
[200218] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reaves",
["npcID"] = 101462,
},
[395254] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Tempestmaker",
["npcID"] = 198878,
},
[405492] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[406516] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[118297] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[376829] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[387067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[372735] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flashfrost Earthshaper",
["npcID"] = 187969,
},
[432113] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[404472] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[266266] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[407544] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[404473] = {
["source"] = "Galakhad",
["event"] = "SPELL_CAST_START",
["npcID"] = 200717,
},
[432116] = {
["source"] = "Candleclaw Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 213833,
},
[385024] = {
["source"] = "Salty Salamander",
["event"] = "SPELL_CAST_START",
["npcID"] = 188027,
},
[48280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blingtron 7000",
["npcID"] = 153897,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[453616] = {
["source"] = "Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 225493,
},
[428023] = {
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 210423,
},
[449522] = {
["source"] = "Drone Abductor",
["event"] = "SPELL_CAST_START",
["npcID"] = 219655,
},
[450546] = {
["source"] = "Nerubian Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 216584,
},
[41114] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Mystic",
["npcID"] = 22845,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[374789] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[41370] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Archon",
["npcID"] = 23400,
},
[427001] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[432120] = {
["source"] = "Overlord",
["event"] = "SPELL_CAST_START",
["npcID"] = 228575,
},
[392194] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[406527] = {
["source"] = "Banana Bomber",
["event"] = "SPELL_CAST_START",
["npcID"] = 203641,
},
[385029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fleshripper Vulture",
["npcID"] = 186246,
},
[6358] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cattnys",
["npcID"] = 1863,
},
[407552] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[408576] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[369674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonevault Geomancer",
["npcID"] = 184022,
},
[462836] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[369675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonevault Geomancer",
["npcID"] = 184022,
},
[403459] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[40091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[259092] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[461814] = {
["source"] = "Daughter of Alizabal",
["event"] = "SPELL_CAST_START",
["npcID"] = 214142,
},
[369677] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["npcID"] = 184580,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[374797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Grovetalon",
["npcID"] = 187507,
},
[41371] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Torment",
["npcID"] = 22956,
},
[386059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Basrikron",
["npcID"] = 193535,
},
[395273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Stormsentry",
["npcID"] = 196856,
},
[385036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Galesinger",
["npcID"] = 190373,
},
[427011] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[384014] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[386063] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[401421] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[347163] = {
["source"] = "Stygian Runesmith",
["event"] = "SPELL_CAST_START",
["npcID"] = 170157,
},
[409612] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[156722] = {
["source"] = "Shadowmoon Exhumer",
["event"] = "SPELL_CAST_START",
["npcID"] = 77700,
},
[41372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Archon",
["npcID"] = 23400,
},
[421898] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[443397] = {
["source"] = "Sureki Venomblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 220193,
},
[387091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Sunseeker",
["npcID"] = 187239,
},
[441351] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[425995] = {
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 210423,
},
[385046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skulking Gutstabber",
["npcID"] = 186242,
},
[199210] = {
["source"] = "Valarjar Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 96640,
},
[375834] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[386072] = {
["source"] = "Professor Intinosa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195354,
},
[446474] = {
["source"] = "Oozemodius",
["event"] = "SPELL_CAST_START",
["npcID"] = 220410,
},
[432142] = {
["source"] = "Nerubian War-Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 219657,
},
[420881] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Ashwarden",
["npcID"] = 208659,
},
[41117] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[41245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Suffering Soul Fragment",
["npcID"] = 23399,
},
[400407] = {
["source"] = "Nidharr",
["event"] = "SPELL_CAST_START",
["npcID"] = 201310,
},
[462856] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nullbot",
["npcID"] = 229729,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[396313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Narkena",
["npcID"] = 201539,
},
[446477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[397338] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[462859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[396316] = {
["source"] = "Nokhud Huntmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 185353,
},
[376865] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[199726] = {
["source"] = "King Ranulf",
["event"] = "SPELL_CAST_START",
["npcID"] = 97083,
},
[396317] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[397341] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["npcID"] = 184986,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[415769] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
[400413] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[442387] = {
["source"] = "Nerubian War-Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 222731,
},
[415770] = {
["source"] = "Coalesced Time",
["event"] = "SPELL_CAST_START",
["npcID"] = 206140,
},
[446483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Sludger",
["npcID"] = 216515,
},
[193585] = {
["source"] = "Rockbound Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 102232,
},
[408605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[369703] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["npcID"] = 184018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2556,
},
[454675] = {
["source"] = "Angry Rocks",
["event"] = "SPELL_CAST_START",
["npcID"] = 220543,
},
[374823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squallbringer Cyraz",
["npcID"] = 190370,
},
[461842] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[12747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verdant Emerald Lasher",
["npcID"] = 208750,
},
[192563] = {
["source"] = "Valarjar Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 97197,
},
[226347] = {
["source"] = "Stoneclaw Grubmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 102404,
},
[385063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Cinderweaver",
["npcID"] = 190207,
},
[432156] = {
["source"] = "Waxtail Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 213095,
},
[420895] = {
["source"] = "Aurostor",
["event"] = "SPELL_CAST_START",
["npcID"] = 209574,
},
[430109] = {
["source"] = "Cursed Thunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207198,
},
[373803] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Infused Whelp",
["npcID"] = 189893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[385065] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[406564] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[396327] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[377900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Suffusion Shaper",
["npcID"] = 208676,
},
[456729] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[406566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[408614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devastator",
["npcID"] = 198869,
},
[385068] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Colossal Stormfiend",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 197145,
},
[428066] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[396330] = {
["source"] = "Nokhud Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 185357,
},
[256551] = {
["encounterName"] = "Ring of Booty",
["source"] = "Sawtooth Shark",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 129359,
},
[272457] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[429091] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[449567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfang the Merciless",
["npcID"] = 220302,
},
[444449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["encounterID"] = 2877,
["event"] = "SPELL_CAST_START",
["npcID"] = 221896,
},
[274507] = {
["source"] = "Bilge Rat Swabby",
["event"] = "SPELL_CAST_START",
["npcID"] = 129526,
},
[386096] = {
["source"] = "Screechflight Cursewife",
["event"] = "SPELL_CAST_START",
["npcID"] = 184816,
},
[397358] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[443427] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[407596] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[408620] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["npcID"] = 200836,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[387122] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Construct",
["npcID"] = 186740,
},
[14443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Marksman",
["npcID"] = 8338,
},
[385075] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[420907] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[443430] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[387125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[441384] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[442408] = {
["source"] = "Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214649,
},
[328772] = {
["source"] = "Vault Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200375,
},
[328773] = {
["source"] = "Vault Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200375,
},
[387127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Thunderbeast",
["npcID"] = 195696,
},
[198715] = {
["event"] = "SPELL_CAST_START",
["source"] = "Val'kyr Battlemaiden",
["npcID"] = 100876,
},
[272469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abyssal Reach",
["npcID"] = 138538,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[406581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[411700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Tidehunter",
["npcID"] = 205365,
},
[400439] = {
["source"] = "Wyrmslayer Angvardi",
["event"] = "SPELL_CAST_START",
["npcID"] = 201013,
},
[417843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Listless Nae'dra",
["npcID"] = 211164,
},
[386107] = {
["source"] = "Screechflight Hexclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 183995,
},
[456746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[375870] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[389179] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["encounterID"] = 2615,
["event"] = "SPELL_CAST_START",
["npcID"] = 189719,
},
[50335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Recalled Abomination",
["npcID"] = 221436,
},
[428082] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[396346] = {
["source"] = "Nokhud Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 185168,
},
[422964] = {
["source"] = "Aurostor",
["event"] = "SPELL_CAST_START",
["npcID"] = 209574,
},
[456748] = {
["source"] = "Dark Proselityzer",
["event"] = "SPELL_CAST_START",
["npcID"] = 224898,
},
[106797] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[429108] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Cycle Warden",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 209800,
},
[462892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Pylon",
["npcID"] = 229739,
},
[328781] = {
["source"] = "Vault Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199126,
},
[387135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Arcblade",
["npcID"] = 194898,
},
[449584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfang the Merciless",
["npcID"] = 220302,
},
[442418] = {
["source"] = "Royal Journalist Ist'iix",
["event"] = "SPELL_CAST_START",
["npcID"] = 226234,
},
[428086] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[194112] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[377923] = {
["source"] = "Molten Slag",
["event"] = "SPELL_CAST_START",
["npcID"] = 214722,
},
[440372] = {
["source"] = "Scary Skitterer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216944,
},
[396351] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[241717] = {
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_START",
["npcID"] = 118065,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[392257] = {
["source"] = "Thousandmile",
["event"] = "SPELL_CAST_START",
["npcID"] = 193676,
},
[390210] = {
["source"] = "Horrible Error",
["event"] = "SPELL_CAST_START",
["npcID"] = 201493,
},
[428089] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[200768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Razorbeak",
["npcID"] = 95766,
},
[372808] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[377927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Feather",
["npcID"] = 192690,
},
[440376] = {
["source"] = "Al'haggro",
["event"] = "SPELL_CAST_START",
["npcID"] = 216560,
},
[420925] = {
["source"] = "Aurostor",
["event"] = "SPELL_CAST_START",
["npcID"] = 209574,
},
[446519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbral Shalehorn",
["npcID"] = 227933,
},
[238648] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsiege Infernal",
["npcID"] = 120707,
},
[157772] = {
["source"] = "Shadowmoon Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 80787,
},
[212031] = {
["source"] = "Bound Energy",
["event"] = "SPELL_CAST_START",
["npcID"] = 105705,
},
[412737] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Guardian",
["npcID"] = 221885,
},
[193092] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[370764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Fury",
["npcID"] = 187160,
},
[198723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[387145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormcaller Boroo",
["npcID"] = 194317,
},
[429119] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["npcID"] = 208365,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2728,
},
[397383] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[370766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Thrasher",
["npcID"] = 187139,
},
[396360] = {
["source"] = "Rimetalon Brawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 195752,
},
[417860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[425027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earth Infused Golem",
["npcID"] = 210109,
},
[9613] = {
["source"] = "Raest Magespear",
["event"] = "SPELL_CAST_START",
["npcID"] = 116409,
},
[420933] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[401482] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["npcID"] = 198998,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2670,
},
[374865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifested Dreamsaber",
["npcID"] = 210320,
},
[461884] = {
["source"] = "Spring Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215810,
},
[387151] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[425030] = {
["source"] = "Zaqali Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 210172,
},
[390223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flashfrost Tarasek",
["npcID"] = 187089,
},
[391247] = {
["source"] = "Bazual",
["event"] = "SPELL_CAST_START",
["npcID"] = 193532,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[209477] = {
["source"] = "Mana Wyrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 105703,
},
[369751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Scoundrel",
["npcID"] = 191446,
},
[417868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[425035] = {
["source"] = "Ancient Core Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 210288,
},
[397394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Thunderfist",
["npcID"] = 193373,
},
[260666] = {
["source"] = "Gilded Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 132126,
},
[383062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decayed Elder",
["npcID"] = 189531,
},
[10733] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Mechano-Tank",
["npcID"] = 213785,
},
[369754] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["npcID"] = 184018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2556,
},
[425037] = {
["source"] = "Ancient Core Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 210288,
},
[431180] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[393302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Colossus",
["npcID"] = 188673,
},
[411730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Hound",
["npcID"] = 205611,
},
[270453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Thornweaver",
["npcID"] = 221745,
},
[373852] = {
["source"] = "Raest Magespear",
["event"] = "SPELL_CAST_START",
["npcID"] = 116409,
},
[392280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaurdyth",
["npcID"] = 197835,
},
[249919] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[41381] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Delight",
["npcID"] = 22964,
},
[393305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Earthwarden",
["npcID"] = 193709,
},
[459849] = {
["source"] = "Queensguard An'Jak Shabtir",
["event"] = "SPELL_CAST_START",
["npcID"] = 219665,
},
[420947] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208363,
},
[421971] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[377950] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["npcID"] = 186125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[393307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Flame",
["npcID"] = 184693,
},
[407640] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201774,
},
[453709] = {
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220287,
},
[389213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Guardian",
["npcID"] = 192764,
},
[185425] = {
["source"] = "Steeljaw Grizzly",
["event"] = "SPELL_CAST_START",
["npcID"] = 96677,
},
[392285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Proto Dragon",
["npcID"] = 195177,
},
[456782] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[412761] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[401500] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[40102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqueous Spawn",
["npcID"] = 22883,
},
[411738] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rashok",
["npcID"] = 201320,
},
[371812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Revenant",
["npcID"] = 191129,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[413787] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[86331] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["npcID"] = 43878,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[374885] = {
["event"] = "SPELL_CAST_START",
["source"] = "Astral Attendant",
["npcID"] = 189555,
},
[376934] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2568,
},
[430171] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[390245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Embertooth Spearhunter",
["npcID"] = 188725,
},
[448599] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hevo'myk",
["npcID"] = 211591,
},
[396388] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[463956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[201298] = {
["encounterName"] = "Dresaron",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[26262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vanquished Tentacle",
["npcID"] = 223702,
},
[374892] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmammoth Calf",
["npcID"] = 180705,
},
[373869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scorchling",
["npcID"] = 190205,
},
[61730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snowplain Disciple",
["npcID"] = 26705,
},
[408677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Scaleguard",
["npcID"] = 198871,
},
[462936] = {
["event"] = "SPELL_CAST_START",
["source"] = "Medbot",
["npcID"] = 229769,
},
[423010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zealous Dryad",
["npcID"] = 210813,
},
[452699] = {
["source"] = "Verdant Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215813,
},
[428130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[375919] = {
["source"] = "Primal Scythid",
["event"] = "SPELL_CAST_START",
["npcID"] = 191104,
},
[376943] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[373872] = {
["source"] = "Experimental Trial",
["event"] = "SPELL_CAST_START",
["npcID"] = 201491,
},
[270474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Thornweaver",
["npcID"] = 221745,
},
[410728] = {
["source"] = "Sabellian",
["event"] = "SPELL_CAST_START",
["npcID"] = 201411,
},
[436322] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[374898] = {
["source"] = "Predatory Thresher",
["event"] = "SPELL_CAST_START",
["npcID"] = 198779,
},
[425062] = {
["source"] = "Zaqali Steelshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 210173,
},
[372851] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[411754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[385137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Basrikron",
["npcID"] = 193535,
},
[390256] = {
["source"] = "Sundered Pillager",
["event"] = "SPELL_CAST_START",
["npcID"] = 199374,
},
[411755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[40872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Sky Stalker",
["npcID"] = 23030,
},
[396400] = {
["source"] = "Glacias",
["event"] = "SPELL_CAST_START",
["npcID"] = 199028,
},
[395377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thondrozus",
["npcID"] = 192769,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[42024] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Elementalist",
["npcID"] = 23523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[385141] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Galesinger",
["npcID"] = 190373,
},
[428139] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[131178] = {
["source"] = "Pandaren Scarecrow",
["event"] = "SPELL_CAST_START",
["npcID"] = 66768,
},
[209495] = {
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 104270,
},
[375929] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[39593] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Searing Totem",
["npcID"] = 22896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[387191] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[39849] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[369788] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Djaradin",
["npcID"] = 195032,
},
[385145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Raptor",
["npcID"] = 187256,
},
[256589] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[40873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragonmaw Sky Stalker",
["npcID"] = 23030,
},
[397431] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["npcID"] = 192934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[443500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Royal Swarmguard",
["npcID"] = 220197,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[265368] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[369791] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["npcID"] = 184582,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[199772] = {
["source"] = "Valarjar Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 97087,
},
[372863] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["npcID"] = 189232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[164965] = {
["source"] = "Everbloom Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 81819,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[386173] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[265371] = {
["source"] = "Enthralled Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 131585,
},
[389245] = {
["source"] = "Sundered Ruinstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199379,
},
[375937] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[409721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Winglord Dezran",
["npcID"] = 202610,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[428150] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[406652] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[409724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[265376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[384132] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[168040] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[377991] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[384134] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Warspear",
["npcID"] = 192791,
},
[393348] = {
["source"] = "Stalwart Broodwarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 198263,
},
[373897] = {
["source"] = "Decayed Elder",
["event"] = "SPELL_CAST_START",
["npcID"] = 189531,
},
[429180] = {
["source"] = "Cycle Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 210518,
},
[465012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 228015,
},
[237657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Karina of Silvermoon",
["npcID"] = 117764,
},
[396423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galestrike Proto-Dragon",
["npcID"] = 187211,
},
[345236] = {
["source"] = "Stygian Runesmith",
["event"] = "SPELL_CAST_START",
["npcID"] = 170157,
},
[452730] = {
["source"] = "Verdant Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 215813,
},
[375950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Icecaller",
["npcID"] = 190377,
},
[42027] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Spiritbinder",
["npcID"] = 23524,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[164973] = {
["source"] = "Everbloom Naturalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 81819,
},
[412806] = {
["source"] = "Risen Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 205804,
},
[379023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hillside Forager",
["npcID"] = 191240,
},
[405641] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[410760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[369811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[87622] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[417928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Flameclaw",
["npcID"] = 206805,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[396430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Custodial Protector",
["npcID"] = 192694,
},
[378003] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[455809] = {
["source"] = "Urthgrafr Riftcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 215233,
},
[396432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Firehide Proto-Dragon",
["npcID"] = 212685,
},
[422026] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[390290] = {
["source"] = "Infuser Sariya",
["event"] = "SPELL_CAST_START",
["npcID"] = 190405,
},
[399504] = {
["source"] = "Tarasek Frostclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201035,
},
[457858] = {
["source"] = "Deepfiend Azellix",
["event"] = "SPELL_CAST_START",
["npcID"] = 218458,
},
[385172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wind Serpent",
["npcID"] = 191645,
},
[382101] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rebel Conjurer",
["npcID"] = 195063,
},
[436360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Darkweaver",
["npcID"] = 216868,
},
[255579] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[446598] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[260698] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[403601] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[389269] = {
["source"] = "Expedition Guarantor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187061,
},
[369818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[389270] = {
["source"] = "Expedition Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 187123,
},
[260699] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[379033] = {
["source"] = "Nokhud Wardog",
["event"] = "SPELL_CAST_START",
["npcID"] = 185465,
},
[260700] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[462983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Automatic Ironstrider",
["npcID"] = 229778,
},
[378012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustpine Fireflinger",
["npcID"] = 191152,
},
[18651] = {
["source"] = "Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 87518,
},
[260701] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[411798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oozing Sludge",
["npcID"] = 205644,
},
[425107] = {
["source"] = "Ancient Core Hound",
["event"] = "SPELL_CAST_START",
["npcID"] = 211241,
},
[385181] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["npcID"] = 189722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2616,
},
[207979] = {
["source"] = "Jazshariu",
["event"] = "SPELL_CAST_START",
["npcID"] = 104273,
},
[421013] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[410776] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Protector",
["npcID"] = 204658,
},
[201837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[7992] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfang Creeper",
["npcID"] = 4412,
},
[260703] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[207980] = {
["source"] = "Baalgar the Watchful",
["event"] = "SPELL_CAST_START",
["npcID"] = 104274,
},
[371875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Trainee",
["npcID"] = 189266,
},
[422039] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[369828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vicious Basilisk",
["npcID"] = 184023,
},
[424087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Devastator",
["npcID"] = 207089,
},
[384161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[398494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Sporebat",
["npcID"] = 207025,
},
[400542] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kalecgos",
["npcID"] = 193460,
},
[409756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[238694] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Sigryn",
["npcID"] = 116484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[376997] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[406686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Magmashaper",
["npcID"] = 202257,
},
[451732] = {
["source"] = "Swarming Cogwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 232871,
},
[456851] = {
["source"] = "Chasm Shalewing",
["event"] = "SPELL_CAST_START",
["npcID"] = 219291,
},
[421020] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208363,
},
[446615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[106823] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[264390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Disciple",
["npcID"] = 131685,
},
[421024] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208367,
},
[405668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drazos Blackwing",
["npcID"] = 205623,
},
[373932] = {
["encounterName"] = "Azureblade",
["source"] = "Draconic Image",
["npcID"] = 190187,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[411811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Slime",
["npcID"] = 205651,
},
[377004] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[231532] = {
["source"] = "Pyrestar Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 114845,
},
[378029] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["npcID"] = 186124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[426147] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[373936] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[403625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[421029] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208367,
},
[422053] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Lasher",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 210231,
},
[386223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Stormshield",
["npcID"] = 194896,
},
[392366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Juggernaut",
["npcID"] = 197793,
},
[373939] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Rotburst Totem",
["npcID"] = 190381,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2569,
},
[198263] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[375988] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Snowypelt Slyvern",
["event"] = "SPELL_CAST_START",
["npcID"] = 193438,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 213008,
},
[404654] = {
["source"] = "Grugoth the Hullcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200721,
},
[256106] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[373942] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2569,
},
[373943] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[272592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[340160] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Matriarch",
["npcID"] = 173655,
},
[442536] = {
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223844,
},
[193659] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[377017] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[450728] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[373947] = {
["event"] = "SPELL_CAST_START",
["source"] = "Konkhular",
["npcID"] = 194544,
},
[369853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Rock-Thrower",
["npcID"] = 184019,
},
[264407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Maiden",
["npcID"] = 131821,
},
[407733] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[224374] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Infernal Imp",
["npcID"] = 112668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1869,
},
[388283] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["npcID"] = 186616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[394426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Flamecaller",
["npcID"] = 198503,
},
[387261] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[451758] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[55982] = {
["source"] = "Recalled Enormos",
["event"] = "SPELL_CAST_START",
["npcID"] = 225274,
},
[405691] = {
["source"] = "Volcanakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200911,
},
[258672] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[235638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roottender Treant",
["npcID"] = 209280,
},
[384194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Cinderweaver",
["npcID"] = 190207,
},
[377029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkclaw Scythid",
["npcID"] = 196587,
},
[411837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Fire",
["npcID"] = 205971,
},
[33844] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rapidly Grown Treant",
["npcID"] = 209218,
},
[405696] = {
["encounterName"] = "Manifested Timeways",
["source"] = "Manifested Timeways",
["encounterID"] = 2667,
["event"] = "SPELL_CAST_START",
["npcID"] = 198996,
},
[373960] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2569,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[259187] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[425149] = {
["source"] = "Zaqali Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 210172,
},
[239736] = {
["event"] = "SPELL_CAST_START",
["source"] = "Prophet Velen",
["npcID"] = 117042,
},
[95826] = {
["source"] = "Embaari Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 81313,
},
[377034] = {
["encounterName"] = "Crawth",
["source"] = "Crawth",
["encounterID"] = 2564,
["event"] = "SPELL_CAST_START",
["npcID"] = 191736,
},
[201858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Deadeye",
["npcID"] = 100539,
},
[278755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[404679] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mad-Eye Carrey",
["npcID"] = 201181,
},
[456891] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[392395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunderhead",
["npcID"] = 197698,
},
[397514] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[439488] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["npcID"] = 190609,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2565,
},
[387277] = {
["source"] = "Torch Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 201472,
},
[31707] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 78116,
},
[209027] = {
["source"] = "Duskwatch Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 104246,
},
[423109] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[388302] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[451775] = {
["source"] = "Cogwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224527,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[392398] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Thundercloud",
["npcID"] = 197509,
},
[446657] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[253562] = {
["source"] = "Dazar'ai Augur",
["event"] = "SPELL_CAST_START",
["npcID"] = 122972,
},
[451778] = {
["source"] = "Dogmatic Machine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212878,
},
[41396] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ardent Host",
["npcID"] = 22959,
},
[422090] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Treant",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[386259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Basrikron",
["npcID"] = 193535,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[157331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Storm Elemental",
["npcID"] = 77936,
},
[424140] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[449734] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2839,
},
[438473] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[423117] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[388310] = {
["event"] = "SPELL_CAST_START",
["source"] = "Custodial Protector",
["npcID"] = 192694,
},
[391382] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 197671,
},
[392406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Storm Warrior",
["npcID"] = 197982,
},
[393430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[431309] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[396503] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[393432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Defender",
["npcID"] = 190340,
},
[395480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gaelzion",
["npcID"] = 193653,
},
[430288] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[236163] = {
["encounterName"] = "Fury of the God Queen",
["event"] = "SPELL_CAST_START",
["source"] = "Fuming Imp",
["npcID"] = 115640,
},
[403671] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[404695] = {
["event"] = "SPELL_CAST_START",
["source"] = "First Mate Ovdah",
["npcID"] = 201182,
},
[411862] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animation Fluid",
["npcID"] = 203939,
},
[31516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horde Priest",
["npcID"] = 214154,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[384223] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[463052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[11985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Searing Hatchling",
["npcID"] = 4323,
},
[393439] = {
["source"] = "Sundered Ruinstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 199379,
},
[451793] = {
["source"] = "Al'haggro",
["event"] = "SPELL_CAST_START",
["npcID"] = 216560,
},
[387297] = {
["source"] = "Scalecommander Emberthal",
["event"] = "SPELL_CAST_START",
["npcID"] = 199944,
},
[234631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Infernal",
["npcID"] = 118065,
},
[407775] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["encounterID"] = 2693,
["event"] = "SPELL_CAST_START",
["npcID"] = 200913,
},
[410848] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neltharion",
["npcID"] = 201668,
},
[414944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[372971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[414945] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[385258] = {
["source"] = "Coastal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 198782,
},
[408805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incorporeal Being",
["npcID"] = 204560,
},
[442589] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[260741] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[416996] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[168092] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[157855] = {
["source"] = "Shadowmoon Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 80787,
},
[404713] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[401642] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[106841] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[376049] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[385263] = {
["source"] = "Coastal Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 198782,
},
[395501] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["npcID"] = 192934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[450784] = {
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_START",
["npcID"] = 219984,
},
[271628] = {
["source"] = "Kaldorei Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 205892,
},
[371956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Terrasentry",
["npcID"] = 188011,
},
[455904] = {
["source"] = "Oozemodius",
["event"] = "SPELL_CAST_START",
["npcID"] = 220410,
},
[265487] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[440549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[256138] = {
["source"] = "Dazar'ai Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127799,
},
[451811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pious Disciple",
["npcID"] = 217464,
},
[407790] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[419052] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Future Self",
["npcID"] = 208959,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[440551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[449765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[414959] = {
["source"] = "Blazing Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205140,
},
[444648] = {
["source"] = "Riftwalker Nilara",
["event"] = "SPELL_CAST_START",
["npcID"] = 214644,
},
[157348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Storm Elemental",
["npcID"] = 77936,
},
[427245] = {
["source"] = "Hapless Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212981,
},
[403699] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[412914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Shadow",
["npcID"] = 205968,
},
[407796] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[400631] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[192158] = {
["encounterName"] = "Hyrja",
["source"] = "Olmyr the Enlightened",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97202,
},
[463081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Phalanx",
["npcID"] = 229782,
},
[410870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[379134] = {
["source"] = "Earthshaker Theurgist",
["event"] = "SPELL_CAST_START",
["npcID"] = 189230,
},
[376063] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Smoldering Hellion",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 191510,
},
[369921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Flametail",
["npcID"] = 210103,
},
[388349] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Eel",
["npcID"] = 215680,
},
[378112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nibbling Hornswog",
["npcID"] = 189026,
},
[383231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[410873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gust Soldier",
["npcID"] = 45477,
},
[431349] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Dark Architect",
["npcID"] = 213885,
},
[412922] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[374020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Containment Apparatus",
["npcID"] = 190342,
},
[443636] = {
["source"] = "Void Elf Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 221539,
},
[374022] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["npcID"] = 184986,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[383236] = {
["source"] = "Shimmerfin Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 220249,
},
[406783] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[383237] = {
["source"] = "Primal Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 187321,
},
[371976] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[414974] = {
["source"] = "Blazing Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 205140,
},
[411903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[443640] = {
["source"] = "Void Elf Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 221539,
},
[376073] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[404739] = {
["event"] = "SPELL_CAST_START",
["source"] = "First Mate Ovdah",
["npcID"] = 201182,
},
[442618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siege Dominator",
["npcID"] = 215601,
},
[271652] = {
["source"] = "Kaldorei Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 205892,
},
[40251] = {
["encounterName"] = "Teron Gorefiend",
["source"] = "Teron Gorefiend",
["npcID"] = 22871,
["event"] = "SPELL_CAST_START",
["encounterID"] = 604,
},
[259732] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[265511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spirit Drain Totem",
["npcID"] = 135169,
},
[396552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[371983] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[446717] = {
["source"] = "Elder Shadeweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 221102,
},
[411910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[400649] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["npcID"] = 198998,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2670,
},
[455932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[433410] = {
["source"] = "Chittering Fearmonger",
["event"] = "SPELL_CAST_START",
["npcID"] = 216583,
},
[258199] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[411912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[433411] = {
["source"] = "Nerubian Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 208242,
},
[377105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vault Guard",
["npcID"] = 190510,
},
[431364] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["npcID"] = 40633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[410890] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Warder",
["npcID"] = 205259,
},
[404748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Navigator Bi-Yun",
["npcID"] = 201184,
},
[40508] = {
["encounterName"] = "Gurtogg Bloodboil",
["source"] = "Gurtogg Bloodboil",
["npcID"] = 22948,
["event"] = "SPELL_CAST_START",
["encounterID"] = 605,
},
[396559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raszageth",
["npcID"] = 199031,
},
[394512] = {
["source"] = "Void Spawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 75652,
},
[411916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[214692] = {
["source"] = "Gerenth the Vile",
["event"] = "SPELL_CAST_START",
["npcID"] = 107435,
},
[215204] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Vigilant Duskwatch",
["npcID"] = 104918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1868,
},
[374038] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["npcID"] = 187767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[188587] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[153268] = {
["source"] = "Shadowmoon Exhumer",
["event"] = "SPELL_CAST_START",
["npcID"] = 77700,
},
[435465] = {
["source"] = "Machinist Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 219361,
},
[265523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[373017] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["npcID"] = 189886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[375065] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[404754] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Null Glimmer",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 202971,
},
[414992] = {
["source"] = "Burning Flamespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 205138,
},
[403731] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[414993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[444683] = {
["source"] = "Moss-Draped Ramolith",
["event"] = "SPELL_CAST_START",
["npcID"] = 223187,
},
[389401] = {
["source"] = "Shimmerfin Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 220249,
},
[374045] = {
["event"] = "SPELL_CAST_START",
["source"] = "Containment Apparatus",
["npcID"] = 190342,
},
[86633] = {
["encounterName"] = "Lord Overheat",
["source"] = "Lord Overheat",
["encounterID"] = 1145,
["event"] = "SPELL_CAST_START",
["npcID"] = 46264,
},
[373024] = {
["source"] = "Brackenhide Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 186220,
},
[199341] = {
["source"] = "Valarjar Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 96934,
},
[424212] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[385310] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Primalist Shockcaster",
["npcID"] = 195119,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[157368] = {
["source"] = "Void Aberration",
["event"] = "SPELL_CAST_START",
["npcID"] = 78088,
},
[426261] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[88170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turbulent Squall",
["npcID"] = 45924,
},
[403740] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[385313] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Primalist Shockcaster",
["npcID"] = 195119,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[403741] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[41150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Nightlord",
["npcID"] = 22855,
},
[448787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[384291] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Stegodon",
["npcID"] = 221876,
},
[384292] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Thunder Caller",
["encounterID"] = 2635,
["event"] = "SPELL_CAST_START",
["npcID"] = 194647,
},
[378150] = {
["source"] = "Primalist Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 189869,
},
[375079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Squallbringer Cyraz",
["npcID"] = 190370,
},
[445718] = {
["source"] = "Sparklit Rust Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212597,
},
[422172] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["encounterID"] = 2824,
["event"] = "SPELL_CAST_START",
["npcID"] = 200927,
},
[199345] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[420125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Roth the Earthwound",
["npcID"] = 226300,
},
[320822] = {
["source"] = "Zolramus Bonemender",
["event"] = "SPELL_CAST_START",
["npcID"] = 165222,
},
[86636] = {
["encounterName"] = "Lord Overheat",
["source"] = "Lord Overheat",
["encounterID"] = 1145,
["event"] = "SPELL_CAST_START",
["npcID"] = 46264,
},
[169657] = {
["source"] = "Twisted Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 84767,
},
[392486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Channeler",
["npcID"] = 198047,
},
[382249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trickclaw Mystic",
["npcID"] = 185528,
},
[444698] = {
["source"] = "Riftwalker Nilara",
["event"] = "SPELL_CAST_START",
["npcID"] = 214644,
},
[404772] = {
["source"] = "Grugoth the Hullcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200721,
},
[378155] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["npcID"] = 186125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[106856] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[264520] = {
["source"] = "Maddened Survivalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 131850,
},
[460057] = {
["source"] = "Queensguard An'Jak Shabtir",
["event"] = "SPELL_CAST_START",
["npcID"] = 219665,
},
[398634] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 200852,
},
[374066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Geomancer",
["npcID"] = 190345,
},
[391470] = {
["source"] = "Obsidian Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 189489,
},
[377140] = {
["event"] = "SPELL_CAST_START",
["source"] = "River Hornswog",
["npcID"] = 191618,
},
[201399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[388402] = {
["source"] = "Predatory Thresher",
["event"] = "SPELL_CAST_START",
["npcID"] = 198779,
},
[373046] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[375094] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swiftfoot Tallstrider",
["npcID"] = 195366,
},
[400688] = {
["source"] = "Wyrmslayer Angvardi",
["event"] = "SPELL_CAST_START",
["npcID"] = 201013,
},
[440615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Evoker",
["npcID"] = 220990,
},
[426283] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedheart Invader",
["npcID"] = 212389,
},
[399666] = {
["source"] = "Spellsworn Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 200598,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[374073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Geomancer",
["npcID"] = 190345,
},
[411952] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Timebender",
["npcID"] = 205337,
},
[416048] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[372027] = {
["encounterName"] = "The Primal Council",
["source"] = "Embar Firepath",
["npcID"] = 187767,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[389431] = {
["source"] = "Bazual",
["event"] = "SPELL_CAST_START",
["npcID"] = 193532,
},
[455975] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[405812] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[371005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Thrasher",
["npcID"] = 187139,
},
[425264] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[213688] = {
["source"] = "Fel Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 107024,
},
[388410] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[385339] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[419123] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[440622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Evoker",
["npcID"] = 220990,
},
[384316] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[411958] = {
["source"] = "Iridikron's Creation",
["event"] = "SPELL_CAST_START",
["npcID"] = 205691,
},
[374080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Ravager",
["npcID"] = 190348,
},
[403771] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[377154] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[394558] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Flame",
["npcID"] = 198577,
},
[444722] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[445746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Clawsmasher",
["npcID"] = 220985,
},
[426295] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[455984] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[383298] = {
["source"] = "Ignarion",
["event"] = "SPELL_CAST_START",
["npcID"] = 209360,
},
[405821] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[451890] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[41410] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Desire",
["npcID"] = 23419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[3110] = {
["encounterName"] = "Umbrelskul",
["source"] = "Huknagma",
["npcID"] = 416,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[428345] = {
["source"] = "Molten Scorpid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213696,
},
[389443] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["npcID"] = 196712,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[382277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Balara",
["npcID"] = 193457,
},
[234680] = {
["event"] = "SPELL_CAST_START",
["source"] = "Highlord Kruul",
["npcID"] = 117198,
},
[199361] = {
["source"] = "Valarjar Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 96934,
},
[387398] = {
["source"] = "Obsidian Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 189489,
},
[165578] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[409921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[406851] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[388424] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[372045] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Caustic Spiderling",
["npcID"] = 189233,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[106864] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[406854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Arcanist",
["npcID"] = 201736,
},
[432448] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Ritualist",
["npcID"] = 214761,
},
[372047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defier Draghar",
["npcID"] = 187897,
},
[377166] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[209602] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[274792] = {
["event"] = "SPELL_CAST_START",
["source"] = "Released Crawg",
["npcID"] = 140149,
},
[400714] = {
["source"] = "Nidharr",
["event"] = "SPELL_CAST_START",
["npcID"] = 201310,
},
[200901] = {
["encounterName"] = "Hyrja",
["source"] = "Solsten",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97219,
},
[317791] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[385359] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["npcID"] = 186116,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[317792] = {
["source"] = "Magus of the Dead",
["event"] = "SPELL_CAST_START",
["npcID"] = 163366,
},
[384336] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Plainstomper",
["npcID"] = 191847,
},
[419144] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[409931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["npcID"] = 216648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[428360] = {
["source"] = "Firelands Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210293,
},
[368983] = {
["source"] = "Raging Inferno",
["event"] = "SPELL_CAST_START",
["npcID"] = 194095,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[387411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulharvester Galtmaa",
["npcID"] = 195927,
},
[413005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Additive",
["npcID"] = 205672,
},
[368984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flameshaper Lorak",
["npcID"] = 197260,
},
[390483] = {
["source"] = "Wildwater Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 193599,
},
[372056] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["npcID"] = 187772,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[434505] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[444743] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Mage",
["npcID"] = 221760,
},
[398677] = {
["source"] = "Irontide Cutthroat",
["event"] = "SPELL_CAST_START",
["npcID"] = 200849,
},
[399701] = {
["source"] = "Swooping Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 199809,
},
[373084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontorch Commander",
["npcID"] = 189466,
},
[427343] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[440652] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[368990] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["encounterID"] = 2558,
["event"] = "SPELL_CAST_START",
["npcID"] = 184422,
},
[448843] = {
["source"] = "Candleclaw Underboss",
["event"] = "SPELL_CAST_START",
["npcID"] = 213831,
},
[413012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Additive",
["npcID"] = 205671,
},
[413013] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[373087] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["npcID"] = 189886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[427346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[152792] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[392539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Terrasentry",
["npcID"] = 197801,
},
[374112] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Frostbreath Arachnid",
["npcID"] = 189234,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[382303] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["npcID"] = 184018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2556,
},
[405850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drazos Blackwing",
["npcID"] = 205623,
},
[88186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empyrean Assassin",
["npcID"] = 45922,
},
[411994] = {
["isChanneled"] = true,
["source"] = "Infinite Chronoweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205384,
},
[384353] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["npcID"] = 186116,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[188114] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[389473] = {
["encounterName"] = "The Primal Council",
["source"] = "Lurking Lunker",
["npcID"] = 196946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[423257] = {
["source"] = "Druid of the Moon",
["event"] = "SPELL_CAST_START",
["npcID"] = 210686,
},
[396640] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Ancient Branch",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196548,
},
[387427] = {
["source"] = "Conjured Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200285,
},
[445781] = {
["source"] = "Shadow-seized Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 223866,
},
[423259] = {
["source"] = "Wildfire Blazekin",
["event"] = "SPELL_CAST_START",
["npcID"] = 210685,
},
[423260] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[413023] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[446807] = {
["source"] = "Bomb",
["event"] = "SPELL_CAST_START",
["npcID"] = 222787,
},
[193235] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[413024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valow, Timesworn Keeper",
["npcID"] = 201222,
},
[385383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[427357] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2569,
},
[410978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[396646] = {
["source"] = "Loamas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199030,
},
[260292] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[427359] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[385386] = {
["event"] = "SPELL_CAST_START",
["source"] = "Menial Attendant",
["npcID"] = 192702,
},
[423265] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[438622] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[406886] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[200404] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[88445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Marksman",
["npcID"] = 8338,
},
[384365] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Plainstomper",
["npcID"] = 191847,
},
[384366] = {
["source"] = "Remembered Owl",
["event"] = "SPELL_CAST_START",
["npcID"] = 221946,
},
[385390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[152801] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[372082] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[257736] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[389487] = {
["source"] = "Veteran Cauterizer",
["event"] = "SPELL_CAST_START",
["npcID"] = 200593,
},
[387440] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Beastcaller",
["npcID"] = 195878,
},
[418153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderclaw Stalker",
["npcID"] = 207084,
},
[40904] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[41032] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[49350] = {
["source"] = "Plague Eruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 27611,
},
[407917] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[404846] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[426345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Touched Elemental",
["npcID"] = 212400,
},
[372087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defier Draghar",
["npcID"] = 187897,
},
[374135] = {
["source"] = "Snowhorn Bruffalon",
["event"] = "SPELL_CAST_START",
["npcID"] = 192885,
},
[88959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[257739] = {
["source"] = "Blacktooth Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 129529,
},
[408946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[429422] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[463206] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[395639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
[372093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Blister",
["npcID"] = 197413,
},
[118905] = {
["encounterName"] = "Eranog",
["source"] = "Capacitor Totem",
["npcID"] = 61245,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[427376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[428400] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Burning Colossus",
["npcID"] = 207796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[413044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[396665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[440687] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[409975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[410999] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[387453] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[429427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[411000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[445808] = {
["source"] = "Heelripper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216555,
},
[411001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Tempest",
["npcID"] = 45704,
},
[392574] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Channeler",
["npcID"] = 198047,
},
[88194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[384385] = {
["source"] = "Frostcoat Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 203976,
},
[392576] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Channeler",
["npcID"] = 198047,
},
[264608] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[398720] = {
["source"] = "Irontide Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 200850,
},
[399744] = {
["source"] = "Spellsworn Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 200598,
},
[445813] = {
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 216328,
},
[406911] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sarek Cinderbreath",
["npcID"] = 205619,
},
[395650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conjured Nightmare",
["npcID"] = 199014,
},
[392579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quarry Stonebreaker",
["npcID"] = 197831,
},
[463218] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[407936] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[448888] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2839,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["npcID"] = 189232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[22121] = {
["source"] = "Timberstep Archer",
["event"] = "SPELL_CAST_START",
["npcID"] = 194041,
},
[152814] = {
["source"] = "Shadowmoon Bone-Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 75713,
},
[452985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siege Marshal Tekhzok",
["npcID"] = 215987,
},
[413059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Canister",
["npcID"] = 206019,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[413060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fire Canister",
["npcID"] = 206022,
},
[389514] = {
["source"] = "Bazual",
["event"] = "SPELL_CAST_START",
["npcID"] = 193532,
},
[431488] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Idriana",
["encounterID"] = 2677,
["event"] = "SPELL_CAST_START",
["npcID"] = 214211,
},
[424322] = {
["source"] = "Blazing Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 220815,
},
[400777] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[345495] = {
["source"] = "Frothing Pustule",
["event"] = "SPELL_CAST_START",
["npcID"] = 175519,
},
[376208] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[196838] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 99868,
},
[431491] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[457085] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[408969] = {
["source"] = "Monstrous Mud",
["event"] = "SPELL_CAST_START",
["npcID"] = 192519,
},
[389518] = {
["source"] = "Sparklit Buttonmasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 212596,
},
[408970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Preserver",
["npcID"] = 198870,
},
[431493] = {
["source"] = "Nightfall Curseblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 213894,
},
[152818] = {
["source"] = "Shadowmoon Bone-Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 75713,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[424328] = {
["source"] = "Waxtail Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 213000,
},
[258777] = {
["source"] = "Irontide Oarsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 127111,
},
[201959] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113536,
},
[198888] = {
["source"] = "Storm Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 97068,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[427402] = {
["source"] = "Cursed Rookguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 207197,
},
[210150] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[408975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Edgelord",
["npcID"] = 198873,
},
[389524] = {
["encounterName"] = "The Primal Council",
["source"] = "Lurking Lunker",
["npcID"] = 196946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[390548] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["npcID"] = 184986,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[401810] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[427404] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[278961] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diseased Lasher",
["npcID"] = 133870,
},
[257756] = {
["source"] = "Bilge Rat Buccaneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129527,
},
[395670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
[273844] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horde Shaman",
["npcID"] = 214169,
},
[170738] = {
["source"] = "Undermage Kesalon",
["event"] = "SPELL_CAST_START",
["npcID"] = 85496,
},
[273845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horde Shaman",
["npcID"] = 214169,
},
[385434] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[462216] = {
["source"] = "Twilight Flamerender",
["event"] = "SPELL_CAST_START",
["npcID"] = 224240,
},
[198892] = {
["source"] = "Storm Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 97068,
},
[406934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
[191726] = {
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 97022,
},
[125056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Otter",
["npcID"] = 165189,
},
[455052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supervisor Radlock",
["npcID"] = 220897,
},
[448910] = {
["source"] = "Darklost Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 216260,
},
[372129] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[375201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunwing Ohuna",
["npcID"] = 197007,
},
[405914] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[448912] = {
["source"] = "Shadowguard Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 216263,
},
[384416] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["npcID"] = 186116,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[418200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Riftmage",
["npcID"] = 208698,
},
[205549] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[321968] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tirnenn Villager",
["npcID"] = 164929,
},
[397726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrieking Whelp",
["npcID"] = 187159,
},
[183539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotdrool Grabber",
["npcID"] = 91002,
},
[418202] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Riftmage",
["npcID"] = 208698,
},
[444820] = {
["source"] = "Void Elf Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 221539,
},
[404896] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[459155] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[423324] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2880,
},
[400802] = {
["source"] = "Kalecgos",
["event"] = "SPELL_CAST_START",
["npcID"] = 187676,
},
[191732] = {
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 97022,
},
[235242] = {
["encounterName"] = "Fury of the God Queen",
["event"] = "SPELL_CAST_START",
["source"] = "Agatha",
["npcID"] = 115638,
},
[434589] = {
["source"] = "Overfiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 217429,
},
[424352] = {
["encounterName"] = "Gnarlroot",
["source"] = "Gnarlroot",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 209333,
},
[381357] = {
["source"] = "Saltwhisker Ottuk",
["event"] = "SPELL_CAST_START",
["npcID"] = 199784,
},
[425379] = {
["source"] = "Flamespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 210294,
},
[369073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plainswalker Bull",
["npcID"] = 187937,
},
[405929] = {
["source"] = "Spellsworn Crecheguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 203368,
},
[396717] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[395694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Shocktrooper",
["npcID"] = 199037,
},
[340412] = {
["source"] = "Forgotten Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 202446,
},
[388529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seabreaker Skrog",
["npcID"] = 192931,
},
[435622] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[20716] = {
["source"] = "Bronze Shrine Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 26277,
},
[340414] = {
["source"] = "Forgotten Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 202446,
},
[183548] = {
["source"] = "Stoneclaw Grubmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 102404,
},
[372151] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gutchewer Bear",
["npcID"] = 186284,
},
[377270] = {
["source"] = "Shimmerfin Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 220246,
},
[447909] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[421292] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208365,
},
[459171] = {
["source"] = "Val'kyr Shadowguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 227940,
},
[425388] = {
["source"] = "Flamewaker Infernoguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210295,
},
[394676] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Icecaller",
["npcID"] = 198501,
},
[403890] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[409009] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[412081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[413105] = {
["encounterName"] = "Chronikar",
["source"] = "Chronikar",
["encounterID"] = 2666,
["event"] = "SPELL_CAST_START",
["npcID"] = 198995,
},
[404916] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["npcID"] = 198999,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2671,
},
[452009] = {
["source"] = "Hijacked Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 219287,
},
[425392] = {
["source"] = "Flamewaker Infernoguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 210295,
},
[386490] = {
["encounterName"] = "Granyth",
["source"] = "Nokhud Saboteur",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 195820,
},
[377277] = {
["source"] = "Volethi",
["event"] = "SPELL_CAST_START",
["npcID"] = 200727,
},
[391610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gusting Proto-Dragon",
["npcID"] = 190401,
},
[425394] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[250096] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[392635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaurdyth",
["npcID"] = 197835,
},
[389564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominant Salamanther",
["npcID"] = 225921,
},
[395707] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raszageth",
["npcID"] = 199031,
},
[114571] = {
["encounterName"] = "Lorewalker Stonestep",
["source"] = "Strife",
["encounterID"] = 1417,
["event"] = "SPELL_CAST_START",
["npcID"] = 59051,
},
[391613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subterranean Proto-Dragon",
["npcID"] = 190404,
},
[376257] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191225,
},
[398780] = {
["source"] = "Farscale Myrmidon",
["event"] = "SPELL_CAST_START",
["npcID"] = 200485,
},
[409018] = {
["event"] = "SPELL_CAST_START",
["source"] = "Failed Prototype",
["npcID"] = 203927,
},
[447921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siltsliver",
["npcID"] = 220236,
},
[432565] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifested Shadow",
["npcID"] = 211341,
},
[388544] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[398782] = {
["source"] = "Farscale Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200484,
},
[428471] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Manifested Dream",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 213143,
},
[392640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunderhead",
["npcID"] = 197698,
},
[201983] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[41426] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Desire",
["npcID"] = 23419,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[431544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stalwart Hauler",
["npcID"] = 214935,
},
[374215] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["npcID"] = 184986,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[396739] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mossy Gulper",
["npcID"] = 195762,
},
[345552] = {
["source"] = "Rulkros",
["event"] = "SPELL_CAST_START",
["npcID"] = 166263,
},
[431549] = {
["source"] = "Nerubian Venomspitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 219661,
},
[387528] = {
["source"] = "Earthborne Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 201471,
},
[404932] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[459191] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Lich King",
["npcID"] = 224157,
},
[382410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trickclaw Mystic",
["npcID"] = 185528,
},
[41171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Heartseeker",
["npcID"] = 23339,
},
[431552] = {
["source"] = "Direweb Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 221303,
},
[402888] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[421316] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[427459] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[400842] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Keeneye",
["npcID"] = 208660,
},
[456125] = {
["source"] = "Shadowsting Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 222872,
},
[375249] = {
["source"] = "Whitecrested Waddler",
["event"] = "SPELL_CAST_START",
["npcID"] = 196240,
},
[401867] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["encounterID"] = 2682,
["event"] = "SPELL_CAST_START",
["npcID"] = 200836,
},
[398796] = {
["source"] = "Farscale Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 200486,
},
[257784] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[375251] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["npcID"] = 181861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[437700] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[413131] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[369110] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["npcID"] = 184422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2558,
},
[391634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacial Proto-Dragon",
["npcID"] = 190403,
},
[394706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Frost",
["npcID"] = 198702,
},
[376279] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[421325] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[200969] = {
["source"] = "King Tor",
["event"] = "SPELL_CAST_START",
["npcID"] = 97084,
},
[409041] = {
["event"] = "SPELL_CAST_START",
["source"] = "Failed Prototype",
["npcID"] = 203927,
},
[427469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[264694] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[456136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkshade",
["npcID"] = 218452,
},
[397783] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[420306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[392665] = {
["source"] = "Thunderspine Crasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 191057,
},
[456138] = {
["source"] = "Grimlurk",
["event"] = "SPELL_CAST_START",
["npcID"] = 223091,
},
[412117] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[384476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Longbow",
["npcID"] = 192789,
},
[410070] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[386526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nullmagic Hornswog",
["npcID"] = 187246,
},
[413145] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[209676] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[382434] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[413147] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[451026] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[382435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decay Speaker",
["npcID"] = 186191,
},
[408029] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Loszkeleth",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201790,
},
[437719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Galesinger",
["npcID"] = 190373,
},
[242950] = {
["encounterName"] = "Fury of the God Queen",
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Imp",
["npcID"] = 115642,
},
[282110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaldorei Archer",
["npcID"] = 210645,
},
[413151] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["npcID"] = 43878,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[407009] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Ignara",
["npcID"] = 202791,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[8858] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Iron Excavator",
["npcID"] = 47276,
},
[412129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[421343] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["encounterID"] = 2824,
["event"] = "SPELL_CAST_START",
["npcID"] = 200927,
},
[396774] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earthshaper",
["npcID"] = 190996,
},
[396775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earthshaper",
["npcID"] = 190996,
},
[41303] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Suffering",
["npcID"] = 23418,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[403943] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[384492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Beastmaster",
["npcID"] = 192794,
},
[397801] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[387564] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conjured Lasher",
["npcID"] = 196102,
},
[384493] = {
["source"] = "Shikaar Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 184657,
},
[385517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbow Sentry",
["npcID"] = 187021,
},
[394731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Earth",
["npcID"] = 198709,
},
[424420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[412136] = {
["event"] = "SPELL_CAST_START",
["source"] = "Valow, Timesworn Keeper",
["npcID"] = 201222,
},
[396780] = {
["source"] = "Rimebound Subjugator",
["event"] = "SPELL_CAST_START",
["npcID"] = 195837,
},
[414184] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[257288] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Cleaver",
["npcID"] = 129879,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2098,
},
[265741] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[424423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
},
[400877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Hound",
["npcID"] = 205045,
},
[40536] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Akama",
["npcID"] = 23089,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[386546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Elemental",
["npcID"] = 186741,
},
[386547] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[387571] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[429545] = {
["source"] = "Voidtouched Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223469,
},
[427498] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[381430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quaking Rager",
["npcID"] = 215359,
},
[392692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Quilboar",
["npcID"] = 221743,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[377338] = {
["source"] = "Aqualing",
["event"] = "SPELL_CAST_START",
["npcID"] = 190406,
},
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[404980] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[41305] = {
["encounterName"] = "Reliquary of Souls",
["source"] = "Essence of Suffering",
["npcID"] = 23418,
["event"] = "SPELL_CAST_START",
["encounterID"] = 606,
},
[404982] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[377341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqua Rager",
["npcID"] = 190407,
},
[423410] = {
["source"] = "Lethka",
["event"] = "SPELL_CAST_START",
["npcID"] = 208740,
},
[392698] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Quilboar",
["npcID"] = 221743,
},
[459242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[400889] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[381438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Steam Scaulder",
["npcID"] = 194937,
},
[375296] = {
["source"] = "Spellsworn Crechebound",
["event"] = "SPELL_CAST_START",
["npcID"] = 200587,
},
[445935] = {
["source"] = "Bomb",
["event"] = "SPELL_CAST_START",
["npcID"] = 222265,
},
[377344] = {
["source"] = "Territorial Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192329,
},
[372226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonetender",
["npcID"] = 189265,
},
[427509] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83893,
},
[192288] = {
["encounterName"] = "Hyrja",
["source"] = "Olmyr the Enlightened",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 97202,
},
[385536] = {
["isChanneled"] = true,
["source"] = "Primalist Flamedancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 190206,
},
[387585] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[278044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morlash",
["npcID"] = 201549,
},
[422393] = {
["source"] = "Skittering Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 208457,
},
[265760] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[381444] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["npcID"] = 186122,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[420347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaldorei Archdruid",
["npcID"] = 211066,
},
[400896] = {
["source"] = "Rampant Tide",
["event"] = "SPELL_CAST_START",
["npcID"] = 201463,
},
[225562] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodtainted Burster",
["npcID"] = 100532,
},
[193826] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[450037] = {
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220068,
},
[458228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'ata",
["npcID"] = 219855,
},
[419327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Timeline Marauder",
["npcID"] = 199748,
},
[416256] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron's Creation",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 204918,
},
[382474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decay Speaker",
["npcID"] = 186191,
},
[432638] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[433662] = {
["isChanneled"] = true,
["source"] = "Reinforced Drone",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216856,
},
[49241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ruby Watcher",
["npcID"] = 27542,
},
[407045] = {
["source"] = "Ookbeard",
["event"] = "SPELL_CAST_START",
["npcID"] = 200956,
},
[395784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raszageth",
["npcID"] = 199031,
},
[409093] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[444925] = {
["source"] = "Underground Spore",
["event"] = "SPELL_CAST_START",
["npcID"] = 215235,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Watcher Irideus",
["npcID"] = 189719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[387596] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Mystic",
["npcID"] = 195877,
},
[394763] = {
["source"] = "Private Shikzar",
["event"] = "SPELL_CAST_START",
["npcID"] = 193127,
},
[426500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarlroot",
["npcID"] = 81984,
},
[403978] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[396812] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[385551] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[394765] = {
["source"] = "Igneous Stonemauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210043,
},
[400908] = {
["source"] = "Suffocating Menace",
["event"] = "SPELL_CAST_START",
["npcID"] = 201644,
},
[385553] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Stormseeker Acolyte",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 194990,
},
[448002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Great Stormfang",
["npcID"] = 216017,
},
[391696] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["npcID"] = 190690,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[153395] = {
["source"] = "Carrion Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 76057,
},
[267824] = {
["source"] = "Soul Essence",
["event"] = "SPELL_CAST_START",
["npcID"] = 135240,
},
[212773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Reinforcement",
["npcID"] = 107073,
},
[422414] = {
["source"] = "Shuffling Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 208456,
},
[456198] = {
["source"] = "Smaragthr",
["event"] = "SPELL_CAST_START",
["npcID"] = 220362,
},
[395797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Frostsculptor",
["npcID"] = 198424,
},
[117665] = {
["encounterName"] = "Sha of Doubt",
["source"] = "Sha of Doubt",
["encounterID"] = 1439,
["event"] = "SPELL_CAST_START",
["npcID"] = 56439,
},
[415250] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[41053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Champion",
["npcID"] = 22880,
},
[378397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthenforged Invader",
["npcID"] = 190737,
},
[396825] = {
["source"] = "Rimebound Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 195836,
},
[373279] = {
["source"] = "Thing From Beyond",
["event"] = "SPELL_CAST_START",
["npcID"] = 189988,
},
[415253] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invasive Sporecap",
["npcID"] = 207482,
},
[375327] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subterranean Proto-Dragon",
["npcID"] = 190404,
},
[405016] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[381470] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Tricktotem",
["encounterID"] = 2570,
["event"] = "SPELL_CAST_START",
["npcID"] = 186125,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[387613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Corruptor",
["npcID"] = 195842,
},
[425492] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[434706] = {
["source"] = "Tasting Room Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214920,
},
[387614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Deathspeaker",
["npcID"] = 195851,
},
[392733] = {
["source"] = "Springshell Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 196619,
},
[419351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Saboteur",
["npcID"] = 208438,
},
[392734] = {
["source"] = "Sundered Pillager",
["event"] = "SPELL_CAST_START",
["npcID"] = 199374,
},
[431637] = {
["source"] = "Nightfall Shadowalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 213895,
},
[375331] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[426519] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[407069] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[387618] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primalist Infuser",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 196043,
},
[421402] = {
["source"] = "Primalist Pyremancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 209963,
},
[388643] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[258338] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[456211] = {
["source"] = "Smaragthr",
["event"] = "SPELL_CAST_START",
["npcID"] = 220362,
},
[445974] = {
["source"] = "Bomb",
["event"] = "SPELL_CAST_START",
["npcID"] = 222281,
},
[377383] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[192307] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[426524] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Fiery Treant",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208459,
},
[198962] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[191284] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[431645] = {
["source"] = "Dark Apothecary",
["event"] = "SPELL_CAST_START",
["npcID"] = 219651,
},
[198963] = {
["encounterName"] = "Naraxas",
["source"] = "Naraxas",
["encounterID"] = 1792,
["event"] = "SPELL_CAST_START",
["npcID"] = 91005,
},
[204082] = {
["source"] = "Felsoul Wrathguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 116206,
},
[212784] = {
["source"] = "Watchful Inquisitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 105715,
},
[385578] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[41183] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Stormcaller",
["npcID"] = 22846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[395816] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Ashwarden",
["npcID"] = 208659,
},
[377389] = {
["source"] = "Alpha Eagle",
["event"] = "SPELL_CAST_START",
["npcID"] = 192333,
},
[378413] = {
["source"] = "Frenzied Tidecore",
["event"] = "SPELL_CAST_START",
["npcID"] = 213699,
},
[391723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamegullet",
["npcID"] = 197697,
},
[235308] = {
["source"] = "Karam Magespear",
["event"] = "SPELL_CAST_START",
["npcID"] = 116410,
},
[448030] = {
["source"] = "Agile Pursuer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223181,
},
[387629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Desecrated Ohuna",
["npcID"] = 195876,
},
[212786] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[451102] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Ascendant Vis'coxria",
["npcID"] = 211261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[412200] = {
["source"] = "Time-Lost Aerobot",
["event"] = "SPELL_CAST_START",
["npcID"] = 205723,
},
[445984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hilltop Jawcrawler",
["npcID"] = 227980,
},
[391726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunderhead",
["npcID"] = 197698,
},
[400941] = {
["source"] = "Scattered Bones",
["event"] = "SPELL_CAST_START",
["npcID"] = 201660,
},
[402989] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[375348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gusting Proto-Dragon",
["npcID"] = 190401,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["npcID"] = 164804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2397,
},
[237870] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[378420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonegrabber Shard",
["npcID"] = 187506,
},
[451107] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[372279] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[279118] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[394802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Stormcaller",
["npcID"] = 198502,
},
[375351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glacial Proto-Dragon",
["npcID"] = 190403,
},
[452133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[393780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Flame",
["npcID"] = 184693,
},
[431659] = {
["source"] = "Clotweave Widow",
["event"] = "SPELL_CAST_START",
["npcID"] = 216193,
},
[405042] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[426541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Disciple",
["npcID"] = 131685,
},
[260907] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[377402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infuser Sariya",
["npcID"] = 190405,
},
[396854] = {
["source"] = "Spellsworn Crecheguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 203368,
},
[397878] = {
["source"] = "Corrupt Living Water",
["event"] = "SPELL_CAST_START",
["npcID"] = 59873,
},
[453161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[429615] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[451114] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Animated Darkness",
["npcID"] = 213905,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[378428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Avalanche",
["npcID"] = 187082,
},
[445996] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[395833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Recalled Thorim",
["npcID"] = 221923,
},
[397881] = {
["source"] = "Corrupt Living Water",
["event"] = "SPELL_CAST_START",
["npcID"] = 59873,
},
[390715] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[393787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iskakx",
["npcID"] = 192761,
},
[412215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[448047] = {
["isChanneled"] = true,
["source"] = "Pale Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223646,
},
[449071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[235317] = {
["source"] = "Raest Magespear",
["event"] = "SPELL_CAST_START",
["npcID"] = 116409,
},
[451119] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[404027] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[396861] = {
["source"] = "Arcane Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 203434,
},
[374339] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Defender",
["npcID"] = 190340,
},
[384577] = {
["encounterName"] = "Gutshot",
["source"] = "Rotfang Hyena",
["npcID"] = 194745,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[397886] = {
["source"] = "Corrupt Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 62358,
},
[154442] = {
["encounterName"] = "Ner'zhul",
["source"] = "Ner'zhul",
["encounterID"] = 1682,
["event"] = "SPELL_CAST_START",
["npcID"] = 76407,
},
[41058] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whirling Blade",
["npcID"] = 23369,
},
[41186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
},
[397888] = {
["source"] = "Fallen Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 200126,
},
[397889] = {
["source"] = "Fallen Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 200126,
},
[374343] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[387652] = {
["source"] = "Zurkharus",
["event"] = "SPELL_CAST_START",
["npcID"] = 197748,
},
[372296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontorch Commander",
["npcID"] = 189466,
},
[427579] = {
["source"] = "Stalwart Bristlebruin",
["event"] = "SPELL_CAST_START",
["npcID"] = 210507,
},
[380487] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[381512] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["npcID"] = 190485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[427581] = {
["source"] = "Stalwart Bristlebruin",
["event"] = "SPELL_CAST_START",
["npcID"] = 210507,
},
[444985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shacklefang Hornet",
["npcID"] = 223178,
},
[426260] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[9053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowforge Surveyor",
["npcID"] = 4844,
},
[234676] = {
["source"] = "Highlord Kruul",
["event"] = "SPELL_CAST_START",
["npcID"] = 117198,
},
[236572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Highlord Kruul",
["npcID"] = 117198,
},
[427583] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[387657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneheart",
["npcID"] = 187387,
},
[425536] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[459246] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Broken Queen",
["npcID"] = 214368,
},
[41187] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[449965] = {
["source"] = "Vileroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 214783,
},
[440195] = {
["source"] = "Wanton Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 225338,
},
[377421] = {
["source"] = "Shadepelt Prowler",
["event"] = "SPELL_CAST_START",
["npcID"] = 189852,
},
[427585] = {
["source"] = "Stalwart Bristlebruin",
["event"] = "SPELL_CAST_START",
["npcID"] = 210507,
},
[420419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[204611] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[373327] = {
["encounterName"] = "Eranog",
["source"] = "Primal Flame",
["npcID"] = 187593,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[452156] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[240763] = {
["source"] = "Nether Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 118044,
},
[459229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[293954] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eclipsing Grasp",
["npcID"] = 218693,
},
[415624] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[462826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Explosive Bomberbot",
["npcID"] = 229706,
},
[439646] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["npcID"] = 216658,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2909,
},
[397899] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[378850] = {
["source"] = "Babbling Book",
["event"] = "SPELL_CAST_START",
["npcID"] = 223852,
},
[420422] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[295028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[439401] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[370259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthenforged Invader",
["npcID"] = 190737,
},
[451098] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Sureki Militant",
["npcID"] = 213932,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[449815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandres the Relicbearer",
["npcID"] = 217534,
},
[434756] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[386640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarasek Looter",
["npcID"] = 187242,
},
[456745] = {
["source"] = "Dark Proselityzer",
["event"] = "SPELL_CAST_START",
["npcID"] = 224898,
},
[441381] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[453776] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Titan Construct",
["npcID"] = 212213,
},
[439637] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Echoing Shade",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 219675,
},
[395855] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mossy Gulper",
["npcID"] = 195762,
},
[449714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[452162] = {
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223844,
},
[41188] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Primalist",
["npcID"] = 22847,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[372310] = {
["source"] = "Wrathful Chill",
["event"] = "SPELL_CAST_START",
["npcID"] = 197754,
},
[397904] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[394833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plainswalker Bull",
["npcID"] = 187937,
},
[436180] = {
["source"] = "Rampant Air Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215048,
},
[372311] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Trainee",
["npcID"] = 189266,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["npcID"] = 190484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[378454] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Avalanche",
["npcID"] = 187082,
},
[387668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Crag",
["npcID"] = 195243,
},
[384597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Warden",
["npcID"] = 193293,
},
[265759] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[391050] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Channeler Ryvati",
["npcID"] = 197535,
},
[375384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Earthshaker",
["npcID"] = 190371,
},
[199805] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[397907] = {
["source"] = "Baalgar the Watchful",
["event"] = "SPELL_CAST_START",
["npcID"] = 104274,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[395860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mossy Gulper",
["npcID"] = 195762,
},
[443436] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[208165] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["encounterID"] = 1869,
["event"] = "SPELL_CAST_START",
["npcID"] = 104217,
},
[439341] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[438823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diabolic Imp",
["npcID"] = 219161,
},
[372315] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["npcID"] = 187771,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[451099] = {
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 213932,
},
[446776] = {
["event"] = "SPELL_CAST_START",
["source"] = "War Lynx",
["npcID"] = 206699,
},
[431333] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[388696] = {
["source"] = "Gahz'raxes",
["event"] = "SPELL_CAST_START",
["npcID"] = 200537,
},
[381530] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Thunderfist",
["npcID"] = 193373,
},
[452169] = {
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 211858,
},
[375388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Watercaller",
["npcID"] = 190995,
},
[434722] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[426576] = {
["source"] = "Dream Seedling",
["event"] = "SPELL_CAST_START",
["npcID"] = 211339,
},
[382555] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bracken Warscourge",
["npcID"] = 185529,
},
[436205] = {
["source"] = "Unstable Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 216328,
},
[403576] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[451117] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixkreten the Unbreakable",
["npcID"] = 211262,
},
[452171] = {
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_START",
["npcID"] = 216578,
},
[428625] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[409174] = {
["source"] = "Incarnation of Entropy",
["event"] = "SPELL_CAST_START",
["npcID"] = 203811,
},
[423305] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[431697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Eradicator",
["npcID"] = 225408,
},
[445559] = {
["source"] = "Queensguard Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 211858,
},
[443507] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[397914] = {
["source"] = "Depraved Mistweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200137,
},
[426905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minion of Ghur'sha",
["npcID"] = 212778,
},
[183633] = {
["source"] = "Rockbound Pelter",
["event"] = "SPELL_CAST_START",
["npcID"] = 91008,
},
[423479] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[389725] = {
["source"] = "Bazual",
["event"] = "SPELL_CAST_START",
["npcID"] = 193532,
},
[403034] = {
["source"] = "Fyrakk",
["event"] = "SPELL_CAST_START",
["npcID"] = 200832,
},
[447458] = {
["source"] = "Queen Rickiticka",
["event"] = "SPELL_CAST_START",
["npcID"] = 215772,
},
[409177] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[427157] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[439692] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[200261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soul-Torn Champion",
["npcID"] = 98243,
},
[450128] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[237879] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[340300] = {
["source"] = "Mistveil Gorgegullet",
["event"] = "SPELL_CAST_START",
["npcID"] = 173720,
},
[453200] = {
["source"] = "Cragmund",
["event"] = "SPELL_CAST_START",
["npcID"] = 220269,
},
[253517] = {
["source"] = "Dazar'ai Confessor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122973,
},
[434773] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[452177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Reserve",
["npcID"] = 214429,
},
[261440] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[200291] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Scout",
["npcID"] = 98691,
},
[321834] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["npcID"] = 164501,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2392,
},
[382563] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["npcID"] = 184986,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[395872] = {
["source"] = "The Talking Fish",
["event"] = "SPELL_CAST_START",
["npcID"] = 59546,
},
[425561] = {
["source"] = "Pack Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 211977,
},
[449090] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Careless Hopgoblin",
["npcID"] = 223423,
},
[427609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Knight",
["npcID"] = 206696,
},
[387683] = {
["source"] = "Zurkharus",
["event"] = "SPELL_CAST_START",
["npcID"] = 197748,
},
[432036] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[394114] = {
["source"] = "S.A.V.I.O.R.",
["event"] = "SPELL_CAST_START",
["npcID"] = 195328,
},
[386660] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[387684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Spire",
["npcID"] = 195348,
},
[372615] = {
["npcID"] = 189247,
},
[435560] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[459210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Bound Despoiler",
["npcID"] = 212765,
},
[439467] = {
["source"] = "Yes Man",
["event"] = "SPELL_CAST_START",
["npcID"] = 219588,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[153067] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["npcID"] = 75829,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1688,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[371306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Elemental",
["npcID"] = 186741,
},
[428019] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["npcID"] = 216619,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2907,
},
[437721] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[439524] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[376426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Drip",
["npcID"] = 197218,
},
[450613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamekeeper Graz",
["npcID"] = 219279,
},
[373636] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203384,
},
[395878] = {
["source"] = "The Talking Fish",
["event"] = "SPELL_CAST_START",
["npcID"] = 59546,
},
[448640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[428563] = {
["source"] = "Kobold Flametender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213913,
},
[198934] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[450756] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[393832] = {
["source"] = "Sturdy Gladehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 196655,
},
[411236] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[255814] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[400999] = {
["source"] = "Bonesifter Marwak",
["event"] = "SPELL_CAST_START",
["npcID"] = 200681,
},
[392569] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamegullet",
["npcID"] = 197697,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[257862] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["encounterID"] = 2099,
["event"] = "SPELL_CAST_START",
["npcID"] = 128651,
},
[384620] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[169445] = {
["source"] = "Twisted Abomination",
["event"] = "SPELL_CAST_START",
["npcID"] = 84767,
},
[426596] = {
["source"] = "Coven Diviner",
["event"] = "SPELL_CAST_START",
["npcID"] = 131819,
},
[165213] = {
["source"] = "Everbloom Cultivator",
["event"] = "SPELL_CAST_START",
["npcID"] = 81985,
},
[388716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[459355] = {
["source"] = "Remembered Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 221585,
},
[431714] = {
["source"] = "Dark Apothecary",
["event"] = "SPELL_CAST_START",
["npcID"] = 219651,
},
[371313] = {
["source"] = "Portalkeeper Cimbra",
["event"] = "SPELL_CAST_START",
["npcID"] = 202613,
},
[396907] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Yu'lon",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56762,
},
[434786] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nakt",
["npcID"] = 218324,
},
[386559] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["encounterID"] = 2617,
["event"] = "SPELL_CAST_START",
["npcID"] = 189727,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["npcID"] = 100485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1833,
},
[425573] = {
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 210423,
},
[438826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Atik",
["npcID"] = 217533,
},
[444946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormtop Terralisk",
["npcID"] = 214581,
},
[431303] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[436637] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Void Chunk",
["encounterID"] = 2836,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213684,
},
[432035] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hairless the Menace",
["npcID"] = 213550,
},
[391791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Furious Deluge",
["npcID"] = 197220,
},
[448429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Mystic",
["npcID"] = 203878,
},
[373364] = {
["source"] = "Gerenth the Vile",
["event"] = "SPELL_CAST_START",
["npcID"] = 107435,
},
[382578] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Guardian",
["npcID"] = 184131,
},
[432127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boroughbreaker Stik'kar",
["npcID"] = 226294,
},
[433766] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[428202] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[391793] = {
["event"] = "SPELL_CAST_START",
["source"] = "Furious Deluge",
["npcID"] = 197220,
},
[426145] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[438877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nakt",
["npcID"] = 218324,
},
[421746] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Stonewarmer",
["npcID"] = 210235,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[385652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Crag",
["npcID"] = 195243,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2880,
},
[177731] = {
["encounterName"] = "Witherbark",
["source"] = "Enchanted Waters",
["encounterID"] = 1746,
["event"] = "SPELL_CAST_START",
["npcID"] = 88862,
},
[440876] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[410223] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[403057] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[383452] = {
["source"] = "Imbu Bakar",
["event"] = "SPELL_CAST_START",
["npcID"] = 190745,
},
[441518] = {
["source"] = "Failed Batch",
["event"] = "SPELL_CAST_START",
["npcID"] = 220368,
},
[386555] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
},
[387960] = {
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219619,
},
[385531] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[265876] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[427629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fervent Sharpshooter",
["npcID"] = 206694,
},
[395893] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[456295] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[200154] = {
["source"] = "Understone Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 102253,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["npcID"] = 40320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1048,
},
[391799] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morlash",
["npcID"] = 201549,
},
[450153] = {
["source"] = "Vileroot",
["event"] = "SPELL_CAST_START",
["npcID"] = 214783,
},
[384633] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["npcID"] = 186116,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[375420] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wildwater Timbertooth",
["npcID"] = 193405,
},
[452153] = {
["source"] = "Candlelit Ouchpatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214252,
},
[455273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepsludger",
["npcID"] = 216536,
},
[40086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dragon Turtle",
["npcID"] = 22885,
},
[429110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgebound Mender",
["npcID"] = 213338,
},
[265880] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2880,
},
[256846] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[461836] = {
["source"] = "Flickerflame Candleflyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219341,
},
[265881] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[405361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[407159] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Blight of Galakrond",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 198997,
},
[387708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyrhold Watcher",
["npcID"] = 192696,
},
[188927] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfiend Dreamtwister",
["npcID"] = 92788,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["npcID"] = 211290,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[260697] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[395899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Chillblaster",
["npcID"] = 199124,
},
[449960] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Kobyss",
["npcID"] = 215750,
},
[455277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[193375] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[449135] = {
["source"] = "Flickerflame Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212542,
},
[255824] = {
["source"] = "Dazar'ai Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 122971,
},
[422518] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[370307] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[375671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Watercaller",
["npcID"] = 190995,
},
[396925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 197149,
},
[441410] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[382593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cruel Bonecrusher",
["npcID"] = 186206,
},
[200700] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[431734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadesworn Crusher",
["npcID"] = 218527,
},
[381570] = {
["source"] = "Unleashed Earth",
["event"] = "SPELL_CAST_START",
["npcID"] = 200777,
},
[256849] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[412283] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadful Defender",
["npcID"] = 203842,
},
[401022] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[455281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidelord Teethwretch",
["npcID"] = 216527,
},
[459938] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[209033] = {
["source"] = "Duskwatch Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 104246,
},
[198496] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[442997] = {
["source"] = "Void Elf Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215597,
},
[446325] = {
["source"] = "Resplendent Peafowl",
["event"] = "SPELL_CAST_START",
["npcID"] = 214949,
},
[446000] = {
["source"] = "Deeps Larva",
["event"] = "SPELL_CAST_START",
["npcID"] = 215733,
},
[434802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixin",
["npcID"] = 217531,
},
[442998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[427260] = {
["source"] = "Cursed Rooktender",
["event"] = "SPELL_CAST_START",
["npcID"] = 207199,
},
[420476] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[433785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reinforced Drone",
["npcID"] = 216363,
},
[393859] = {
["source"] = "Invasive Scalecrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 199533,
},
[442995] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[397897] = {
["source"] = "Jazshariu",
["event"] = "SPELL_CAST_START",
["npcID"] = 104273,
},
[421501] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208367,
},
[418430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Familiar",
["npcID"] = 221904,
},
[386694] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormsurge Totem",
["npcID"] = 194897,
},
[395908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Icebulk",
["npcID"] = 192767,
},
[409217] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[443001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Hierophant",
["npcID"] = 214398,
},
[448820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[429428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earth Burst Totem",
["npcID"] = 214287,
},
[415773] = {
["source"] = "Interval",
["event"] = "SPELL_CAST_START",
["npcID"] = 206065,
},
[84165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempered War Golem",
["npcID"] = 5853,
},
[398981] = {
["source"] = "Stalwart Broodwarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 198263,
},
[424462] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[440205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[435148] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Footman",
["npcID"] = 212835,
},
[40683] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[157355] = {
["source"] = "Voidseer Kalurg",
["event"] = "SPELL_CAST_START",
["npcID"] = 83385,
},
[456101] = {
["source"] = "Reconstructed Skardyn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219245,
},
[425315] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[404732] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[451423] = {
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_START",
["npcID"] = 219984,
},
[413544] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[387290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Bloodpetal",
["npcID"] = 221880,
},
[450718] = {
["source"] = "Siegelord Xerosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 224311,
},
[381575] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustpine Immolator",
["npcID"] = 187396,
},
[261438] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[418436] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Familiar",
["npcID"] = 221904,
},
[398985] = {
["source"] = "Broodguardian Ziruss",
["event"] = "SPELL_CAST_START",
["npcID"] = 198214,
},
[375439] = {
["encounterName"] = "Magmatusk",
["source"] = "Magmatusk",
["npcID"] = 181861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[381582] = {
["source"] = "Spellsworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 200284,
},
[394891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Braekkas",
["npcID"] = 196855,
},
[452024] = {
["source"] = "Earthenwork Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 213951,
},
[135029] = {
["source"] = "Water Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 78116,
},
[377488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Seal Keeper",
["npcID"] = 187155,
},
[427484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Conjuror",
["npcID"] = 206698,
},
[424581] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[430179] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[211299] = {
["source"] = "Watchful Inquisitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 105715,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[448791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ardent Paladin",
["npcID"] = 206704,
},
[450176] = {
["source"] = "Nerubian Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 208243,
},
[373395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Defender",
["npcID"] = 199717,
},
[456319] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[398394] = {
["source"] = "Shaleshell Clicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 220155,
},
[11021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Searing Whelp",
["npcID"] = 4324,
},
[257478] = {
["source"] = "Irontide Mastiff",
["event"] = "SPELL_CAST_START",
["npcID"] = 128551,
},
[445910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 213434,
},
[449154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[200551] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[272046] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Sharkbait",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126841,
},
[456321] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aelric Leid",
["npcID"] = 213208,
},
[420490] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crustbreaker Conduit",
["npcID"] = 207038,
},
[169839] = {
["source"] = "Putrid Pyromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84957,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["npcID"] = 213217,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[427657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[375446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunhide Stomphoof",
["npcID"] = 187960,
},
[450180] = {
["source"] = "Coal Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 219726,
},
[434824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nakt",
["npcID"] = 218324,
},
[169840] = {
["source"] = "Infested Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 84989,
},
[387732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Custodial Protector",
["npcID"] = 192694,
},
[446086] = {
["source"] = "Sureki Unnaturaler",
["event"] = "SPELL_CAST_START",
["npcID"] = 216339,
},
[448347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[424421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taener Duelmal",
["npcID"] = 211289,
},
[457348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[450182] = {
["source"] = "Disturbed Mudspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 219897,
},
[422541] = {
["source"] = "Shuffling Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 208456,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[448492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guard Captain Suleyman",
["npcID"] = 212826,
},
[169841] = {
["source"] = "Addled Arcanomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 84990,
},
[381592] = {
["source"] = "Spellsworn Keeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 200284,
},
[452231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[378731] = {
["source"] = "Frozen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 199592,
},
[382233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Batak",
["npcID"] = 193462,
},
[381593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ebonstone Golem",
["npcID"] = 184300,
},
[333477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goregrind",
["npcID"] = 163621,
},
[432781] = {
["source"] = "Radiating Voidstone",
["event"] = "SPELL_CAST_START",
["npcID"] = 212739,
},
[434829] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[418449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[464240] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[432068] = {
["source"] = "Flickerflame Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212548,
},
[265407] = {
["source"] = "Banquet Steward",
["event"] = "SPELL_CAST_START",
["npcID"] = 131586,
},
[406165] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[427601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightspawn",
["npcID"] = 206710,
},
[371358] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[368287] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonebolt Hunter",
["npcID"] = 185534,
},
[374430] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Tectonic Crusher",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190588,
},
[452235] = {
["source"] = "Ashen Stonestalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 217624,
},
[392451] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Channeler",
["npcID"] = 197985,
},
[450188] = {
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 213834,
},
[377502] = {
["source"] = "Shimmerfin Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 220252,
},
[456331] = {
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219619,
},
[387740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyrhold Watcher",
["npcID"] = 192696,
},
[448111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diu'mik",
["npcID"] = 211564,
},
[377503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Seal Keeper",
["npcID"] = 187155,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[420501] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wildfire Primalist",
["npcID"] = 209200,
},
[369781] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["npcID"] = 184582,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[423200] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["npcID"] = 210156,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2880,
},
[377505] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["encounterID"] = 2639,
["event"] = "SPELL_CAST_START",
["npcID"] = 190496,
},
[375457] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191222,
},
[417431] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[426645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[256864] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[169613] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[167385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boulderfist",
["npcID"] = 189617,
},
[383073] = {
["encounterName"] = "Terros",
["source"] = "Terros",
["npcID"] = 190496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2639,
},
[201839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Taintheart Summoner",
["npcID"] = 99366,
},
[432114] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[381602] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["npcID"] = 190484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[443027] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Hollows Duelist",
["npcID"] = 225148,
},
[403101] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201773,
},
[428695] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[372369] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Ranger",
["npcID"] = 220991,
},
[412693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Dreamcrusher",
["npcID"] = 211057,
},
[386722] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormbrand Ko'mal",
["npcID"] = 206684,
},
[383651] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[384868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Longbow",
["npcID"] = 192789,
},
[168666] = {
["encounterName"] = "Yalnu",
["source"] = "Lady Baihu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 84358,
},
[407198] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[173563] = {
["encounterName"] = "Yalnu",
["source"] = "Feral Lasher",
["npcID"] = 86684,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[450196] = {
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 213834,
},
[381605] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["npcID"] = 190484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[407199] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[450127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegehold Defender",
["npcID"] = 216016,
},
[450197] = {
["source"] = "Skittering Swarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208245,
},
[407200] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[444055] = {
["source"] = "Rampaging Threadling",
["event"] = "SPELL_CAST_START",
["npcID"] = 222730,
},
[265088] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[388773] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[451222] = {
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_START",
["npcID"] = 219983,
},
[409016] = {
["source"] = "Summitshaper Lorac",
["event"] = "SPELL_CAST_START",
["npcID"] = 201522,
},
[383981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rising Tempest",
["npcID"] = 194575,
},
[372394] = {
["encounterName"] = "The Primal Council",
["source"] = "Dathea Stormlash",
["npcID"] = 187768,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[104318] = {
["source"] = "Wild Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 143622,
},
[394917] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["encounterID"] = 2587,
["event"] = "SPELL_CAST_START",
["npcID"] = 199233,
},
[200050] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[260852] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[12466] = {
["encounterName"] = "Lord Overheat",
["source"] = "Lord Overheat",
["encounterID"] = 1145,
["event"] = "SPELL_CAST_START",
["npcID"] = 46264,
},
[270515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Azerite-Infused Elemental",
["npcID"] = 137905,
},
[201411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadfire Imp",
["npcID"] = 100527,
},
[384296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Stegodon",
["npcID"] = 221876,
},
[371984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flashfrost Chillweaver",
["npcID"] = 188067,
},
[17843] = {
["source"] = "Novice Timewalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 189583,
},
[428703] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rock Smasher",
["npcID"] = 213954,
},
[383385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Filth Caller",
["npcID"] = 185656,
},
[41071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Deathshaper",
["npcID"] = 22882,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[391849] = {
["source"] = "Primal Lava Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 186438,
},
[41455] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[446859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackblood Coalescence",
["npcID"] = 215205,
},
[456346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[420326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamebound Sentinel",
["npcID"] = 206900,
},
[377912] = {
["source"] = "Guardian Sentry",
["event"] = "SPELL_CAST_START",
["npcID"] = 192680,
},
[406183] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[407207] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[451812] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[265084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[430754] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[389804] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Curator",
["npcID"] = 187154,
},
[422027] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Spirit of the Kaldorei",
["npcID"] = 207800,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[384686] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[431612] = {
["source"] = "Nerubian Venomspitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 219661,
},
[256959] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[405117] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[423979] = {
["source"] = "Void Cursed Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214419,
},
[193376] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[424614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Stabber",
["npcID"] = 207450,
},
[374623] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190686,
},
[459422] = {
["source"] = "Remembered Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 221585,
},
[204646] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[152962] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["encounterID"] = 1688,
["event"] = "SPELL_CAST_START",
["npcID"] = 75829,
},
[382102] = {
["source"] = "Spellsworn Wingcatcher",
["event"] = "SPELL_CAST_START",
["npcID"] = 201369,
},
[265081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[407212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[398631] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 200852,
},
[41072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Blood Mage",
["npcID"] = 22945,
},
[211401] = {
["source"] = "Blazing Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 104295,
},
[372262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonesplitter",
["npcID"] = 189467,
},
[409261] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[369335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Protector",
["npcID"] = 184107,
},
[399024] = {
["source"] = "Farscale Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 200486,
},
[371383] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hailbringer Theurgist",
["npcID"] = 189229,
},
[412700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Dreamcrusher",
["npcID"] = 211057,
},
[447141] = {
["event"] = "SPELL_CAST_START",
["source"] = "Repurposed Loaderbot",
["npcID"] = 222923,
},
[399025] = {
["source"] = "Arcane Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 200720,
},
[152964] = {
["source"] = "Void Spawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 75652,
},
[403567] = {
["source"] = "Warden Entrix",
["event"] = "SPELL_CAST_START",
["npcID"] = 200960,
},
[420525] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208363,
},
[415406] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[400050] = {
["source"] = "Deepflayer Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 221198,
},
[257899] = {
["source"] = "Irontide Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 130012,
},
[418478] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rune Bear",
["npcID"] = 207050,
},
[386411] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[424621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sergeant Shaynemail",
["npcID"] = 211291,
},
[417455] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[199034] = {
["source"] = "Valarjar Aspirant",
["event"] = "SPELL_CAST_START",
["npcID"] = 101637,
},
[252781] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[400052] = {
["source"] = "Swooping Flayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 199809,
},
[409216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Manaweaver",
["npcID"] = 198872,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[415409] = {
["source"] = "Rupturing Firevine",
["event"] = "SPELL_CAST_START",
["npcID"] = 207699,
},
[377486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Agent",
["npcID"] = 184335,
},
[147108] = {
["source"] = "Shadowmoon Voidclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 74374,
},
[447146] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[386745] = {
["source"] = "Primalist Galewarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 203744,
},
[375871] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[204666] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[369806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[419506] = {
["encounterName"] = "Fyrakk the Blazing",
["source"] = "Fyrakk",
["npcID"] = 204931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2677,
},
[375485] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["npcID"] = 191230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[168082] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["encounterID"] = 1757,
["event"] = "SPELL_CAST_START",
["npcID"] = 83892,
},
[424615] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[396355] = {
["source"] = "Rimetalon Brawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 195752,
},
[87761] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[204667] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[387504] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[388796] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["npcID"] = 196482,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2563,
},
[202108] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[409271] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[397892] = {
["source"] = "Imacu'tya",
["event"] = "SPELL_CAST_START",
["npcID"] = 104275,
},
[439984] = {
["isChanneled"] = true,
["source"] = "Earthen-Ward Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216221,
},
[264923] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[431639] = {
["source"] = "Nerubian Saboteur",
["event"] = "SPELL_CAST_START",
["npcID"] = 212715,
},
[440137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Sharpclaw",
["npcID"] = 221470,
},
[405868] = {
["source"] = "Invoq",
["event"] = "SPELL_CAST_START",
["npcID"] = 203627,
},
[369823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vicious Basilisk",
["npcID"] = 184023,
},
[387670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Brute",
["npcID"] = 221747,
},
[426677] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[426206] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[87762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[257904] = {
["source"] = "Ludwig Von Tortollan",
["event"] = "SPELL_CAST_START",
["npcID"] = 129699,
},
[267997] = {
["source"] = "Vilefiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 135816,
},
[452272] = {
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 213658,
},
[412346] = {
["source"] = "Irontide Corsair",
["event"] = "SPELL_CAST_START",
["npcID"] = 126928,
},
[433845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[389446] = {
["encounterName"] = "Watcher Irideus",
["source"] = "Nullification Device",
["npcID"] = 196712,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2615,
},
[385569] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[404744] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[396991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drakonid Breaker",
["npcID"] = 187240,
},
[427323] = {
["encounterName"] = "Kyrioss",
["source"] = "Voidrider",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[415419] = {
["source"] = "Larodar, Keeper of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 205136,
},
[393783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iskakx",
["npcID"] = 192761,
},
[270494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Charlga Razorflank",
["npcID"] = 221749,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[256882] = {
["source"] = "Monzumi",
["event"] = "SPELL_CAST_START",
["npcID"] = 129552,
},
[405022] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[397386] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[413136] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[388001] = {
["source"] = "Bertinuat",
["event"] = "SPELL_CAST_START",
["npcID"] = 196288,
},
[451608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobyss Shadeshaper",
["npcID"] = 215653,
},
[388804] = {
["encounterName"] = "Umbrelskul",
["source"] = "Umbrelskul",
["npcID"] = 186738,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2584,
},
[264931] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[386757] = {
["encounterName"] = "Khajin the Unyielding",
["source"] = "Khajin the Unyielding",
["npcID"] = 189727,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2617,
},
[400066] = {
["source"] = "Underlight Moth",
["event"] = "SPELL_CAST_START",
["npcID"] = 200120,
},
[39647] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Nightlord",
["npcID"] = 22855,
},
[279264] = {
["source"] = "Kaldorei Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 205892,
},
[376171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Icecaller",
["npcID"] = 190377,
},
[384092] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Timetender Athekk",
["event"] = "SPELL_CAST_START",
["npcID"] = 193042,
},
[153485] = {
["source"] = "Carrion Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 76057,
},
[406210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Naturalist",
["npcID"] = 201746,
},
[39667] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Assassin",
["npcID"] = 23403,
},
[388944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waterpots",
["npcID"] = 201556,
},
[257908] = {
["source"] = "Irontide Officer",
["event"] = "SPELL_CAST_START",
["npcID"] = 127106,
},
[438971] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Ravenous Cinderbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218016,
},
[427710] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 213434,
},
[269029] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["encounterID"] = 2109,
["event"] = "SPELL_CAST_START",
["npcID"] = 129208,
},
[406802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[199389] = {
["encounterName"] = "Dresaron",
["source"] = "Dresaron",
["npcID"] = 99200,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1838,
},
[324447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priory Squire",
["npcID"] = 221486,
},
[257397] = {
["source"] = "Irontide Bonesaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 129788,
},
[393308] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Flamecaller",
["npcID"] = 193558,
},
[438973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[420856] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208365,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113998,
},
[421570] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208365,
},
[459449] = {
["source"] = "Remembered Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 221585,
},
[411747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Elementium",
["npcID"] = 205628,
},
[425970] = {
["source"] = "Verdant Boughwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 213576,
},
[200580] = {
["event"] = "SPELL_CAST_START",
["source"] = "Festerhide Grizzly",
["npcID"] = 95779,
},
[406215] = {
["source"] = "Remembered Diemetradon",
["event"] = "SPELL_CAST_START",
["npcID"] = 221883,
},
[412488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crawling Goo",
["npcID"] = 205820,
},
[383693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Beastmaster",
["npcID"] = 192794,
},
[209410] = {
["source"] = "Duskwatch Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 104247,
},
[414535] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[382670] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["npcID"] = 186339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[372561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Hunter",
["npcID"] = 189227,
},
[393584] = {
["source"] = "Gladehorn Armoredon",
["event"] = "SPELL_CAST_START",
["npcID"] = 196555,
},
[90325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Gargantuan",
["npcID"] = 109154,
},
[388635] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Volatile Spark",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 194999,
},
[374364] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[255041] = {
["source"] = "Feasting Skyscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 128434,
},
[424771] = {
["source"] = "Harbinger of Incineration",
["event"] = "SPELL_CAST_START",
["npcID"] = 210147,
},
[390987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emberspark",
["npcID"] = 208664,
},
[424646] = {
["source"] = "Flametouched Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 210150,
},
[413385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[41184] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashtongue Stormcaller",
["npcID"] = 22846,
},
[384531] = {
["encounterName"] = "Gutshot",
["source"] = "Rotfang Hyena",
["npcID"] = 194745,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[417481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Timeline Marauder",
["npcID"] = 199748,
},
[437956] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[369365] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Warder",
["npcID"] = 184132,
},
[393298] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Colossus",
["npcID"] = 188673,
},
[379406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavabearer",
["npcID"] = 189472,
},
[388817] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["npcID"] = 186616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[116] = {
["npcID"] = 188027,
},
[415435] = {
["source"] = "Coalesced Moment",
["event"] = "SPELL_CAST_START",
["npcID"] = 206064,
},
[432959] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[431935] = {
["source"] = "Royal Journalist Ist'iix",
["event"] = "SPELL_CAST_START",
["npcID"] = 226234,
},
[398632] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 200852,
},
[445125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cindersting",
["npcID"] = 220238,
},
[257402] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[403326] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[324323] = {
["source"] = "Skeletal Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 165919,
},
[440007] = {
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 214576,
},
[455364] = {
["source"] = "Kx",
["event"] = "SPELL_CAST_START",
["npcID"] = 216582,
},
[397010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Honor Guard",
["npcID"] = 197147,
},
[377559] = {
["encounterName"] = "Treemouth",
["source"] = "Treemouth",
["npcID"] = 186120,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2568,
},
[455480] = {
["source"] = "Take",
["event"] = "SPELL_CAST_START",
["npcID"] = 226272,
},
[395987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Jumping Spiderling",
["npcID"] = 199182,
},
[372441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Umbraclaw",
["npcID"] = 211401,
},
[198595] = {
["source"] = "Valarjar Thundercaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 95842,
},
[397011] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Honor Guard",
["npcID"] = 197147,
},
[404178] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[388822] = {
["encounterName"] = "Echo of Doragosa",
["source"] = "Echo of Doragosa",
["encounterID"] = 2565,
["event"] = "SPELL_CAST_START",
["npcID"] = 190609,
},
[199050] = {
["source"] = "Valarjar Shieldmaiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 95832,
},
[390983] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earthshaper",
["npcID"] = 190996,
},
[281329] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Jolly",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126845,
},
[401108] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Ignara",
["npcID"] = 202791,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[406227] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[399061] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[445130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cindersting",
["npcID"] = 220238,
},
[397014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Emissary",
["npcID"] = 197146,
},
[435004] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[399062] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[395991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Revenant",
["npcID"] = 191129,
},
[398749] = {
["source"] = "Irontide Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 200850,
},
[376851] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[409757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[393820] = {
["source"] = "Sturdy Gladehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 196655,
},
[198750] = {
["encounterName"] = "Odyn",
["source"] = "Stormforged Obliterator",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 102019,
},
[51584] = {
["source"] = "Ice Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 26283,
},
[150424] = {
["source"] = "Amani Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215675,
},
[391898] = {
["source"] = "Failed Scalecommander Haerothal",
["event"] = "SPELL_CAST_START",
["npcID"] = 201822,
},
[373405] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[422611] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[399065] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200858,
},
[377384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqua Rager",
["npcID"] = 190407,
},
[41069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Deathshaper",
["npcID"] = 22882,
},
[385757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mender Eskros",
["npcID"] = 195303,
},
[386781] = {
["encounterName"] = "Telash Greywing",
["source"] = "Telash Greywing",
["npcID"] = 186737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2583,
},
[257407] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[392924] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Channeler Ryvati",
["npcID"] = 197535,
},
[381663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Apex Blazewing",
["npcID"] = 193291,
},
[394972] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavabearer",
["npcID"] = 197148,
},
[225100] = {
["source"] = "Guardian Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 104270,
},
[178067] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sea Skrog",
["npcID"] = 88094,
},
[422614] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[179091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nar'thalas Magister",
["npcID"] = 88783,
},
[235254] = {
["encounterName"] = "Fury of the God Queen",
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Imp",
["npcID"] = 115641,
},
[430805] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[414425] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[409231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[404188] = {
["source"] = "Static Charge",
["event"] = "SPELL_CAST_START",
["npcID"] = 202847,
},
[409307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[396520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rumbling Proto-Dragon",
["npcID"] = 187212,
},
[389686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crystal Fury",
["npcID"] = 187160,
},
[385574] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[41986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Angered Soul Fragment",
["npcID"] = 23398,
},
[41078] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[392530] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quarry Infuser",
["npcID"] = 197799,
},
[41334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Acolyte",
["npcID"] = 22939,
},
[443921] = {
["source"] = "Shadowguard Ethereal",
["event"] = "SPELL_CAST_START",
["npcID"] = 221305,
},
[401338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sawscale Viper",
["npcID"] = 208691,
},
[197961] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[396001] = {
["source"] = "The Songbird Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 59553,
},
[386509] = {
["source"] = "Ezrigeth",
["event"] = "SPELL_CAST_START",
["npcID"] = 187666,
},
[234423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Variss",
["npcID"] = 117933,
},
[434998] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[376644] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[38391] = {
["source"] = "Searing Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 46260,
},
[455380] = {
["source"] = "Malfunctioning Railbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 218251,
},
[39670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Defiler",
["npcID"] = 22853,
},
[41169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Heartseeker",
["npcID"] = 23339,
},
[162248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Tiger",
["npcID"] = 214053,
},
[237890] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Runeseer Faljar",
["npcID"] = 116496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["encounterID"] = 1746,
["event"] = "SPELL_CAST_START",
["npcID"] = 81522,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[409313] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[430812] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[382696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Guardian",
["npcID"] = 184131,
},
[428765] = {
["source"] = "Tindral Sageswift",
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[40066] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Wrangler",
["npcID"] = 22877,
},
[421398] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[389488] = {
["source"] = "Cinderstep Melter",
["event"] = "SPELL_CAST_START",
["npcID"] = 201465,
},
[378847] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Spinecrusher",
["npcID"] = 192787,
},
[16568] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Horde Priest",
["npcID"] = 214154,
},
[459479] = {
["source"] = "Remembered Onyxia",
["event"] = "SPELL_CAST_START",
["npcID"] = 221585,
},
[263943] = {
["source"] = "Heartsbane Runeweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 131677,
},
[396007] = {
["source"] = "The Songbird Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 59553,
},
[114646] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[458746] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[452314] = {
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 213658,
},
[193941] = {
["source"] = "Embershard Scorpion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98406,
},
[260654] = {
["source"] = "Karkinus the Capsizer",
["event"] = "SPELL_CAST_START",
["npcID"] = 200907,
},
[418531] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[427638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nuoberon",
["npcID"] = 209113,
},
[260879] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[421603] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[456523] = {
["source"] = "Clump O' Wax",
["event"] = "SPELL_CAST_START",
["npcID"] = 226809,
},
[60876] = {
["source"] = "Recalled Ghoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 221434,
},
[266181] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[381516] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["npcID"] = 190485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[372223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonetender",
["npcID"] = 189265,
},
[198077] = {
["encounterName"] = "Odyn",
["source"] = "Odyn",
["encounterID"] = 1809,
["event"] = "SPELL_CAST_START",
["npcID"] = 95676,
},
[428077] = {
["source"] = "Keeper of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 210423,
},
[408193] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[388923] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[420659] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[378208] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["npcID"] = 186124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[426725] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["encounterID"] = 2824,
["event"] = "SPELL_CAST_START",
["npcID"] = 200927,
},
[389870] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Colossal Stormfiend",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 197145,
},
[382704] = {
["source"] = "Spellsworn Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 203736,
},
[384827] = {
["encounterName"] = "Gutshot",
["source"] = "Gutshot",
["npcID"] = 186116,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2567,
},
[209741] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Image of Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 105754,
},
[381681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustpine Immolator",
["npcID"] = 187396,
},
[406918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
[377435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustpine Loamcrafter",
["npcID"] = 187539,
},
[375385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalbound Water Spirit",
["npcID"] = 190739,
},
[198944] = {
["source"] = "Valarjar Shieldmaiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 95832,
},
[449251] = {
["source"] = "Nerubian Threadmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208244,
},
[453345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Manifested Shadow",
["npcID"] = 211341,
},
[457441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Firelord",
["npcID"] = 212088,
},
[381683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Warspear",
["npcID"] = 192791,
},
[66532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Recalled Lord Jaraxxus",
["npcID"] = 221861,
},
[387826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ukhel Beastcaller",
["npcID"] = 195878,
},
[405230] = {
["source"] = "Duzalgor",
["event"] = "SPELL_CAST_START",
["npcID"] = 200610,
},
[369399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Weaver",
["npcID"] = 186420,
},
[382708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Warden",
["npcID"] = 193293,
},
[395957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spellforged Horror",
["npcID"] = 194401,
},
[392013] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[389875] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["encounterID"] = 2618,
["event"] = "SPELL_CAST_START",
["npcID"] = 189729,
},
[396751] = {
["source"] = "Gahz'raxes",
["event"] = "SPELL_CAST_START",
["npcID"] = 200537,
},
[396018] = {
["source"] = "The Crybaby Hozen",
["event"] = "SPELL_CAST_START",
["npcID"] = 59552,
},
[372539] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[443111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glooming Darkweaver",
["npcID"] = 216868,
},
[424750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Rotcaster",
["npcID"] = 207459,
},
[396019] = {
["source"] = "The Golden Beetle",
["event"] = "SPELL_CAST_START",
["npcID"] = 59545,
},
[397043] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[15043] = {
["source"] = "Yu'lon Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 57316,
},
[410351] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[396020] = {
["source"] = "The Golden Beetle",
["event"] = "SPELL_CAST_START",
["npcID"] = 59545,
},
[372474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Centaur Fighter",
["npcID"] = 194950,
},
[384823] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["npcID"] = 189886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[382712] = {
["source"] = "Wilted Oak",
["event"] = "SPELL_CAST_START",
["npcID"] = 186229,
},
[369400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Warder",
["npcID"] = 184132,
},
[408959] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[426734] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[447271] = {
["source"] = "Hulking Warshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 221103,
},
[375547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Eruption",
["npcID"] = 191286,
},
[421616] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[377594] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[263959] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[396023] = {
["encounterName"] = "Eranog",
["source"] = "Eranog",
["npcID"] = 184972,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2587,
},
[384761] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["npcID"] = 186615,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2636,
},
[459496] = {
["source"] = "Remembered Lich King",
["event"] = "SPELL_CAST_START",
["npcID"] = 224157,
},
[407285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Skullcrusher",
["npcID"] = 202258,
},
[387559] = {
["encounterName"] = "Primal Tsunami",
["source"] = "Primal Tsunami",
["npcID"] = 189729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2618,
},
[397048] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostbreath Arachnid",
["npcID"] = 199333,
},
[418605] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Future Self",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 208887,
},
[263961] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[457450] = {
["source"] = "Recalled Orinoko Tuskbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 221719,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["npcID"] = 207940,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2848,
},
[211473] = {
["source"] = "Shadow Mistress",
["event"] = "SPELL_CAST_START",
["npcID"] = 104300,
},
[375475] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Juvenile Frost Proto-Dragon",
["npcID"] = 191222,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[378832] = {
["source"] = "Spellsworn Crechebound",
["event"] = "SPELL_CAST_START",
["npcID"] = 200587,
},
[388537] = {
["encounterName"] = "Vexamus",
["source"] = "Vexamus",
["encounterID"] = 2562,
["event"] = "SPELL_CAST_START",
["npcID"] = 194181,
},
[381694] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Gashtooth",
["npcID"] = 186124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[410743] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Ignited Plume",
["npcID"] = 205167,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[237947] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[397051] = {
["source"] = "Cyclas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199029,
},
[402170] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[392957] = {
["source"] = "Burnished Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198426,
},
[274254] = {
["source"] = "Irontide Cutthroat",
["event"] = "SPELL_CAST_START",
["npcID"] = 126719,
},
[388862] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[369411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Seeker",
["npcID"] = 184301,
},
[39674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Defiler",
["npcID"] = 22853,
},
[281420] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[388863] = {
["source"] = "Corrupted Manafiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 196045,
},
[250258] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 122965,
},
[444145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frenzied Siege Artillery",
["npcID"] = 224521,
},
[423396] = {
["source"] = "Lethka",
["event"] = "SPELL_CAST_START",
["npcID"] = 208740,
},
[428047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Verlann Timbercrush",
["npcID"] = 207554,
},
[256401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206096,
},
[390912] = {
["source"] = "Vile Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 197219,
},
[401361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadful Defender",
["npcID"] = 203842,
},
[196512] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[207906] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["encounterID"] = 1869,
["event"] = "SPELL_CAST_START",
["npcID"] = 104217,
},
[374533] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2612,
},
[404945] = {
["source"] = "Winglord Iyazael",
["event"] = "SPELL_CAST_START",
["npcID"] = 199401,
},
[369107] = {
["source"] = "Awaken Crystal",
["event"] = "SPELL_CAST_START",
["npcID"] = 205061,
},
[396078] = {
["source"] = "Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 189843,
},
[387843] = {
["source"] = "Spectral Invoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 196202,
},
[87779] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[388392] = {
["source"] = "Unruly Textbook",
["event"] = "SPELL_CAST_START",
["npcID"] = 196044,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[388911] = {
["source"] = "Spellbound Battleaxe",
["event"] = "SPELL_CAST_START",
["npcID"] = 196577,
},
[391939] = {
["source"] = "Primalist Galewarden",
["event"] = "SPELL_CAST_START",
["npcID"] = 203744,
},
[369061] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["npcID"] = 184422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2558,
},
[420236] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[391825] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Watercaller",
["npcID"] = 190995,
},
[273185] = {
["source"] = "Shieldbearer of Zul",
["event"] = "SPELL_CAST_START",
["npcID"] = 127879,
},
[409385] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["encounterID"] = 2687,
["event"] = "SPELL_CAST_START",
["npcID"] = 201934,
},
[377608] = {
["source"] = "Frozen Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 199592,
},
[59638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirror Image",
["npcID"] = 31216,
},
[375716] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Primalist Mage",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191206,
},
[40938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Illidari Fearbringer",
["npcID"] = 22954,
},
[448248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Webmage",
["npcID"] = 223253,
},
[403203] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[41152] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Maiev Shadowsong",
["npcID"] = 23197,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[257426] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[385419] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[392672] = {
["source"] = "Failed Scalecommander Elarthresh",
["event"] = "SPELL_CAST_START",
["npcID"] = 201820,
},
[394680] = {
["source"] = "Winglord Iyazael",
["event"] = "SPELL_CAST_START",
["npcID"] = 199401,
},
[418187] = {
["encounterName"] = "Council of Dreams",
["source"] = "Urctos",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208363,
},
[256405] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[424704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[387849] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[274213] = {
["encounterName"] = "Sporecaller Zancha",
["source"] = "Sporecaller Zancha",
["npcID"] = 131383,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2112,
},
[377612] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[415492] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[396040] = {
["encounterName"] = "Eranog",
["source"] = "Flamescale Captain",
["encounterID"] = 2587,
["event"] = "SPELL_CAST_START",
["npcID"] = 199233,
},
[41467] = {
["encounterName"] = "The Illidari Council",
["source"] = "Gathios the Shatterer",
["npcID"] = 22949,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[369423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Crawler",
["npcID"] = 184303,
},
[272167] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilescourge",
["npcID"] = 136404,
},
[392394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamegullet",
["npcID"] = 197697,
},
[372495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alkaline Rager",
["npcID"] = 202623,
},
[386024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Stormspeaker",
["npcID"] = 194894,
},
[383496] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[62042] = {
["source"] = "Recalled Thorim",
["event"] = "SPELL_CAST_START",
["npcID"] = 221923,
},
[421636] = {
["encounterName"] = "Tindral Sageswift, Seer of the Flame",
["source"] = "Tindral Sageswift",
["encounterID"] = 2786,
["event"] = "SPELL_CAST_START",
["npcID"] = 209090,
},
[405437] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[374544] = {
["source"] = "Fetid Rotsinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186226,
},
[400055] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203384,
},
[409352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[389251] = {
["source"] = "Vigorous Lasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 187545,
},
[271174] = {
["source"] = "Pallid Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 137830,
},
[396044] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[421665] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210149,
},
[32063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horde Warlock",
["npcID"] = 214159,
},
[390926] = {
["source"] = "Candlelit Big-Boomer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211546,
},
[198379] = {
["encounterName"] = "Archdruid Glaidalis",
["source"] = "Archdruid Glaidalis",
["npcID"] = 96512,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1836,
},
[386410] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[164907] = {
["source"] = "Reanimated Ritual Bones",
["event"] = "SPELL_CAST_START",
["npcID"] = 75715,
},
[273570] = {
["source"] = "Ringtail Bandicoon",
["event"] = "SPELL_CAST_START",
["npcID"] = 139166,
},
[445210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[340581] = {
["source"] = "Rulkros",
["event"] = "SPELL_CAST_START",
["npcID"] = 166263,
},
[403891] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["npcID"] = 198999,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2671,
},
[191401] = {
["source"] = "Valarjar Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 96640,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[404259] = {
["source"] = "Pyrachniss",
["event"] = "SPELL_CAST_START",
["npcID"] = 200978,
},
[389040] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thondrozus",
["npcID"] = 192769,
},
[199090] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[388882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infuser Sariya",
["npcID"] = 190405,
},
[458497] = {
["source"] = "Parasidious",
["event"] = "SPELL_CAST_START",
["npcID"] = 206977,
},
[412448] = {
["source"] = "Deepflayer Broodmatron",
["event"] = "SPELL_CAST_START",
["npcID"] = 200115,
},
[300840] = {
["source"] = "Inhuman Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 202147,
},
[400144] = {
["source"] = "Vraken the Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 200584,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[385812] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Volatile Infuser",
["npcID"] = 192934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[406358] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[375575] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Dragonspawn Flamebender",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191230,
},
[153524] = {
["source"] = "Plagued Bat",
["event"] = "SPELL_CAST_START",
["npcID"] = 75459,
},
[154175] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[411407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[445191] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[198428] = {
["encounterName"] = "Ularogg Cragshaper",
["source"] = "Ularogg Cragshaper",
["encounterID"] = 1791,
["event"] = "SPELL_CAST_START",
["npcID"] = 91004,
},
[234401] = {
["event"] = "SPELL_CAST_START",
["source"] = "Inquisitor Variss",
["npcID"] = 117933,
},
[388886] = {
["source"] = "Spellbound Scepter",
["event"] = "SPELL_CAST_START",
["npcID"] = 196576,
},
[266036] = {
["source"] = "Thistle Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[404388] = {
["source"] = "Hatching Egg",
["event"] = "SPELL_CAST_START",
["npcID"] = 202897,
},
[369465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Weaver",
["npcID"] = 186420,
},
[391958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cloying Gale",
["npcID"] = 198126,
},
[384961] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbow Stalker",
["npcID"] = 186208,
},
[376272] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Tarasek Earthreaver",
["npcID"] = 191225,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[272180] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grotesque Horror",
["npcID"] = 138187,
},
[41378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Priestess of Delight",
["npcID"] = 22964,
},
[383823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Hornsounder",
["npcID"] = 192796,
},
[260508] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[449290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockgore",
["npcID"] = 220241,
},
[375580] = {
["encounterName"] = "Dathea, Ascended",
["source"] = "Dathea, Ascended",
["npcID"] = 189813,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2635,
},
[372538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Flare",
["npcID"] = 189470,
},
[40082] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Harpooner",
["npcID"] = 22874,
},
[456453] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[265016] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[375924] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["npcID"] = 184580,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[406333] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[390938] = {
["source"] = "Aggravated Skitterfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 197406,
},
[395675] = {
["source"] = "Embar Firepath",
["event"] = "SPELL_CAST_START",
["npcID"] = 187767,
},
[61353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dagna Flintlock",
["npcID"] = 29476,
},
[385108] = {
["source"] = "Podling Gloamtender",
["event"] = "SPELL_CAST_START",
["npcID"] = 210791,
},
[382749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mature Hornswog",
["npcID"] = 191619,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[446222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Jellyfish",
["npcID"] = 227827,
},
[426771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Bound Despoiler",
["npcID"] = 212765,
},
[395035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulharvester Galtmaa",
["npcID"] = 195927,
},
[457484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[385442] = {
["encounterName"] = "Gulping Goliath",
["source"] = "Gulping Goliath",
["encounterID"] = 2616,
["event"] = "SPELL_CAST_START",
["npcID"] = 189722,
},
[386991] = {
["source"] = "Primal Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 193806,
},
[408483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Lavatongue",
["npcID"] = 208661,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[378818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Thaumaturge",
["npcID"] = 192788,
},
[300852] = {
["source"] = "Inhuman Test Subject",
["event"] = "SPELL_CAST_START",
["npcID"] = 202147,
},
[51963] = {
["source"] = "Ebon Gargoyle",
["event"] = "SPELL_CAST_START",
["npcID"] = 27829,
},
[405924] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krono Sandtongue",
["npcID"] = 205622,
},
[392130] = {
["source"] = "Professor Maxdormu",
["event"] = "SPELL_CAST_START",
["npcID"] = 189668,
},
[421059] = {
["source"] = "Aurostor",
["event"] = "SPELL_CAST_START",
["npcID"] = 209574,
},
[374563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazzling Dragonfly",
["npcID"] = 190362,
},
[453392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Eradicator",
["npcID"] = 225408,
},
[15493] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Crusader",
["npcID"] = 213564,
},
[196194] = {
["source"] = "Steeljaw Grizzly",
["event"] = "SPELL_CAST_START",
["npcID"] = 96677,
},
[383846] = {
["source"] = "Inflammable Wall",
["event"] = "SPELL_CAST_START",
["npcID"] = 201413,
},
[428823] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 83846,
},
[388897] = {
["source"] = "Scavenging Pincher",
["event"] = "SPELL_CAST_START",
["npcID"] = 200949,
},
[200289] = {
["encounterName"] = "Shade of Xavius",
["source"] = "Shade of Xavius",
["npcID"] = 99192,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1839,
},
[222122] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priestess Ishanah",
["npcID"] = 111536,
},
[400756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Lazy Peon",
["npcID"] = 221895,
},
[200418] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[207278] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["encounterID"] = 1868,
["event"] = "SPELL_CAST_START",
["npcID"] = 104215,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 215819,
},
[186269] = {
["source"] = "Blightshard Shaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 90998,
},
[405279] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["npcID"] = 198999,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2671,
},
[205231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkglare",
["npcID"] = 103673,
},
[374567] = {
["encounterName"] = "Leymor",
["source"] = "Leymor",
["npcID"] = 186644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2582,
},
[375591] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Sapling",
["npcID"] = 191313,
},
[264603] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[402209] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[456468] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[445207] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Bound Howler",
["npcID"] = 221979,
},
[371824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthenforged Invader",
["npcID"] = 190737,
},
[402050] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[374569] = {
["source"] = "Experimental Trial",
["event"] = "SPELL_CAST_START",
["npcID"] = 201491,
},
[404258] = {
["source"] = "Reisa the Drowned",
["event"] = "SPELL_CAST_START",
["npcID"] = 200600,
},
[256922] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Maiden",
["npcID"] = 131821,
},
[418591] = {
["encounterName"] = "Council of Dreams",
["source"] = "Pip",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208367,
},
[399746] = {
["source"] = "Warp Crystal",
["event"] = "SPELL_CAST_START",
["npcID"] = 201082,
},
[396069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Cliff",
["npcID"] = 187090,
},
[413473] = {
["source"] = "Temporal Deviation",
["event"] = "SPELL_CAST_START",
["npcID"] = 206063,
},
[398206] = {
["source"] = "Exhumed Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 75979,
},
[200732] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[400165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[373424] = {
["encounterName"] = "Chargath, Bane of Scales",
["source"] = "Chargath, Bane of Scales",
["npcID"] = 189340,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2613,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[394430] = {
["source"] = "Primordial Wrath",
["event"] = "SPELL_CAST_START",
["npcID"] = 190579,
},
[406282] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Naturalist",
["npcID"] = 201746,
},
[450330] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[373549] = {
["source"] = "Veiled Damselfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 196190,
},
[198959] = {
["source"] = "Valarjar Runecarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 96664,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[41471] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[413621] = {
["source"] = "Infinite Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 206214,
},
[89415] = {
["source"] = "Ghost Iron Dragonling",
["event"] = "SPELL_CAST_START",
["npcID"] = 57783,
},
[396073] = {
["source"] = "The Nodding Tiger",
["event"] = "SPELL_CAST_START",
["npcID"] = 59544,
},
[401192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quicksmack Magk",
["npcID"] = 204651,
},
[422691] = {
["encounterName"] = "Smolderon",
["source"] = "Smolderon",
["encounterID"] = 2824,
["event"] = "SPELL_CAST_START",
["npcID"] = 200927,
},
[393781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Flame",
["npcID"] = 184693,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[401193] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quicksmack Magk",
["npcID"] = 204651,
},
[426787] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[384471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Tarantula",
["npcID"] = 191672,
},
[396075] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Revenant",
["npcID"] = 191129,
},
[372529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Hogger",
["npcID"] = 213570,
},
[456438] = {
["source"] = "Cursed Miner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213565,
},
[197558] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[369409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Custodian",
["npcID"] = 184130,
},
[397100] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magmas",
["npcID"] = 199027,
},
[411002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cloud Prince",
["npcID"] = 45917,
},
[375945] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fleecepelt Argali",
["npcID"] = 187975,
},
[265433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodsworn Defiler",
["npcID"] = 133912,
},
[200630] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mindshattered Screecher",
["npcID"] = 95769,
},
[457458] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegelord Xerosh",
["npcID"] = 224311,
},
[413387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[457503] = {
["source"] = "Cogchewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212617,
},
[421672] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["encounterID"] = 2737,
["event"] = "SPELL_CAST_START",
["npcID"] = 208478,
},
[165193] = {
["source"] = "Stele",
["event"] = "SPELL_CAST_START",
["npcID"] = 72627,
},
[372222] = {
["encounterName"] = "Azureblade",
["source"] = "Azureblade",
["npcID"] = 186739,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2585,
},
[40832] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[207261] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["encounterID"] = 1868,
["event"] = "SPELL_CAST_START",
["npcID"] = 104215,
},
[242093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flllurlokkr",
["npcID"] = 120998,
},
[386866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gorging Stagbeetle",
["npcID"] = 195709,
},
[375605] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[41472] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[11970] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Mechano-Tank",
["npcID"] = 213785,
},
[411437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[401319] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[378222] = {
["source"] = "Invasive Hornswog",
["event"] = "SPELL_CAST_START",
["npcID"] = 200275,
},
[41481] = {
["encounterName"] = "The Illidari Council",
["source"] = "High Nethermancer Zerevor",
["npcID"] = 22950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[457447] = {
["source"] = "Ixlorb the Spinner",
["event"] = "SPELL_CAST_START",
["npcID"] = 218426,
},
[255371] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[357218] = {
["event"] = "SPELL_CAST_START",
["source"] = "Smoldering Colossus",
["npcID"] = 188673,
},
[402225] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[411439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[449318] = {
["source"] = "Nerubian Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 208242,
},
[413487] = {
["source"] = "Temporal Fusion",
["event"] = "SPELL_CAST_START",
["npcID"] = 206068,
},
[180670] = {
["source"] = "K'ute",
["event"] = "SPELL_CAST_START",
["npcID"] = 90215,
},
[404209] = {
["source"] = "Veltrax",
["event"] = "SPELL_CAST_START",
["npcID"] = 200904,
},
[396084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 203747,
},
[388918] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[394037] = {
["source"] = "Unbound Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 187036,
},
[374586] = {
["encounterName"] = "Forgemaster Gorek",
["source"] = "Forgemaster Gorek",
["npcID"] = 189478,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2612,
},
[457510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Elf Riftwalker",
["npcID"] = 224798,
},
[397109] = {
["source"] = "Air Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 203743,
},
[377658] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[440107] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216649,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[397110] = {
["source"] = "Air Revenant",
["event"] = "SPELL_CAST_START",
["npcID"] = 203743,
},
[443179] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[41360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Promenade Sentinel",
["npcID"] = 23394,
},
[153680] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["encounterID"] = 1679,
["event"] = "SPELL_CAST_START",
["npcID"] = 75452,
},
[253239] = {
["source"] = "Dazar'ai Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 122971,
},
[404951] = {
["source"] = "Mad-Eye Carrey",
["event"] = "SPELL_CAST_START",
["npcID"] = 201181,
},
[264024] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[373392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nokhud Hornsounder",
["npcID"] = 192796,
},
[397112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rumbling Proto-Dragon",
["npcID"] = 187212,
},
[377661] = {
["source"] = "Burnished Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198426,
},
[388801] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Warrior",
["npcID"] = 195855,
},
[15587] = {
["source"] = "Amani Shadowspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215676,
},
[409398] = {
["source"] = "Crystalline Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 203831,
},
[389947] = {
["source"] = "Nokhud Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 185168,
},
[399336] = {
["source"] = "Tarasek Frostclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201035,
},
[161222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Nightsaber",
["npcID"] = 221947,
},
[388623] = {
["encounterName"] = "Overgrown Ancient",
["source"] = "Overgrown Ancient",
["encounterID"] = 2563,
["event"] = "SPELL_CAST_START",
["npcID"] = 196482,
},
[377971] = {
["source"] = "Massive Thresher",
["event"] = "SPELL_CAST_START",
["npcID"] = 191951,
},
[460587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vindictive Technician",
["npcID"] = 220472,
},
[377500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Agent",
["npcID"] = 184335,
},
[200637] = {
["encounterName"] = "Dargrul the Underking",
["source"] = "Dargrul",
["encounterID"] = 1793,
["event"] = "SPELL_CAST_START",
["npcID"] = 91007,
},
[389949] = {
["source"] = "Nokhud Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 187299,
},
[372201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Irontorch",
["npcID"] = 189464,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[210875] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[423734] = {
["source"] = "Doomfiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 210910,
},
[250050] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[196543] = {
["encounterName"] = "Fenryr",
["source"] = "Fenryr",
["encounterID"] = 1807,
["event"] = "SPELL_CAST_START",
["npcID"] = 95674,
},
[389951] = {
["source"] = "Strunraan",
["event"] = "SPELL_CAST_START",
["npcID"] = 193534,
},
[391833] = {
["source"] = "Emerald Warder",
["event"] = "SPELL_CAST_START",
["npcID"] = 189183,
},
[373059] = {
["encounterName"] = "The Primal Council",
["source"] = "Kadros Icewrath",
["npcID"] = 187771,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[257870] = {
["source"] = "Irontide Buccaneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 130011,
},
[402237] = {
["source"] = "Vengeful Research",
["event"] = "SPELL_CAST_START",
["npcID"] = 201490,
},
[198904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotheart Dryad",
["npcID"] = 99358,
},
[372456] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[401214] = {
["source"] = "Elder Honeypelt",
["event"] = "SPELL_CAST_START",
["npcID"] = 202451,
},
[373573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sprite Dreamer",
["npcID"] = 207617,
},
[382787] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disease Slasher",
["npcID"] = 187315,
},
[445236] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sieve Spinedrifter",
["npcID"] = 229523,
},
[264757] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[256489] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[207806] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["encounterID"] = 1868,
["event"] = "SPELL_CAST_START",
["npcID"] = 104215,
},
[257458] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[446261] = {
["source"] = "Emboldened Fog Wither",
["event"] = "SPELL_CAST_START",
["npcID"] = 219909,
},
[381765] = {
["source"] = "Wrathful Chill",
["event"] = "SPELL_CAST_START",
["npcID"] = 197754,
},
[265337] = {
["source"] = "Gorestained Piglet",
["event"] = "SPELL_CAST_START",
["npcID"] = 135048,
},
[381770] = {
["encounterName"] = "Treemouth",
["source"] = "Decaying Slime",
["npcID"] = 192481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2568,
},
[412378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Timebender",
["npcID"] = 205337,
},
[409635] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[460595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irritated Salvager",
["npcID"] = 220471,
},
[376827] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[215433] = {
["source"] = "Valarjar Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 95834,
},
[369049] = {
["encounterName"] = "Emberon",
["source"] = "Vault Keeper",
["npcID"] = 186107,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2558,
},
[382791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[387910] = {
["source"] = "Algeth'ar Echoknight",
["event"] = "SPELL_CAST_START",
["npcID"] = 196200,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Flourishing Ancient",
["encounterID"] = 1756,
["event"] = "SPELL_CAST_START",
["npcID"] = 84400,
},
[252687] = {
["source"] = "Shadowblade Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 122970,
},
[415437] = {
["source"] = "Timestream Leech",
["event"] = "SPELL_CAST_START",
["npcID"] = 206066,
},
[420671] = {
["encounterName"] = "Council of Dreams",
["source"] = "Aerwynn",
["encounterID"] = 2728,
["event"] = "SPELL_CAST_START",
["npcID"] = 208365,
},
[200642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["npcID"] = 43873,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1041,
},
[264038] = {
["source"] = "Coven Thornshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 131666,
},
[257732] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[405316] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["encounterID"] = 2680,
["event"] = "SPELL_CAST_START",
["npcID"] = 201320,
},
[398150] = {
["source"] = "Shadowmoon Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 76446,
},
[390984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earthshaper",
["npcID"] = 190996,
},
[451268] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbark the Unfelled",
["npcID"] = 217670,
},
[199146] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gildedfur Stag",
["npcID"] = 96609,
},
[373329] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[382795] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Qalashi Lavamancer",
["npcID"] = 193944,
},
[449339] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[390463] = {
["encounterName"] = "Raszageth the Storm-Eater",
["source"] = "Raszageth",
["encounterID"] = 2607,
["event"] = "SPELL_CAST_START",
["npcID"] = 189492,
},
[420405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Caller",
["npcID"] = 207041,
},
[372225] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Bonesplitter",
["npcID"] = 189467,
},
[375630] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 191232,
},
[411644] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Tidehunter",
["npcID"] = 205365,
},
[264525] = {
["source"] = "Maddened Survivalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 131850,
},
[403272] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["npcID"] = 201668,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2684,
},
[9573] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incendosaur",
["npcID"] = 9318,
},
[373912] = {
["encounterName"] = "Decatriarch Wratheye",
["source"] = "Decatriarch Wratheye",
["npcID"] = 186121,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2569,
},
[398154] = {
["source"] = "Defiled Spirit",
["event"] = "SPELL_CAST_START",
["npcID"] = 75451,
},
[390988] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Sentinel",
["npcID"] = 192700,
},
[381517] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["npcID"] = 190485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2623,
},
[425796] = {
["source"] = "Harbinger of Incineration",
["event"] = "SPELL_CAST_START",
["npcID"] = 210147,
},
[13860] = {
["source"] = "Recalled Heretic",
["event"] = "SPELL_CAST_START",
["npcID"] = 221343,
},
[171764] = {
["source"] = "Warspear Magus",
["event"] = "SPELL_CAST_START",
["npcID"] = 86933,
},
[424773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[388942] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[210261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Sentry",
["npcID"] = 104251,
},
[372147] = {
["event"] = "SPELL_CAST_START",
["source"] = "Balara",
["npcID"] = 193457,
},
[421703] = {
["encounterName"] = "Volcoross",
["source"] = "Volcoross",
["npcID"] = 208478,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2737,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[406678] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["source"] = "Warlord Sargha",
["npcID"] = 189901,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2611,
},
[397134] = {
["encounterName"] = "The Primal Council",
["source"] = "Opalfang",
["npcID"] = 187772,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2590,
},
[398300] = {
["source"] = "Shambling Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 200387,
},
[382802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vile Rothexer",
["npcID"] = 187224,
},
[445251] = {
["source"] = "Brushmane Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 217561,
},
[419048] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[10277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Bloodscalp",
["npcID"] = 214059,
},
[265352] = {
["source"] = "Blight Toad",
["event"] = "SPELL_CAST_START",
["npcID"] = 135052,
},
[432967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[157650] = {
["source"] = "Shadowmoon Voidclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 74374,
},
[57984] = {
["source"] = "Primal Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 61029,
},
[419659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Runebear",
["npcID"] = 207101,
},
[260651] = {
["source"] = "Karkinus the Capsizer",
["event"] = "SPELL_CAST_START",
["npcID"] = 200907,
},
[372839] = {
["source"] = "Nokhud Spearthrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 191570,
},
[369813] = {
["source"] = "Fire Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 189843,
},
[264050] = {
["source"] = "Thistle Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[376169] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Thaumaturge Fural",
["npcID"] = 189905,
},
[268440] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[418637] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[207815] = {
["encounterName"] = "Patrol Captain Gerdo",
["source"] = "Patrol Captain Gerdo",
["encounterID"] = 1868,
["event"] = "SPELL_CAST_START",
["npcID"] = 104215,
},
[415296] = {
["source"] = "Larodar, Keeper of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 205136,
},
[387410] = {
["source"] = "Brimstone Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204029,
},
[424176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Protector",
["npcID"] = 210637,
},
[427852] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2883,
},
[396370] = {
["source"] = "Tarasek Frostclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 201035,
},
[220024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Emmarel Shadewarden",
["npcID"] = 110473,
},
[433841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blood Overseer",
["npcID"] = 216364,
},
[456338] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anguishing Nightmare",
["npcID"] = 214415,
},
[212423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Skulker",
["npcID"] = 99541,
},
[401236] = {
["source"] = "Nidharr",
["event"] = "SPELL_CAST_START",
["npcID"] = 201310,
},
[452164] = {
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_START",
["npcID"] = 216578,
},
[400641] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["npcID"] = 198998,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2670,
},
[427858] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[405332] = {
["source"] = "Gahz'raxes",
["event"] = "SPELL_CAST_START",
["npcID"] = 200537,
},
[264510] = {
["source"] = "Crazed Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 131849,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[428879] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rock Smasher",
["npcID"] = 213954,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[41093] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Houndmaster",
["npcID"] = 23018,
},
[394800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Council Earthcaller",
["npcID"] = 198500,
},
[400430] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[336803] = {
["source"] = "Obedient Shadehound",
["event"] = "SPELL_CAST_START",
["npcID"] = 173640,
},
[385883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Keep Custodian",
["npcID"] = 192703,
},
[374622] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Thundering Ravager",
["npcID"] = 190690,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2605,
},
[371551] = {
["source"] = "Cliffkeeper Bouldani",
["event"] = "SPELL_CAST_START",
["npcID"] = 202612,
},
[270481] = {
["source"] = "Demonic Tyrant",
["event"] = "SPELL_CAST_START",
["npcID"] = 135002,
},
[260696] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[460618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overworked Cook",
["npcID"] = 220744,
},
[386700] = {
["source"] = "Primalist Hailcrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 201036,
},
[266106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feral Bloodswarmer",
["npcID"] = 133835,
},
[450628] = {
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_START",
["npcID"] = 209801,
},
[374624] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Frozen Destroyer",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 190686,
},
[452252] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[373027] = {
["encounterName"] = "Sennarth, The Cold Breath",
["source"] = "Sennarth",
["npcID"] = 187967,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2592,
},
[398171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Senegos",
["npcID"] = 199923,
},
[393306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Earthwarden",
["npcID"] = 193709,
},
[330604] = {
["source"] = "Vault Weaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200375,
},
[450781] = {
["source"] = "Flickerflame Sticker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212629,
},
[398172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stellagosa",
["npcID"] = 200099,
},
[393453] = {
["source"] = "Brimstone Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 204029,
},
[412505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyr's Vanguard",
["npcID"] = 205151,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[380174] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Broodkeeper Diurna",
["encounterID"] = 2614,
["event"] = "SPELL_CAST_START",
["npcID"] = 190245,
},
[411906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[427342] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[375068] = {
["encounterName"] = "Magmatusk",
["source"] = "Lava Tentacles",
["npcID"] = 190023,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2610,
},
[260551] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[427863] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[375652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Tender",
["npcID"] = 196115,
},
[425816] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Treant",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 211904,
},
[381519] = {
["source"] = "Tarasek Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 200460,
},
[388374] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remembered Pterrordax",
["npcID"] = 221878,
},
[375653] = {
["encounterName"] = "Broodkeeper Diurna",
["source"] = "Drakonid Stormbringer",
["npcID"] = 191232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2614,
},
[409437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[369050] = {
["source"] = "Relothina",
["event"] = "SPELL_CAST_START",
["npcID"] = 196834,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["npcID"] = 163157,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2388,
},
[265089] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[401248] = {
["encounterName"] = "Tyr, the Infinite Keeper",
["source"] = "Tyr, the Infinite Keeper",
["npcID"] = 198998,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2670,
},
[443222] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[448341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Thwacker",
["npcID"] = 203877,
},
[384623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Qalashi Blacksmith",
["npcID"] = 189471,
},
[425819] = {
["encounterName"] = "Gnarlroot",
["source"] = "Tainted Treant",
["encounterID"] = 2820,
["event"] = "SPELL_CAST_START",
["npcID"] = 211904,
},
[211406] = {
["source"] = "Blazing Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 104295,
},
[408811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Siegemaster",
["npcID"] = 198874,
},
[265091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Blood Priest",
["npcID"] = 131492,
},
[388540] = {
["source"] = "Seabreaker Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 192928,
},
[449167] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["npcID"] = 213216,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2888,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["event"] = "SPELL_CAST_START",
["npcID"] = 207207,
},
[378143] = {
["source"] = "Primalist Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 191841,
},
[204574] = {
["encounterName"] = "Oakheart",
["source"] = "Oakheart",
["npcID"] = 103344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1837,
},
[426845] = {
["source"] = "Infested Icecaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 84989,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["npcID"] = 213119,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2883,
},
[382620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bonebolt Hunter",
["npcID"] = 185534,
},
[200658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadsoul Ruiner",
["npcID"] = 95771,
},
[405673] = {
["source"] = "Overflowing Magma",
["event"] = "SPELL_CAST_START",
["npcID"] = 203277,
},
[440506] = {
["source"] = "Stream Skipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 213700,
},
[428894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["npcID"] = 186151,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[400883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zaqali Keeneye",
["npcID"] = 208660,
},
[386921] = {
["encounterName"] = "Granyth",
["source"] = "Dragonkiller Lance",
["npcID"] = 194367,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[395859] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[417634] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[405137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[452442] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
[432125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittershaw Beetle",
["npcID"] = 225136,
},
[409445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[373614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Destroyer",
["npcID"] = 190034,
},
[461879] = {
["source"] = "Waxy Globule",
["event"] = "SPELL_CAST_START",
["npcID"] = 213873,
},
[408422] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[444377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Kodiak",
["npcID"] = 229060,
},
[193668] = {
["encounterName"] = "God-King Skovald",
["source"] = "God-King Skovald",
["encounterID"] = 1808,
["event"] = "SPELL_CAST_START",
["npcID"] = 95675,
},
[391019] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[426893] = {
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_START",
["npcID"] = 209801,
},
[432135] = {
["source"] = "Flickerflame Kobold",
["event"] = "SPELL_CAST_START",
["npcID"] = 212536,
},
[430238] = {
["source"] = "Void Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 207202,
},
[427252] = {
["encounterName"] = "Larodar, Keeper of the Flame",
["source"] = "Larodar, Keeper of the Flame",
["encounterID"] = 2731,
["event"] = "SPELL_CAST_START",
["npcID"] = 208445,
},
[401258] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[207881] = {
["encounterName"] = "Talixae Flamewreath",
["source"] = "Talixae Flamewreath",
["encounterID"] = 1869,
["event"] = "SPELL_CAST_START",
["npcID"] = 104217,
},
[448528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[387950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coalesced Slagwalker",
["npcID"] = 208663,
},
[446304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Jellyfish",
["npcID"] = 227827,
},
[373618] = {
["source"] = "Hypnosis Bat",
["event"] = "SPELL_CAST_START",
["npcID"] = 190174,
},
[440162] = {
["source"] = "Scarlet Stinkcap",
["event"] = "SPELL_CAST_START",
["npcID"] = 212579,
},
[426619] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212993,
},
[450400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supervisor Radlock",
["npcID"] = 220897,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2847,
},
[431674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittershaw Beetle",
["npcID"] = 225136,
},
[188046] = {
["event"] = "SPELL_CAST_START",
["source"] = "Denizen of the Dream",
["npcID"] = 198489,
},
[388976] = {
["source"] = "Arcane Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 196671,
},
[426855] = {
["encounterName"] = "Nymue, Weaver of the Cycle",
["source"] = "Nymue",
["encounterID"] = 2708,
["event"] = "SPELL_CAST_START",
["npcID"] = 206172,
},
[403309] = {
["source"] = "Expulsion Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 202592,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A",
["npcID"] = 210108,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2854,
},
[433053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lighteater",
["npcID"] = 216036,
},
[434252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Hauler",
["npcID"] = 217039,
},
[381535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Convoked Tremor",
["npcID"] = 187079,
},
[444705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zealous Templar",
["npcID"] = 207949,
},
[440912] = {
["source"] = "Vigorous Lashroom",
["event"] = "SPELL_CAST_START",
["npcID"] = 215793,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[382836] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["npcID"] = 186338,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2581,
},
[387955] = {
["source"] = "Ethereal Restorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 196203,
},
[391385] = {
["source"] = "Lethka",
["event"] = "SPELL_CAST_START",
["npcID"] = 208740,
},
[451428] = {
["isChanneled"] = true,
["source"] = "Xeph'itik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219984,
},
[235252] = {
["encounterName"] = "Fury of the God Queen",
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Imp",
["npcID"] = 115642,
},
[367481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Claw Fighter",
["npcID"] = 185508,
},
[372600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
},
[429109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgebound Mender",
["npcID"] = 213338,
},
[445819] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waste Flayer",
["npcID"] = 221017,
},
[433002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodstained Assistant",
["npcID"] = 216333,
},
[409456] = {
["encounterName"] = "Iridikron",
["source"] = "Iridikron",
["encounterID"] = 2669,
["event"] = "SPELL_CAST_START",
["npcID"] = 198933,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["npcID"] = 211089,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2838,
},
[446533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Penumbral Bull",
["npcID"] = 227934,
},
[259531] = {
["encounterName"] = "Vol'kaal",
["source"] = "Reanimation Totem",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 125977,
},
[438618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Engorged Crawler",
["npcID"] = 214840,
},
[449130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[427885] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["encounterID"] = 1751,
["event"] = "SPELL_CAST_START",
["npcID"] = 82682,
},
[367484] = {
["event"] = "SPELL_CAST_START",
["source"] = "Claw Fighter",
["npcID"] = 185508,
},
[39945] = {
["encounterName"] = "Shade of Akama",
["event"] = "SPELL_CAST_START",
["source"] = "Akama",
["npcID"] = 23191,
},
[455877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Abomination",
["npcID"] = 215654,
},
[446430] = {
["source"] = "Briney Kelpcore",
["event"] = "SPELL_CAST_START",
["npcID"] = 220547,
},
[428910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Auctioned Pages Past",
["npcID"] = 214069,
},
[422245] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210153,
},
[235578] = {
["source"] = "Hand from Beyond",
["event"] = "SPELL_CAST_START",
["npcID"] = 118698,
},
[425974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earth Infused Golem",
["npcID"] = 210109,
},
[383866] = {
["source"] = "Incarnated Wick",
["event"] = "SPELL_CAST_START",
["npcID"] = 205407,
},
[448818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[430013] = {
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_START",
["npcID"] = 207186,
},
[456772] = {
["source"] = "Workmaster Nast",
["event"] = "SPELL_CAST_START",
["npcID"] = 213200,
},
[405366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady Shaz'ra",
["npcID"] = 200885,
},
[451435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidwraith",
["npcID"] = 224466,
},
[451097] = {
["source"] = "Sureki Militant",
["event"] = "SPELL_CAST_START",
["npcID"] = 213932,
},
[423501] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[451113] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[385916] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["npcID"] = 186616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2637,
},
[427616] = {
["source"] = "Unruly Stormrook",
["event"] = "SPELL_CAST_START",
["npcID"] = 207186,
},
[371584] = {
["source"] = "Irontide Brinecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 200853,
},
[255577] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[443247] = {
["source"] = "Corrupted Memory of Turalyon",
["event"] = "SPELL_CAST_START",
["npcID"] = 214616,
},
[445866] = {
["isChanneled"] = true,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[455814] = {
["source"] = "Elemental Rift",
["event"] = "SPELL_CAST_START",
["npcID"] = 217914,
},
[421817] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[391380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gaelzion",
["npcID"] = 193653,
},
[450142] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[428916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[255952] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[426869] = {
["source"] = "Flickerflame Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212548,
},
[427382] = {
["event"] = "SPELL_CAST_START",
["source"] = "Engine Speaker",
["npcID"] = 212764,
},
[383872] = {
["source"] = "Primal Blaze",
["event"] = "SPELL_CAST_START",
["npcID"] = 200589,
},
[376706] = {
["source"] = "Nokhud Stormcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 190294,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[427894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[443487] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[413562] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Lurking Tempest",
["npcID"] = 204337,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[422776] = {
["encounterName"] = "Igira the Cruel",
["source"] = "Igira the Cruel",
["encounterID"] = 2709,
["event"] = "SPELL_CAST_START",
["npcID"] = 200926,
},
[258181] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[461781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargassum Guardian",
["npcID"] = 212582,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["npcID"] = 40177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1050,
},
[377732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Custodian",
["npcID"] = 184319,
},
[440181] = {
["source"] = "Agaric Spreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 212578,
},
[424825] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sylvanesh the Ascended",
["npcID"] = 207107,
},
[384899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rotbow Stalker",
["npcID"] = 186208,
},
[369865] = {
["source"] = "Nokhud Huntmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 185353,
},
[427897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[256627] = {
["source"] = "Scrimshaw Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129374,
},
[405375] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[406399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Arcanist",
["npcID"] = 201736,
},
[450043] = {
["source"] = "Malfunctioning Spire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220068,
},
[375687] = {
["source"] = "Decay Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 190426,
},
[398497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormtop Shalemaw",
["npcID"] = 212364,
},
[448897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mi'thk",
["npcID"] = 211582,
},
[256979] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Eudora",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126848,
},
[200784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 98792,
},
[441627] = {
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214673,
},
[268260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ashvane Cannoneer",
["npcID"] = 138465,
},
[440185] = {
["source"] = "Rustul Titancap",
["event"] = "SPELL_CAST_START",
["npcID"] = 213115,
},
[200913] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wyrmtongue Scavenger",
["npcID"] = 98792,
},
[409473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[412012] = {
["isChanneled"] = true,
["source"] = "Infinite Timeslicer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205408,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["event"] = "SPELL_CAST_START",
["npcID"] = 199000,
},
[367500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bracken Warscourge",
["npcID"] = 185529,
},
[450424] = {
["source"] = "Congealed Wax-hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 223206,
},
[444692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Ramolith",
["npcID"] = 221023,
},
[443433] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[427950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[265377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Headhunter",
["npcID"] = 133663,
},
[381834] = {
["encounterName"] = "Hackclaw's War-Band",
["source"] = "Rira Hackclaw",
["npcID"] = 186122,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2570,
},
[438860] = {
["encounterName"] = "Izo, the Grand Splicer",
["source"] = "Izo, the Grand Splicer",
["encounterID"] = 2909,
["event"] = "SPELL_CAST_START",
["npcID"] = 216658,
},
[420737] = {
["event"] = "SPELL_CAST_START",
["source"] = "Elder Cassaphine",
["npcID"] = 206818,
},
[438658] = {
["encounterName"] = "The Coaglamation",
["source"] = "The Coaglamation",
["encounterID"] = 2905,
["event"] = "SPELL_CAST_START",
["npcID"] = 216320,
},
[197700] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Priestess",
["npcID"] = 100450,
},
[427356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Devout Priest",
["npcID"] = 206697,
},
[367503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decay Speaker",
["npcID"] = 186191,
},
[41483] = {
["encounterName"] = "The Illidari Council",
["source"] = "High Nethermancer Zerevor",
["npcID"] = 22950,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[434407] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["npcID"] = 213937,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2839,
},
[199652] = {
["source"] = "King Haldor",
["event"] = "SPELL_CAST_START",
["npcID"] = 95843,
},
[441214] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[372623] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2557,
},
[209378] = {
["source"] = "Imacu'tya",
["event"] = "SPELL_CAST_START",
["npcID"] = 104275,
},
[450435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Y'tekhi",
["npcID"] = 215660,
},
[462802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Machinist",
["npcID"] = 229695,
},
[434137] = {
["source"] = "Royal Venomshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 220730,
},
[426883] = {
["source"] = "Kobold Taskworker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212383,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 135552,
},
[424836] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sylvanesh the Ascended",
["npcID"] = 207107,
},
[451900] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[445882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Mad Sow",
["npcID"] = 214930,
},
[434122] = {
["source"] = "Ascended Neophyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 216326,
},
[376292] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[394749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Storm",
["npcID"] = 198716,
},
[295032] = {
["event"] = "SPELL_CAST_START",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[448384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flamekeeper Graz",
["npcID"] = 219279,
},
[446646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[458271] = {
["source"] = "Moth'ethk",
["event"] = "SPELL_CAST_START",
["npcID"] = 206203,
},
[40076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Wrangler",
["npcID"] = 22877,
},
[391055] = {
["encounterName"] = "Kurog Grimtotem",
["source"] = "Kurog Grimtotem",
["encounterID"] = 2605,
["event"] = "SPELL_CAST_START",
["npcID"] = 184986,
},
[404364] = {
["encounterName"] = "Morchie",
["source"] = "Morchie",
["npcID"] = 202789,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2671,
},
[376723] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["npcID"] = 190294,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2580,
},
[275563] = {
["source"] = "Shadowstarved Bullfrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 214406,
},
[203750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Chronomaton",
["npcID"] = 111622,
},
[452539] = {
["event"] = "SPELL_CAST_START",
["source"] = "Terror of the Forge",
["npcID"] = 220271,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2024-09-08 10:19:03 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-07 11:34:48 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-07 01:00:41 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-07 00:29:05 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Severusevans",
"2024-09-06 23:26:28 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-06 17:41:27 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-06 16:54:15 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmonk",
"2024-09-06 14:29:02 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmonk",
"2024-09-06 12:59:51 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmonk",
"2024-09-06 12:15:24 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmonk",
"2024-09-06 09:58:15 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmonk",
"2024-09-05 22:26:19 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Severusevans",
"2024-09-05 21:12:32 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevdh",
"2024-09-05 19:31:51 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Xosis",
"2024-09-05 19:31:00 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Sevmage",
"2024-09-05 19:28:46 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Xosis",
"2024-09-05 18:51:54 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Xosis",
"2024-09-05 17:45:18 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Xosis",
"2024-09-05 16:30:43 | INIT | Plater-v587-Retail | Framework v565 | 11.0.2 | enUS | Xosis",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
